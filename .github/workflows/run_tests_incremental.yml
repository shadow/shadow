# Syntax reference:
# https://help.github.com/en/actions/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions

name: Shadow Tests Incremental
permissions: read-all

defaults:
  run:
    shell: bash

on:
  pull_request:
    types: [opened, synchronize]
  workflow_dispatch:
    inputs:
      build:
        description: "Build new Docker images"
        type: boolean
        default: false
      push:
        description: "Push Docker images"
        type: boolean
        default: false

jobs:
  shadow:
    strategy:
      matrix:
        vm:
          # Oldest-available kernel from
          # https://github.com/actions/virtual-environments
          - ubuntu-20.04
        container:
          # End of standard support: April 2023 https://wiki.ubuntu.com/Releases
          - 'ubuntu:18.04'
          # End of standard support: April 2025 https://wiki.ubuntu.com/Releases
          - 'ubuntu:20.04'
          # End of standard support: April 2027 https://wiki.ubuntu.com/Releases
          - 'ubuntu:22.04'
          # EOL ~August 2022 https://wiki.debian.org/DebianReleases
          - 'debian:10-slim'
          - 'debian:11-slim'
          # EOL June 7 2022 https://endoflife.date/fedora
          - 'fedora:34'
          - 'fedora:35'
          - 'fedora:36'
          # EOL Dec 15 2023 https://endoflife.date/fedora
          - 'fedora:37'
          # EOL May 2024 https://www.centos.org/centos-stream/
          - 'quay.io/centos/centos:stream8'
        cc: ['gcc']
        buildtype: ['release']
        include:
          # Run some tests on the newest-available base vm, and hence
          # newest-available kernel. https://github.com/actions/virtual-environments
          - vm: 'ubuntu-22.04'
            container: 'ubuntu:22.04'
            cc: 'gcc'
            buildtype: 'release'

          # Run some tests on the newest-available clang.  Testing clang on
          # *every* platform is a bit overkill, but testing on at least one
          # gives decent "bang for the buck" of testing compatibility with
          # clang's most recent diagnostics and optimizations.
          #
          # Also use the more-recent kernel here.
          - vm: 'ubuntu-22.04'
            container: 'ubuntu:22.04'
            cc: 'clang'
            buildtype: 'release'

          # Test a debug build for each compiler.
          - vm: 'ubuntu-20.04'
            container: 'ubuntu:22.04'
            cc: 'gcc'
            buildtype: 'debug'
          - vm: 'ubuntu-20.04'
            container: 'ubuntu:22.04'
            cc: 'clang'
            buildtype: 'debug'
    runs-on: ${{ matrix.vm }}

    env:
      # Assign these to env variables rather than using directly inline, to help
      # prevent injection mistakes/attacks, e.g. by including a " character to
      # terminate a bash string.
      INPUTS_BUILD: "${{ github.event.inputs.build }}"
      INPUTS_PUSH: "${{ github.event.inputs.push }}"

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          # Run on PR head instead of merge result. Running on the merge
          # result can give confusing results, and we require PR to be up to
          # date with target branch before merging, anyway.
          # See https://github.com/shadow/shadow/issues/2166
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Test
        run: |
          set -x
          FLAGS=()
          FLAGS+=("-c" "${{ matrix.container }}")
          FLAGS+=("-C" "${{ matrix.cc }}")
          FLAGS+=("-b" "${{ matrix.buildtype }}")

          # Get the generated tag for the image
          IMAGETAG=`ci/run.sh -t "${FLAGS[@]}"`

          if [ "$INPUTS_BUILD" == "true" ]
          then
            # Build the image
            FLAGS+=("-i")

            # Fetch the base image for the build.
            # Do this before logging in to avoid charging our account for the pull.
            docker pull ${{ matrix.container }}
          else
            # Ensure the image is actually available
            if ! docker pull "${IMAGETAG}"
            then
              echo "Couldn't pull image; building"
              FLAGS+=("-i")
            fi
          fi

          if [ "$INPUTS_PUSH" == "true" ]
          then
            FLAGS+=("-p")

            # Log in so that we can push
            docker login -u shadowsim --password "${{ secrets.DOCKERHUB_TOKEN }}"
          fi

          # Run
          ci/run.sh "${FLAGS[@]}"

      - name: Compress logs
        if: failure()
        run: |
          shopt -s globstar
          tar -cJf ci/build/Testing/Temporary{.tar.xz,/}
          for f in ci/build/**/*.data; do tar -cJf "$f.tar.xz" "$f/"; done

      - name: Upload shadow data directories
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: shadow-data-dirs
          path: ci/build/**/*.data.tar.xz

      - name: Upload shadow log file
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: shadow-log-file
          path: ci/build/Testing/Temporary.tar.xz
