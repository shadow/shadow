# Syntax reference:
# https://help.github.com/en/actions/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions

name: Lint Checks
permissions: read-all

on:
  push:
    branches: [main]
  pull_request:
    types: [opened, synchronize]

env:
  CARGO_TERM_COLOR: always

jobs:

  lint-python:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false
          # Run on PR head instead of merge result. Running on the merge
          # result can give confusing results, and we require PR to be up to
          # date with target branch before merging, anyway.
          # See https://github.com/shadow/shadow/issues/2166
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: actions/setup-python@v3
        with:
          python-version: '3.10'
      - run: pip install flake8
      - run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude src/external

  lint-rust:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          # Run on PR head instead of merge result. Running on the merge
          # result can give confusing results, and we require PR to be up to
          # date with target branch before merging, anyway.
          # See https://github.com/shadow/shadow/issues/2166
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Rustfmt check
        run: (cd src && cargo fmt -- --check)

  lint-cargo-lock:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Cargo update check
        run: |
          # This will return an error if any versions of local crates in the Cargo.lock
          # are out of date compared to the crate versions in Cargo.toml. This can fail
          # if the Shadow version is bumped without using Cargo to update the lock file.
          (cd src && cargo update --locked --workspace)

  lint-bindings:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:20.04
    env:
      CONTAINER: ubuntu:20.04
      CC: clang
      CXX: clang++
      RUSTPROFILE: minimal
    steps:
      - name: Install git
        run: |
          apt-get update
          DEBIAN_FRONTEND=noninteractive apt-get install -y git
      # Work around https://github.com/actions/checkout/issues/760
      - name: add safe.directory
        run: git config --global --add safe.directory $PWD
      # This must come *after* installing git, so that the checkout action
      # uses git and creates a "real" checkout that we can later `git diff`.
      # Otherwise it uses the GH API to just copy the contents locally, but
      # doesn't create a .git directory.
      - uses: actions/checkout@v2
        with:
          persist-credentials: false
          # Run on PR head instead of merge result. Running on the merge
          # result can give confusing results, and we require PR to be up to
          # date with target branch before merging, anyway.
          # See https://github.com/shadow/shadow/issues/2166
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Get month
        id: get-month
        run: |
          echo "::set-output name=month::$(/bin/date -u "+%Y%m")"
      - name: Install dependencies
        run: |
          ci/container_scripts/install_deps.sh
          ci/container_scripts/install_extra_deps.sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      - name: Restore cargo registry cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          # invalidate the cache once per month
          key: cargo-registry-${{ steps.get-month.outputs.month }}
          restore-keys: |
            cargo-registry-
      - name: Install Rust packages
        run: |
          rustup component add rustfmt
          # when updating these versions, also update the versions in "docs/developer_guide.md"
          cargo install --force --version 0.20.0 cbindgen
          cargo install --force --version 0.59.2 bindgen
      - name: Check bindings (release)
        run: |
          rm -rf build && mkdir build
          (cd build && cmake --target bindings -DCMAKE_BUILD_TYPE=Release .. && make bindings)
          git diff --exit-code
      - name: Check bindings (debug)
        run: |
          rm -rf build && mkdir build
          (cd build && cmake --target bindings -DCMAKE_BUILD_TYPE=Debug .. && make bindings)
          git diff --exit-code
      - name: Details
        if: failure()
        run: |
          cbindgen --version
          bindgen --version
          echo "If the bindings are different, you may want to check that your local cbindgen/bindgen versions match with the CI, and update the CI version numbers if necessary."
