/* automatically generated by rust-bindgen 0.69.4 */

/* Build script: ./gen-kernel-bindings.sh */
/* Kernel tag: v6.12 */

pub type linux_sa_family_t = ::core::ffi::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux_sockaddr {
    pub lsa_family: linux_sa_family_t,
    pub lsa_data: [::core::ffi::c_char; 14usize],
}
#[test]
fn bindgen_test_layout_sockaddr() {
    const UNINIT: ::core::mem::MaybeUninit<linux_sockaddr> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_sockaddr>(),
        16usize,
        concat!("Size of: ", stringify!(linux_sockaddr))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_sockaddr>(),
        2usize,
        concat!("Alignment of ", stringify!(linux_sockaddr))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lsa_family) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sockaddr),
            "::",
            stringify!(lsa_family)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lsa_data) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sockaddr),
            "::",
            stringify!(lsa_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux_sync_serial_settings {
    pub clock_rate: ::core::ffi::c_uint,
    pub clock_type: ::core::ffi::c_uint,
    pub loopback: ::core::ffi::c_ushort,
}
#[test]
fn bindgen_test_layout_sync_serial_settings() {
    const UNINIT: ::core::mem::MaybeUninit<linux_sync_serial_settings> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_sync_serial_settings>(),
        12usize,
        concat!("Size of: ", stringify!(linux_sync_serial_settings))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_sync_serial_settings>(),
        4usize,
        concat!("Alignment of ", stringify!(linux_sync_serial_settings))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).clock_rate) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sync_serial_settings),
            "::",
            stringify!(clock_rate)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).clock_type) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sync_serial_settings),
            "::",
            stringify!(clock_type)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).loopback) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sync_serial_settings),
            "::",
            stringify!(loopback)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux_te1_settings {
    pub clock_rate: ::core::ffi::c_uint,
    pub clock_type: ::core::ffi::c_uint,
    pub loopback: ::core::ffi::c_ushort,
    pub slot_map: ::core::ffi::c_uint,
}
#[test]
fn bindgen_test_layout_te1_settings() {
    const UNINIT: ::core::mem::MaybeUninit<linux_te1_settings> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_te1_settings>(),
        16usize,
        concat!("Size of: ", stringify!(linux_te1_settings))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_te1_settings>(),
        4usize,
        concat!("Alignment of ", stringify!(linux_te1_settings))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).clock_rate) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_te1_settings),
            "::",
            stringify!(clock_rate)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).clock_type) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_te1_settings),
            "::",
            stringify!(clock_type)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).loopback) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_te1_settings),
            "::",
            stringify!(loopback)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).slot_map) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_te1_settings),
            "::",
            stringify!(slot_map)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux_raw_hdlc_proto {
    pub encoding: ::core::ffi::c_ushort,
    pub parity: ::core::ffi::c_ushort,
}
#[test]
fn bindgen_test_layout_raw_hdlc_proto() {
    const UNINIT: ::core::mem::MaybeUninit<linux_raw_hdlc_proto> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_raw_hdlc_proto>(),
        4usize,
        concat!("Size of: ", stringify!(linux_raw_hdlc_proto))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_raw_hdlc_proto>(),
        2usize,
        concat!("Alignment of ", stringify!(linux_raw_hdlc_proto))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).encoding) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_raw_hdlc_proto),
            "::",
            stringify!(encoding)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).parity) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_raw_hdlc_proto),
            "::",
            stringify!(parity)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux_fr_proto {
    pub t391: ::core::ffi::c_uint,
    pub t392: ::core::ffi::c_uint,
    pub n391: ::core::ffi::c_uint,
    pub n392: ::core::ffi::c_uint,
    pub n393: ::core::ffi::c_uint,
    pub lmi: ::core::ffi::c_ushort,
    pub dce: ::core::ffi::c_ushort,
}
#[test]
fn bindgen_test_layout_fr_proto() {
    const UNINIT: ::core::mem::MaybeUninit<linux_fr_proto> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_fr_proto>(),
        24usize,
        concat!("Size of: ", stringify!(linux_fr_proto))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_fr_proto>(),
        4usize,
        concat!("Alignment of ", stringify!(linux_fr_proto))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).t391) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_fr_proto),
            "::",
            stringify!(t391)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).t392) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_fr_proto),
            "::",
            stringify!(t392)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).n391) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_fr_proto),
            "::",
            stringify!(n391)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).n392) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_fr_proto),
            "::",
            stringify!(n392)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).n393) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_fr_proto),
            "::",
            stringify!(n393)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lmi) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_fr_proto),
            "::",
            stringify!(lmi)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).dce) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_fr_proto),
            "::",
            stringify!(dce)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux_fr_proto_pvc {
    pub dlci: ::core::ffi::c_uint,
}
#[test]
fn bindgen_test_layout_fr_proto_pvc() {
    const UNINIT: ::core::mem::MaybeUninit<linux_fr_proto_pvc> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_fr_proto_pvc>(),
        4usize,
        concat!("Size of: ", stringify!(linux_fr_proto_pvc))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_fr_proto_pvc>(),
        4usize,
        concat!("Alignment of ", stringify!(linux_fr_proto_pvc))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).dlci) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_fr_proto_pvc),
            "::",
            stringify!(dlci)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux_fr_proto_pvc_info {
    pub dlci: ::core::ffi::c_uint,
    pub master: [::core::ffi::c_char; 16usize],
}
#[test]
fn bindgen_test_layout_fr_proto_pvc_info() {
    const UNINIT: ::core::mem::MaybeUninit<linux_fr_proto_pvc_info> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_fr_proto_pvc_info>(),
        20usize,
        concat!("Size of: ", stringify!(linux_fr_proto_pvc_info))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_fr_proto_pvc_info>(),
        4usize,
        concat!("Alignment of ", stringify!(linux_fr_proto_pvc_info))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).dlci) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_fr_proto_pvc_info),
            "::",
            stringify!(dlci)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).master) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_fr_proto_pvc_info),
            "::",
            stringify!(master)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux_cisco_proto {
    pub interval: ::core::ffi::c_uint,
    pub timeout: ::core::ffi::c_uint,
}
#[test]
fn bindgen_test_layout_cisco_proto() {
    const UNINIT: ::core::mem::MaybeUninit<linux_cisco_proto> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_cisco_proto>(),
        8usize,
        concat!("Size of: ", stringify!(linux_cisco_proto))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_cisco_proto>(),
        4usize,
        concat!("Alignment of ", stringify!(linux_cisco_proto))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).interval) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_cisco_proto),
            "::",
            stringify!(interval)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).timeout) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_cisco_proto),
            "::",
            stringify!(timeout)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux_x25_hdlc_proto {
    pub dce: ::core::ffi::c_ushort,
    pub modulo: ::core::ffi::c_uint,
    pub window: ::core::ffi::c_uint,
    pub t1: ::core::ffi::c_uint,
    pub t2: ::core::ffi::c_uint,
    pub n2: ::core::ffi::c_uint,
}
#[test]
fn bindgen_test_layout_x25_hdlc_proto() {
    const UNINIT: ::core::mem::MaybeUninit<linux_x25_hdlc_proto> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_x25_hdlc_proto>(),
        24usize,
        concat!("Size of: ", stringify!(linux_x25_hdlc_proto))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_x25_hdlc_proto>(),
        4usize,
        concat!("Alignment of ", stringify!(linux_x25_hdlc_proto))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).dce) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_x25_hdlc_proto),
            "::",
            stringify!(dce)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).modulo) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_x25_hdlc_proto),
            "::",
            stringify!(modulo)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).window) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_x25_hdlc_proto),
            "::",
            stringify!(window)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).t1) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_x25_hdlc_proto),
            "::",
            stringify!(t1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).t2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_x25_hdlc_proto),
            "::",
            stringify!(t2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).n2) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_x25_hdlc_proto),
            "::",
            stringify!(n2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux_ifmap {
    pub mem_start: ::core::ffi::c_ulong,
    pub mem_end: ::core::ffi::c_ulong,
    pub base_addr: ::core::ffi::c_ushort,
    pub irq: ::core::ffi::c_uchar,
    pub dma: ::core::ffi::c_uchar,
    pub port: ::core::ffi::c_uchar,
}
#[test]
fn bindgen_test_layout_ifmap() {
    const UNINIT: ::core::mem::MaybeUninit<linux_ifmap> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_ifmap>(),
        24usize,
        concat!("Size of: ", stringify!(linux_ifmap))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_ifmap>(),
        8usize,
        concat!("Alignment of ", stringify!(linux_ifmap))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).mem_start) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_ifmap),
            "::",
            stringify!(mem_start)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).mem_end) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_ifmap),
            "::",
            stringify!(mem_end)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).base_addr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_ifmap),
            "::",
            stringify!(base_addr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).irq) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_ifmap),
            "::",
            stringify!(irq)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).dma) as usize - ptr as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_ifmap),
            "::",
            stringify!(dma)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).port) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_ifmap),
            "::",
            stringify!(port)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct linux_if_settings {
    pub type_: ::core::ffi::c_uint,
    pub size: ::core::ffi::c_uint,
    pub ifs_ifsu: linux_if_settings__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union linux_if_settings__bindgen_ty_1 {
    pub raw_hdlc: *mut linux_raw_hdlc_proto,
    pub cisco: *mut linux_cisco_proto,
    pub fr: *mut linux_fr_proto,
    pub fr_pvc: *mut linux_fr_proto_pvc,
    pub fr_pvc_info: *mut linux_fr_proto_pvc_info,
    pub x25: *mut linux_x25_hdlc_proto,
    pub sync: *mut linux_sync_serial_settings,
    pub te1: *mut linux_te1_settings,
}
#[test]
fn bindgen_test_layout_if_settings__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<linux_if_settings__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_if_settings__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(linux_if_settings__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_if_settings__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(linux_if_settings__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).raw_hdlc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_if_settings__bindgen_ty_1),
            "::",
            stringify!(raw_hdlc)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cisco) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_if_settings__bindgen_ty_1),
            "::",
            stringify!(cisco)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_if_settings__bindgen_ty_1),
            "::",
            stringify!(fr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fr_pvc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_if_settings__bindgen_ty_1),
            "::",
            stringify!(fr_pvc)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fr_pvc_info) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_if_settings__bindgen_ty_1),
            "::",
            stringify!(fr_pvc_info)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).x25) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_if_settings__bindgen_ty_1),
            "::",
            stringify!(x25)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sync) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_if_settings__bindgen_ty_1),
            "::",
            stringify!(sync)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).te1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_if_settings__bindgen_ty_1),
            "::",
            stringify!(te1)
        )
    );
}
impl ::core::fmt::Debug for linux_if_settings__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "linux_if_settings__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_if_settings() {
    const UNINIT: ::core::mem::MaybeUninit<linux_if_settings> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_if_settings>(),
        16usize,
        concat!("Size of: ", stringify!(linux_if_settings))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_if_settings>(),
        8usize,
        concat!("Alignment of ", stringify!(linux_if_settings))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_if_settings),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_if_settings),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ifs_ifsu) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_if_settings),
            "::",
            stringify!(ifs_ifsu)
        )
    );
}
impl ::core::fmt::Debug for linux_if_settings {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(
            f,
            "linux_if_settings {{ type: {:?}, size: {:?}, ifs_ifsu: {:?} }}",
            self.type_, self.size, self.ifs_ifsu
        )
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct linux_ifreq {
    pub ifr_ifrn: linux_ifreq__bindgen_ty_1,
    pub ifr_ifru: linux_ifreq__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union linux_ifreq__bindgen_ty_1 {
    pub ifrn_name: [::core::ffi::c_char; 16usize],
}
#[test]
fn bindgen_test_layout_ifreq__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<linux_ifreq__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_ifreq__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(linux_ifreq__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_ifreq__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(linux_ifreq__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ifrn_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_ifreq__bindgen_ty_1),
            "::",
            stringify!(ifrn_name)
        )
    );
}
impl ::core::fmt::Debug for linux_ifreq__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "linux_ifreq__bindgen_ty_1 {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union linux_ifreq__bindgen_ty_2 {
    pub ifru_addr: linux_sockaddr,
    pub ifru_dstaddr: linux_sockaddr,
    pub ifru_broadaddr: linux_sockaddr,
    pub ifru_netmask: linux_sockaddr,
    pub ifru_hwaddr: linux_sockaddr,
    pub ifru_flags: ::core::ffi::c_short,
    pub ifru_ivalue: ::core::ffi::c_int,
    pub ifru_mtu: ::core::ffi::c_int,
    pub ifru_map: linux_ifmap,
    pub ifru_slave: [::core::ffi::c_char; 16usize],
    pub ifru_newname: [::core::ffi::c_char; 16usize],
    pub ifru_data: *mut ::core::ffi::c_void,
    pub ifru_settings: linux_if_settings,
}
#[test]
fn bindgen_test_layout_ifreq__bindgen_ty_2() {
    const UNINIT: ::core::mem::MaybeUninit<linux_ifreq__bindgen_ty_2> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_ifreq__bindgen_ty_2>(),
        24usize,
        concat!("Size of: ", stringify!(linux_ifreq__bindgen_ty_2))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_ifreq__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(linux_ifreq__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ifru_addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_ifreq__bindgen_ty_2),
            "::",
            stringify!(ifru_addr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ifru_dstaddr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_ifreq__bindgen_ty_2),
            "::",
            stringify!(ifru_dstaddr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ifru_broadaddr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_ifreq__bindgen_ty_2),
            "::",
            stringify!(ifru_broadaddr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ifru_netmask) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_ifreq__bindgen_ty_2),
            "::",
            stringify!(ifru_netmask)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ifru_hwaddr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_ifreq__bindgen_ty_2),
            "::",
            stringify!(ifru_hwaddr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ifru_flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_ifreq__bindgen_ty_2),
            "::",
            stringify!(ifru_flags)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ifru_ivalue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_ifreq__bindgen_ty_2),
            "::",
            stringify!(ifru_ivalue)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ifru_mtu) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_ifreq__bindgen_ty_2),
            "::",
            stringify!(ifru_mtu)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ifru_map) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_ifreq__bindgen_ty_2),
            "::",
            stringify!(ifru_map)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ifru_slave) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_ifreq__bindgen_ty_2),
            "::",
            stringify!(ifru_slave)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ifru_newname) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_ifreq__bindgen_ty_2),
            "::",
            stringify!(ifru_newname)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ifru_data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_ifreq__bindgen_ty_2),
            "::",
            stringify!(ifru_data)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ifru_settings) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_ifreq__bindgen_ty_2),
            "::",
            stringify!(ifru_settings)
        )
    );
}
impl ::core::fmt::Debug for linux_ifreq__bindgen_ty_2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "linux_ifreq__bindgen_ty_2 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_ifreq() {
    const UNINIT: ::core::mem::MaybeUninit<linux_ifreq> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_ifreq>(),
        40usize,
        concat!("Size of: ", stringify!(linux_ifreq))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_ifreq>(),
        8usize,
        concat!("Alignment of ", stringify!(linux_ifreq))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ifr_ifrn) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_ifreq),
            "::",
            stringify!(ifr_ifrn)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ifr_ifru) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_ifreq),
            "::",
            stringify!(ifr_ifru)
        )
    );
}
impl ::core::fmt::Debug for linux_ifreq {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(
            f,
            "linux_ifreq {{ ifr_ifrn: {:?}, ifr_ifru: {:?} }}",
            self.ifr_ifrn, self.ifr_ifru
        )
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct linux_ifconf {
    pub ifc_len: ::core::ffi::c_int,
    pub ifc_ifcu: linux_ifconf__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union linux_ifconf__bindgen_ty_1 {
    pub ifcu_buf: *mut ::core::ffi::c_char,
    pub ifcu_req: *mut linux_ifreq,
}
#[test]
fn bindgen_test_layout_ifconf__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<linux_ifconf__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_ifconf__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(linux_ifconf__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_ifconf__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(linux_ifconf__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ifcu_buf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_ifconf__bindgen_ty_1),
            "::",
            stringify!(ifcu_buf)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ifcu_req) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_ifconf__bindgen_ty_1),
            "::",
            stringify!(ifcu_req)
        )
    );
}
impl ::core::fmt::Debug for linux_ifconf__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "linux_ifconf__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_ifconf() {
    const UNINIT: ::core::mem::MaybeUninit<linux_ifconf> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_ifconf>(),
        16usize,
        concat!("Size of: ", stringify!(linux_ifconf))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_ifconf>(),
        8usize,
        concat!("Alignment of ", stringify!(linux_ifconf))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ifc_len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_ifconf),
            "::",
            stringify!(ifc_len)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ifc_ifcu) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_ifconf),
            "::",
            stringify!(ifc_ifcu)
        )
    );
}
impl ::core::fmt::Debug for linux_ifconf {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(
            f,
            "linux_ifconf {{ ifc_len: {:?}, ifc_ifcu: {:?} }}",
            self.ifc_len, self.ifc_ifcu
        )
    }
}
