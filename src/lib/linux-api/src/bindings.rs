/* automatically generated by rust-bindgen 0.69.4 */

/* Build script: ./gen-kernel-bindings.sh */
/* Kernel tag: v6.12 */

#[repr(C)]
#[derive(Default)]
pub struct linux___IncompleteArrayField<T>(::core::marker::PhantomData<T>, [T; 0]);
impl<T> linux___IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        linux___IncompleteArrayField(::core::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::core::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::core::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::core::fmt::Debug for linux___IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.write_str("linux___IncompleteArrayField")
    }
}
pub const LINUX_AT_SYSINFO_EHDR: u32 = 33;
pub const LINUX_AT_VECTOR_SIZE_ARCH: u32 = 3;
pub const LINUX_AT_NULL: u32 = 0;
pub const LINUX_AT_IGNORE: u32 = 1;
pub const LINUX_AT_EXECFD: u32 = 2;
pub const LINUX_AT_PHDR: u32 = 3;
pub const LINUX_AT_PHENT: u32 = 4;
pub const LINUX_AT_PHNUM: u32 = 5;
pub const LINUX_AT_PAGESZ: u32 = 6;
pub const LINUX_AT_BASE: u32 = 7;
pub const LINUX_AT_FLAGS: u32 = 8;
pub const LINUX_AT_ENTRY: u32 = 9;
pub const LINUX_AT_NOTELF: u32 = 10;
pub const LINUX_AT_UID: u32 = 11;
pub const LINUX_AT_EUID: u32 = 12;
pub const LINUX_AT_GID: u32 = 13;
pub const LINUX_AT_EGID: u32 = 14;
pub const LINUX_AT_PLATFORM: u32 = 15;
pub const LINUX_AT_HWCAP: u32 = 16;
pub const LINUX_AT_CLKTCK: u32 = 17;
pub const LINUX_AT_SECURE: u32 = 23;
pub const LINUX_AT_BASE_PLATFORM: u32 = 24;
pub const LINUX_AT_RANDOM: u32 = 25;
pub const LINUX_AT_HWCAP2: u32 = 26;
pub const LINUX_AT_RSEQ_FEATURE_SIZE: u32 = 27;
pub const LINUX_AT_RSEQ_ALIGN: u32 = 28;
pub const LINUX_AT_HWCAP3: u32 = 29;
pub const LINUX_AT_HWCAP4: u32 = 30;
pub const LINUX_AT_EXECFN: u32 = 31;
pub const LINUX_AT_MINSIGSTKSZ: u32 = 51;
pub const LINUX___BITS_PER_LONG: u32 = 64;
pub const LINUX___BITS_PER_LONG_LONG: u32 = 64;
pub const LINUX___FD_SETSIZE: u32 = 1024;
pub const LINUX__LINUX_CAPABILITY_VERSION_1: u32 = 429392688;
pub const LINUX__LINUX_CAPABILITY_U32S_1: u32 = 1;
pub const LINUX__LINUX_CAPABILITY_VERSION_2: u32 = 537333798;
pub const LINUX__LINUX_CAPABILITY_U32S_2: u32 = 2;
pub const LINUX__LINUX_CAPABILITY_VERSION_3: u32 = 537396514;
pub const LINUX__LINUX_CAPABILITY_U32S_3: u32 = 2;
pub const LINUX_VFS_CAP_REVISION_MASK: u32 = 4278190080;
pub const LINUX_VFS_CAP_REVISION_SHIFT: u32 = 24;
pub const LINUX_VFS_CAP_FLAGS_MASK: i64 = -4278190081;
pub const LINUX_VFS_CAP_FLAGS_EFFECTIVE: u32 = 1;
pub const LINUX_VFS_CAP_REVISION_1: u32 = 16777216;
pub const LINUX_VFS_CAP_U32_1: u32 = 1;
pub const LINUX_VFS_CAP_REVISION_2: u32 = 33554432;
pub const LINUX_VFS_CAP_U32_2: u32 = 2;
pub const LINUX_VFS_CAP_REVISION_3: u32 = 50331648;
pub const LINUX_VFS_CAP_U32_3: u32 = 2;
pub const LINUX_VFS_CAP_U32: u32 = 2;
pub const LINUX_VFS_CAP_REVISION: u32 = 50331648;
pub const LINUX__LINUX_CAPABILITY_VERSION: u32 = 429392688;
pub const LINUX__LINUX_CAPABILITY_U32S: u32 = 1;
pub const LINUX_CAP_CHOWN: u32 = 0;
pub const LINUX_CAP_DAC_OVERRIDE: u32 = 1;
pub const LINUX_CAP_DAC_READ_SEARCH: u32 = 2;
pub const LINUX_CAP_FOWNER: u32 = 3;
pub const LINUX_CAP_FSETID: u32 = 4;
pub const LINUX_CAP_KILL: u32 = 5;
pub const LINUX_CAP_SETGID: u32 = 6;
pub const LINUX_CAP_SETUID: u32 = 7;
pub const LINUX_CAP_SETPCAP: u32 = 8;
pub const LINUX_CAP_LINUX_IMMUTABLE: u32 = 9;
pub const LINUX_CAP_NET_BIND_SERVICE: u32 = 10;
pub const LINUX_CAP_NET_BROADCAST: u32 = 11;
pub const LINUX_CAP_NET_ADMIN: u32 = 12;
pub const LINUX_CAP_NET_RAW: u32 = 13;
pub const LINUX_CAP_IPC_LOCK: u32 = 14;
pub const LINUX_CAP_IPC_OWNER: u32 = 15;
pub const LINUX_CAP_SYS_MODULE: u32 = 16;
pub const LINUX_CAP_SYS_RAWIO: u32 = 17;
pub const LINUX_CAP_SYS_CHROOT: u32 = 18;
pub const LINUX_CAP_SYS_PTRACE: u32 = 19;
pub const LINUX_CAP_SYS_PACCT: u32 = 20;
pub const LINUX_CAP_SYS_ADMIN: u32 = 21;
pub const LINUX_CAP_SYS_BOOT: u32 = 22;
pub const LINUX_CAP_SYS_NICE: u32 = 23;
pub const LINUX_CAP_SYS_RESOURCE: u32 = 24;
pub const LINUX_CAP_SYS_TIME: u32 = 25;
pub const LINUX_CAP_SYS_TTY_CONFIG: u32 = 26;
pub const LINUX_CAP_MKNOD: u32 = 27;
pub const LINUX_CAP_LEASE: u32 = 28;
pub const LINUX_CAP_AUDIT_WRITE: u32 = 29;
pub const LINUX_CAP_AUDIT_CONTROL: u32 = 30;
pub const LINUX_CAP_SETFCAP: u32 = 31;
pub const LINUX_CAP_MAC_OVERRIDE: u32 = 32;
pub const LINUX_CAP_MAC_ADMIN: u32 = 33;
pub const LINUX_CAP_SYSLOG: u32 = 34;
pub const LINUX_CAP_WAKE_ALARM: u32 = 35;
pub const LINUX_CAP_BLOCK_SUSPEND: u32 = 36;
pub const LINUX_CAP_AUDIT_READ: u32 = 37;
pub const LINUX_CAP_PERFMON: u32 = 38;
pub const LINUX_CAP_BPF: u32 = 39;
pub const LINUX_CAP_CHECKPOINT_RESTORE: u32 = 40;
pub const LINUX_CAP_LAST_CAP: u32 = 40;
pub const LINUX_CLOSE_RANGE_UNSHARE: u32 = 2;
pub const LINUX_CLOSE_RANGE_CLOEXEC: u32 = 4;
pub const LINUX_EPERM: u32 = 1;
pub const LINUX_ENOENT: u32 = 2;
pub const LINUX_ESRCH: u32 = 3;
pub const LINUX_EINTR: u32 = 4;
pub const LINUX_EIO: u32 = 5;
pub const LINUX_ENXIO: u32 = 6;
pub const LINUX_E2BIG: u32 = 7;
pub const LINUX_ENOEXEC: u32 = 8;
pub const LINUX_EBADF: u32 = 9;
pub const LINUX_ECHILD: u32 = 10;
pub const LINUX_EAGAIN: u32 = 11;
pub const LINUX_ENOMEM: u32 = 12;
pub const LINUX_EACCES: u32 = 13;
pub const LINUX_EFAULT: u32 = 14;
pub const LINUX_ENOTBLK: u32 = 15;
pub const LINUX_EBUSY: u32 = 16;
pub const LINUX_EEXIST: u32 = 17;
pub const LINUX_EXDEV: u32 = 18;
pub const LINUX_ENODEV: u32 = 19;
pub const LINUX_ENOTDIR: u32 = 20;
pub const LINUX_EISDIR: u32 = 21;
pub const LINUX_EINVAL: u32 = 22;
pub const LINUX_ENFILE: u32 = 23;
pub const LINUX_EMFILE: u32 = 24;
pub const LINUX_ENOTTY: u32 = 25;
pub const LINUX_ETXTBSY: u32 = 26;
pub const LINUX_EFBIG: u32 = 27;
pub const LINUX_ENOSPC: u32 = 28;
pub const LINUX_ESPIPE: u32 = 29;
pub const LINUX_EROFS: u32 = 30;
pub const LINUX_EMLINK: u32 = 31;
pub const LINUX_EPIPE: u32 = 32;
pub const LINUX_EDOM: u32 = 33;
pub const LINUX_ERANGE: u32 = 34;
pub const LINUX_EDEADLK: u32 = 35;
pub const LINUX_ENAMETOOLONG: u32 = 36;
pub const LINUX_ENOLCK: u32 = 37;
pub const LINUX_ENOSYS: u32 = 38;
pub const LINUX_ENOTEMPTY: u32 = 39;
pub const LINUX_ELOOP: u32 = 40;
pub const LINUX_EWOULDBLOCK: u32 = 11;
pub const LINUX_ENOMSG: u32 = 42;
pub const LINUX_EIDRM: u32 = 43;
pub const LINUX_ECHRNG: u32 = 44;
pub const LINUX_EL2NSYNC: u32 = 45;
pub const LINUX_EL3HLT: u32 = 46;
pub const LINUX_EL3RST: u32 = 47;
pub const LINUX_ELNRNG: u32 = 48;
pub const LINUX_EUNATCH: u32 = 49;
pub const LINUX_ENOCSI: u32 = 50;
pub const LINUX_EL2HLT: u32 = 51;
pub const LINUX_EBADE: u32 = 52;
pub const LINUX_EBADR: u32 = 53;
pub const LINUX_EXFULL: u32 = 54;
pub const LINUX_ENOANO: u32 = 55;
pub const LINUX_EBADRQC: u32 = 56;
pub const LINUX_EBADSLT: u32 = 57;
pub const LINUX_EDEADLOCK: u32 = 35;
pub const LINUX_EBFONT: u32 = 59;
pub const LINUX_ENOSTR: u32 = 60;
pub const LINUX_ENODATA: u32 = 61;
pub const LINUX_ETIME: u32 = 62;
pub const LINUX_ENOSR: u32 = 63;
pub const LINUX_ENONET: u32 = 64;
pub const LINUX_ENOPKG: u32 = 65;
pub const LINUX_EREMOTE: u32 = 66;
pub const LINUX_ENOLINK: u32 = 67;
pub const LINUX_EADV: u32 = 68;
pub const LINUX_ESRMNT: u32 = 69;
pub const LINUX_ECOMM: u32 = 70;
pub const LINUX_EPROTO: u32 = 71;
pub const LINUX_EMULTIHOP: u32 = 72;
pub const LINUX_EDOTDOT: u32 = 73;
pub const LINUX_EBADMSG: u32 = 74;
pub const LINUX_EOVERFLOW: u32 = 75;
pub const LINUX_ENOTUNIQ: u32 = 76;
pub const LINUX_EBADFD: u32 = 77;
pub const LINUX_EREMCHG: u32 = 78;
pub const LINUX_ELIBACC: u32 = 79;
pub const LINUX_ELIBBAD: u32 = 80;
pub const LINUX_ELIBSCN: u32 = 81;
pub const LINUX_ELIBMAX: u32 = 82;
pub const LINUX_ELIBEXEC: u32 = 83;
pub const LINUX_EILSEQ: u32 = 84;
pub const LINUX_ERESTART: u32 = 85;
pub const LINUX_ESTRPIPE: u32 = 86;
pub const LINUX_EUSERS: u32 = 87;
pub const LINUX_ENOTSOCK: u32 = 88;
pub const LINUX_EDESTADDRREQ: u32 = 89;
pub const LINUX_EMSGSIZE: u32 = 90;
pub const LINUX_EPROTOTYPE: u32 = 91;
pub const LINUX_ENOPROTOOPT: u32 = 92;
pub const LINUX_EPROTONOSUPPORT: u32 = 93;
pub const LINUX_ESOCKTNOSUPPORT: u32 = 94;
pub const LINUX_EOPNOTSUPP: u32 = 95;
pub const LINUX_EPFNOSUPPORT: u32 = 96;
pub const LINUX_EAFNOSUPPORT: u32 = 97;
pub const LINUX_EADDRINUSE: u32 = 98;
pub const LINUX_EADDRNOTAVAIL: u32 = 99;
pub const LINUX_ENETDOWN: u32 = 100;
pub const LINUX_ENETUNREACH: u32 = 101;
pub const LINUX_ENETRESET: u32 = 102;
pub const LINUX_ECONNABORTED: u32 = 103;
pub const LINUX_ECONNRESET: u32 = 104;
pub const LINUX_ENOBUFS: u32 = 105;
pub const LINUX_EISCONN: u32 = 106;
pub const LINUX_ENOTCONN: u32 = 107;
pub const LINUX_ESHUTDOWN: u32 = 108;
pub const LINUX_ETOOMANYREFS: u32 = 109;
pub const LINUX_ETIMEDOUT: u32 = 110;
pub const LINUX_ECONNREFUSED: u32 = 111;
pub const LINUX_EHOSTDOWN: u32 = 112;
pub const LINUX_EHOSTUNREACH: u32 = 113;
pub const LINUX_EALREADY: u32 = 114;
pub const LINUX_EINPROGRESS: u32 = 115;
pub const LINUX_ESTALE: u32 = 116;
pub const LINUX_EUCLEAN: u32 = 117;
pub const LINUX_ENOTNAM: u32 = 118;
pub const LINUX_ENAVAIL: u32 = 119;
pub const LINUX_EISNAM: u32 = 120;
pub const LINUX_EREMOTEIO: u32 = 121;
pub const LINUX_EDQUOT: u32 = 122;
pub const LINUX_ENOMEDIUM: u32 = 123;
pub const LINUX_EMEDIUMTYPE: u32 = 124;
pub const LINUX_ECANCELED: u32 = 125;
pub const LINUX_ENOKEY: u32 = 126;
pub const LINUX_EKEYEXPIRED: u32 = 127;
pub const LINUX_EKEYREVOKED: u32 = 128;
pub const LINUX_EKEYREJECTED: u32 = 129;
pub const LINUX_EOWNERDEAD: u32 = 130;
pub const LINUX_ENOTRECOVERABLE: u32 = 131;
pub const LINUX_ERFKILL: u32 = 132;
pub const LINUX_EHWPOISON: u32 = 133;
pub const LINUX_O_ACCMODE: u32 = 3;
pub const LINUX_O_RDONLY: u32 = 0;
pub const LINUX_O_WRONLY: u32 = 1;
pub const LINUX_O_RDWR: u32 = 2;
pub const LINUX_O_CREAT: u32 = 64;
pub const LINUX_O_EXCL: u32 = 128;
pub const LINUX_O_NOCTTY: u32 = 256;
pub const LINUX_O_TRUNC: u32 = 512;
pub const LINUX_O_APPEND: u32 = 1024;
pub const LINUX_O_NONBLOCK: u32 = 2048;
pub const LINUX_O_DSYNC: u32 = 4096;
pub const LINUX_FASYNC: u32 = 8192;
pub const LINUX_O_DIRECT: u32 = 16384;
pub const LINUX_O_LARGEFILE: u32 = 32768;
pub const LINUX_O_DIRECTORY: u32 = 65536;
pub const LINUX_O_NOFOLLOW: u32 = 131072;
pub const LINUX_O_NOATIME: u32 = 262144;
pub const LINUX_O_CLOEXEC: u32 = 524288;
pub const LINUX___O_SYNC: u32 = 1048576;
pub const LINUX_O_SYNC: u32 = 1052672;
pub const LINUX_O_PATH: u32 = 2097152;
pub const LINUX___O_TMPFILE: u32 = 4194304;
pub const LINUX_O_TMPFILE: u32 = 4259840;
pub const LINUX_O_NDELAY: u32 = 2048;
pub const LINUX_F_DUPFD: u32 = 0;
pub const LINUX_F_GETFD: u32 = 1;
pub const LINUX_F_SETFD: u32 = 2;
pub const LINUX_F_GETFL: u32 = 3;
pub const LINUX_F_SETFL: u32 = 4;
pub const LINUX_F_GETLK: u32 = 5;
pub const LINUX_F_SETLK: u32 = 6;
pub const LINUX_F_SETLKW: u32 = 7;
pub const LINUX_F_SETOWN: u32 = 8;
pub const LINUX_F_GETOWN: u32 = 9;
pub const LINUX_F_SETSIG: u32 = 10;
pub const LINUX_F_GETSIG: u32 = 11;
pub const LINUX_F_SETOWN_EX: u32 = 15;
pub const LINUX_F_GETOWN_EX: u32 = 16;
pub const LINUX_F_GETOWNER_UIDS: u32 = 17;
pub const LINUX_F_OFD_GETLK: u32 = 36;
pub const LINUX_F_OFD_SETLK: u32 = 37;
pub const LINUX_F_OFD_SETLKW: u32 = 38;
pub const LINUX_F_OWNER_TID: u32 = 0;
pub const LINUX_F_OWNER_PID: u32 = 1;
pub const LINUX_F_OWNER_PGRP: u32 = 2;
pub const LINUX_FD_CLOEXEC: u32 = 1;
pub const LINUX_F_RDLCK: u32 = 0;
pub const LINUX_F_WRLCK: u32 = 1;
pub const LINUX_F_UNLCK: u32 = 2;
pub const LINUX_F_EXLCK: u32 = 4;
pub const LINUX_F_SHLCK: u32 = 8;
pub const LINUX_LOCK_SH: u32 = 1;
pub const LINUX_LOCK_EX: u32 = 2;
pub const LINUX_LOCK_NB: u32 = 4;
pub const LINUX_LOCK_UN: u32 = 8;
pub const LINUX_LOCK_MAND: u32 = 32;
pub const LINUX_LOCK_READ: u32 = 64;
pub const LINUX_LOCK_WRITE: u32 = 128;
pub const LINUX_LOCK_RW: u32 = 192;
pub const LINUX_F_LINUX_SPECIFIC_BASE: u32 = 1024;
pub const LINUX_RESOLVE_NO_XDEV: u32 = 1;
pub const LINUX_RESOLVE_NO_MAGICLINKS: u32 = 2;
pub const LINUX_RESOLVE_NO_SYMLINKS: u32 = 4;
pub const LINUX_RESOLVE_BENEATH: u32 = 8;
pub const LINUX_RESOLVE_IN_ROOT: u32 = 16;
pub const LINUX_RESOLVE_CACHED: u32 = 32;
pub const LINUX_F_SETLEASE: u32 = 1024;
pub const LINUX_F_GETLEASE: u32 = 1025;
pub const LINUX_F_NOTIFY: u32 = 1026;
pub const LINUX_F_DUPFD_QUERY: u32 = 1027;
pub const LINUX_F_CREATED_QUERY: u32 = 1028;
pub const LINUX_F_CANCELLK: u32 = 1029;
pub const LINUX_F_DUPFD_CLOEXEC: u32 = 1030;
pub const LINUX_F_SETPIPE_SZ: u32 = 1031;
pub const LINUX_F_GETPIPE_SZ: u32 = 1032;
pub const LINUX_F_ADD_SEALS: u32 = 1033;
pub const LINUX_F_GET_SEALS: u32 = 1034;
pub const LINUX_F_SEAL_SEAL: u32 = 1;
pub const LINUX_F_SEAL_SHRINK: u32 = 2;
pub const LINUX_F_SEAL_GROW: u32 = 4;
pub const LINUX_F_SEAL_WRITE: u32 = 8;
pub const LINUX_F_SEAL_FUTURE_WRITE: u32 = 16;
pub const LINUX_F_SEAL_EXEC: u32 = 32;
pub const LINUX_F_GET_RW_HINT: u32 = 1035;
pub const LINUX_F_SET_RW_HINT: u32 = 1036;
pub const LINUX_F_GET_FILE_RW_HINT: u32 = 1037;
pub const LINUX_F_SET_FILE_RW_HINT: u32 = 1038;
pub const LINUX_RWH_WRITE_LIFE_NOT_SET: u32 = 0;
pub const LINUX_RWH_WRITE_LIFE_NONE: u32 = 1;
pub const LINUX_RWH_WRITE_LIFE_SHORT: u32 = 2;
pub const LINUX_RWH_WRITE_LIFE_MEDIUM: u32 = 3;
pub const LINUX_RWH_WRITE_LIFE_LONG: u32 = 4;
pub const LINUX_RWH_WRITE_LIFE_EXTREME: u32 = 5;
pub const LINUX_RWF_WRITE_LIFE_NOT_SET: u32 = 0;
pub const LINUX_DN_ACCESS: u32 = 1;
pub const LINUX_DN_MODIFY: u32 = 2;
pub const LINUX_DN_CREATE: u32 = 4;
pub const LINUX_DN_DELETE: u32 = 8;
pub const LINUX_DN_RENAME: u32 = 16;
pub const LINUX_DN_ATTRIB: u32 = 32;
pub const LINUX_DN_MULTISHOT: u32 = 2147483648;
pub const LINUX_AT_FDCWD: i32 = -100;
pub const LINUX_AT_SYMLINK_NOFOLLOW: u32 = 256;
pub const LINUX_AT_SYMLINK_FOLLOW: u32 = 1024;
pub const LINUX_AT_NO_AUTOMOUNT: u32 = 2048;
pub const LINUX_AT_EMPTY_PATH: u32 = 4096;
pub const LINUX_AT_STATX_SYNC_TYPE: u32 = 24576;
pub const LINUX_AT_STATX_SYNC_AS_STAT: u32 = 0;
pub const LINUX_AT_STATX_FORCE_SYNC: u32 = 8192;
pub const LINUX_AT_STATX_DONT_SYNC: u32 = 16384;
pub const LINUX_AT_RECURSIVE: u32 = 32768;
pub const LINUX_AT_RENAME_NOREPLACE: u32 = 1;
pub const LINUX_AT_RENAME_EXCHANGE: u32 = 2;
pub const LINUX_AT_RENAME_WHITEOUT: u32 = 4;
pub const LINUX_AT_EACCESS: u32 = 512;
pub const LINUX_AT_REMOVEDIR: u32 = 512;
pub const LINUX_AT_HANDLE_FID: u32 = 512;
pub const LINUX_AT_HANDLE_MNT_ID_UNIQUE: u32 = 1;
pub const LINUX_EPOLL_CLOEXEC: u32 = 524288;
pub const LINUX_EPOLL_CTL_ADD: u32 = 1;
pub const LINUX_EPOLL_CTL_DEL: u32 = 2;
pub const LINUX_EPOLL_CTL_MOD: u32 = 3;
pub const LINUX_EPOLL_IOC_TYPE: u32 = 138;
pub const LINUX_FUTEX_WAIT: u32 = 0;
pub const LINUX_FUTEX_WAKE: u32 = 1;
pub const LINUX_FUTEX_FD: u32 = 2;
pub const LINUX_FUTEX_REQUEUE: u32 = 3;
pub const LINUX_FUTEX_CMP_REQUEUE: u32 = 4;
pub const LINUX_FUTEX_WAKE_OP: u32 = 5;
pub const LINUX_FUTEX_LOCK_PI: u32 = 6;
pub const LINUX_FUTEX_UNLOCK_PI: u32 = 7;
pub const LINUX_FUTEX_TRYLOCK_PI: u32 = 8;
pub const LINUX_FUTEX_WAIT_BITSET: u32 = 9;
pub const LINUX_FUTEX_WAKE_BITSET: u32 = 10;
pub const LINUX_FUTEX_WAIT_REQUEUE_PI: u32 = 11;
pub const LINUX_FUTEX_CMP_REQUEUE_PI: u32 = 12;
pub const LINUX_FUTEX_LOCK_PI2: u32 = 13;
pub const LINUX_FUTEX_PRIVATE_FLAG: u32 = 128;
pub const LINUX_FUTEX_CLOCK_REALTIME: u32 = 256;
pub const LINUX_FUTEX_CMD_MASK: i32 = -385;
pub const LINUX_FUTEX_WAIT_PRIVATE: u32 = 128;
pub const LINUX_FUTEX_WAKE_PRIVATE: u32 = 129;
pub const LINUX_FUTEX_REQUEUE_PRIVATE: u32 = 131;
pub const LINUX_FUTEX_CMP_REQUEUE_PRIVATE: u32 = 132;
pub const LINUX_FUTEX_WAKE_OP_PRIVATE: u32 = 133;
pub const LINUX_FUTEX_LOCK_PI_PRIVATE: u32 = 134;
pub const LINUX_FUTEX_LOCK_PI2_PRIVATE: u32 = 141;
pub const LINUX_FUTEX_UNLOCK_PI_PRIVATE: u32 = 135;
pub const LINUX_FUTEX_TRYLOCK_PI_PRIVATE: u32 = 136;
pub const LINUX_FUTEX_WAIT_BITSET_PRIVATE: u32 = 137;
pub const LINUX_FUTEX_WAKE_BITSET_PRIVATE: u32 = 138;
pub const LINUX_FUTEX_WAIT_REQUEUE_PI_PRIVATE: u32 = 139;
pub const LINUX_FUTEX_CMP_REQUEUE_PI_PRIVATE: u32 = 140;
pub const LINUX_FUTEX2_SIZE_U8: u32 = 0;
pub const LINUX_FUTEX2_SIZE_U16: u32 = 1;
pub const LINUX_FUTEX2_SIZE_U32: u32 = 2;
pub const LINUX_FUTEX2_SIZE_U64: u32 = 3;
pub const LINUX_FUTEX2_NUMA: u32 = 4;
pub const LINUX_FUTEX2_PRIVATE: u32 = 128;
pub const LINUX_FUTEX2_SIZE_MASK: u32 = 3;
pub const LINUX_FUTEX_32: u32 = 2;
pub const LINUX_FUTEX_WAITV_MAX: u32 = 128;
pub const LINUX_FUTEX_WAITERS: u32 = 2147483648;
pub const LINUX_FUTEX_OWNER_DIED: u32 = 1073741824;
pub const LINUX_FUTEX_TID_MASK: u32 = 1073741823;
pub const LINUX_ROBUST_LIST_LIMIT: u32 = 2048;
pub const LINUX_FUTEX_BITSET_MATCH_ANY: u32 = 4294967295;
pub const LINUX_FUTEX_OP_SET: u32 = 0;
pub const LINUX_FUTEX_OP_ADD: u32 = 1;
pub const LINUX_FUTEX_OP_OR: u32 = 2;
pub const LINUX_FUTEX_OP_ANDN: u32 = 3;
pub const LINUX_FUTEX_OP_XOR: u32 = 4;
pub const LINUX_FUTEX_OP_OPARG_SHIFT: u32 = 8;
pub const LINUX_FUTEX_OP_CMP_EQ: u32 = 0;
pub const LINUX_FUTEX_OP_CMP_NE: u32 = 1;
pub const LINUX_FUTEX_OP_CMP_LT: u32 = 2;
pub const LINUX_FUTEX_OP_CMP_LE: u32 = 3;
pub const LINUX_FUTEX_OP_CMP_GT: u32 = 4;
pub const LINUX_FUTEX_OP_CMP_GE: u32 = 5;
pub const LINUX___UAPI_DEF_IF_IFCONF: u32 = 1;
pub const LINUX___UAPI_DEF_IF_IFMAP: u32 = 1;
pub const LINUX___UAPI_DEF_IF_IFNAMSIZ: u32 = 1;
pub const LINUX___UAPI_DEF_IF_IFREQ: u32 = 1;
pub const LINUX___UAPI_DEF_IF_NET_DEVICE_FLAGS: u32 = 1;
pub const LINUX___UAPI_DEF_IF_NET_DEVICE_FLAGS_LOWER_UP_DORMANT_ECHO: u32 = 1;
pub const LINUX___UAPI_DEF_IN_ADDR: u32 = 1;
pub const LINUX___UAPI_DEF_IN_IPPROTO: u32 = 1;
pub const LINUX___UAPI_DEF_IN_PKTINFO: u32 = 1;
pub const LINUX___UAPI_DEF_IP_MREQ: u32 = 1;
pub const LINUX___UAPI_DEF_SOCKADDR_IN: u32 = 1;
pub const LINUX___UAPI_DEF_IN_CLASS: u32 = 1;
pub const LINUX___UAPI_DEF_IN6_ADDR: u32 = 1;
pub const LINUX___UAPI_DEF_IN6_ADDR_ALT: u32 = 1;
pub const LINUX___UAPI_DEF_SOCKADDR_IN6: u32 = 1;
pub const LINUX___UAPI_DEF_IPV6_MREQ: u32 = 1;
pub const LINUX___UAPI_DEF_IPPROTO_V6: u32 = 1;
pub const LINUX___UAPI_DEF_IPV6_OPTIONS: u32 = 1;
pub const LINUX___UAPI_DEF_IN6_PKTINFO: u32 = 1;
pub const LINUX___UAPI_DEF_IP6_MTUINFO: u32 = 1;
pub const LINUX___UAPI_DEF_XATTR: u32 = 1;
pub const LINUX__K_SS_MAXSIZE: u32 = 128;
pub const LINUX_SOCK_SNDBUF_LOCK: u32 = 1;
pub const LINUX_SOCK_RCVBUF_LOCK: u32 = 2;
pub const LINUX_SOCK_BUF_LOCK_MASK: u32 = 3;
pub const LINUX_SOCK_TXREHASH_DEFAULT: u32 = 255;
pub const LINUX_SOCK_TXREHASH_DISABLED: u32 = 0;
pub const LINUX_SOCK_TXREHASH_ENABLED: u32 = 1;
pub const LINUX_IP_TOS: u32 = 1;
pub const LINUX_IP_TTL: u32 = 2;
pub const LINUX_IP_HDRINCL: u32 = 3;
pub const LINUX_IP_OPTIONS: u32 = 4;
pub const LINUX_IP_ROUTER_ALERT: u32 = 5;
pub const LINUX_IP_RECVOPTS: u32 = 6;
pub const LINUX_IP_RETOPTS: u32 = 7;
pub const LINUX_IP_PKTINFO: u32 = 8;
pub const LINUX_IP_PKTOPTIONS: u32 = 9;
pub const LINUX_IP_MTU_DISCOVER: u32 = 10;
pub const LINUX_IP_RECVERR: u32 = 11;
pub const LINUX_IP_RECVTTL: u32 = 12;
pub const LINUX_IP_RECVTOS: u32 = 13;
pub const LINUX_IP_MTU: u32 = 14;
pub const LINUX_IP_FREEBIND: u32 = 15;
pub const LINUX_IP_IPSEC_POLICY: u32 = 16;
pub const LINUX_IP_XFRM_POLICY: u32 = 17;
pub const LINUX_IP_PASSSEC: u32 = 18;
pub const LINUX_IP_TRANSPARENT: u32 = 19;
pub const LINUX_IP_RECVRETOPTS: u32 = 7;
pub const LINUX_IP_ORIGDSTADDR: u32 = 20;
pub const LINUX_IP_RECVORIGDSTADDR: u32 = 20;
pub const LINUX_IP_MINTTL: u32 = 21;
pub const LINUX_IP_NODEFRAG: u32 = 22;
pub const LINUX_IP_CHECKSUM: u32 = 23;
pub const LINUX_IP_BIND_ADDRESS_NO_PORT: u32 = 24;
pub const LINUX_IP_RECVFRAGSIZE: u32 = 25;
pub const LINUX_IP_RECVERR_RFC4884: u32 = 26;
pub const LINUX_IP_PMTUDISC_DONT: u32 = 0;
pub const LINUX_IP_PMTUDISC_WANT: u32 = 1;
pub const LINUX_IP_PMTUDISC_DO: u32 = 2;
pub const LINUX_IP_PMTUDISC_PROBE: u32 = 3;
pub const LINUX_IP_PMTUDISC_INTERFACE: u32 = 4;
pub const LINUX_IP_PMTUDISC_OMIT: u32 = 5;
pub const LINUX_IP_MULTICAST_IF: u32 = 32;
pub const LINUX_IP_MULTICAST_TTL: u32 = 33;
pub const LINUX_IP_MULTICAST_LOOP: u32 = 34;
pub const LINUX_IP_ADD_MEMBERSHIP: u32 = 35;
pub const LINUX_IP_DROP_MEMBERSHIP: u32 = 36;
pub const LINUX_IP_UNBLOCK_SOURCE: u32 = 37;
pub const LINUX_IP_BLOCK_SOURCE: u32 = 38;
pub const LINUX_IP_ADD_SOURCE_MEMBERSHIP: u32 = 39;
pub const LINUX_IP_DROP_SOURCE_MEMBERSHIP: u32 = 40;
pub const LINUX_IP_MSFILTER: u32 = 41;
pub const LINUX_MCAST_JOIN_GROUP: u32 = 42;
pub const LINUX_MCAST_BLOCK_SOURCE: u32 = 43;
pub const LINUX_MCAST_UNBLOCK_SOURCE: u32 = 44;
pub const LINUX_MCAST_LEAVE_GROUP: u32 = 45;
pub const LINUX_MCAST_JOIN_SOURCE_GROUP: u32 = 46;
pub const LINUX_MCAST_LEAVE_SOURCE_GROUP: u32 = 47;
pub const LINUX_MCAST_MSFILTER: u32 = 48;
pub const LINUX_IP_MULTICAST_ALL: u32 = 49;
pub const LINUX_IP_UNICAST_IF: u32 = 50;
pub const LINUX_IP_LOCAL_PORT_RANGE: u32 = 51;
pub const LINUX_IP_PROTOCOL: u32 = 52;
pub const LINUX_MCAST_EXCLUDE: u32 = 0;
pub const LINUX_MCAST_INCLUDE: u32 = 1;
pub const LINUX_IP_DEFAULT_MULTICAST_TTL: u32 = 1;
pub const LINUX_IP_DEFAULT_MULTICAST_LOOP: u32 = 1;
pub const LINUX___SOCK_SIZE__: u32 = 16;
pub const LINUX_IN_CLASSA_NET: u32 = 4278190080;
pub const LINUX_IN_CLASSA_NSHIFT: u32 = 24;
pub const LINUX_IN_CLASSA_HOST: u32 = 16777215;
pub const LINUX_IN_CLASSA_MAX: u32 = 128;
pub const LINUX_IN_CLASSB_NET: u32 = 4294901760;
pub const LINUX_IN_CLASSB_NSHIFT: u32 = 16;
pub const LINUX_IN_CLASSB_HOST: u32 = 65535;
pub const LINUX_IN_CLASSB_MAX: u32 = 65536;
pub const LINUX_IN_CLASSC_NET: u32 = 4294967040;
pub const LINUX_IN_CLASSC_NSHIFT: u32 = 8;
pub const LINUX_IN_CLASSC_HOST: u32 = 255;
pub const LINUX_IN_MULTICAST_NET: u32 = 3758096384;
pub const LINUX_IN_CLASSE_NET: u32 = 4294967295;
pub const LINUX_IN_CLASSE_NSHIFT: u32 = 0;
pub const LINUX_IN_LOOPBACKNET: u32 = 127;
pub const LINUX_INADDR_LOOPBACK: u32 = 2130706433;
pub const LINUX_INADDR_UNSPEC_GROUP: u32 = 3758096384;
pub const LINUX_INADDR_ALLHOSTS_GROUP: u32 = 3758096385;
pub const LINUX_INADDR_ALLRTRS_GROUP: u32 = 3758096386;
pub const LINUX_INADDR_ALLSNOOPERS_GROUP: u32 = 3758096490;
pub const LINUX_INADDR_MAX_LOCAL_GROUP: u32 = 3758096639;
pub const LINUX___LITTLE_ENDIAN: u32 = 1234;
pub const LINUX_NR_OPEN: u32 = 1024;
pub const LINUX_NGROUPS_MAX: u32 = 65536;
pub const LINUX_ARG_MAX: u32 = 131072;
pub const LINUX_LINK_MAX: u32 = 127;
pub const LINUX_MAX_CANON: u32 = 255;
pub const LINUX_MAX_INPUT: u32 = 255;
pub const LINUX_NAME_MAX: u32 = 255;
pub const LINUX_PATH_MAX: u32 = 4096;
pub const LINUX_PIPE_BUF: u32 = 4096;
pub const LINUX_XATTR_NAME_MAX: u32 = 255;
pub const LINUX_XATTR_SIZE_MAX: u32 = 65536;
pub const LINUX_XATTR_LIST_MAX: u32 = 65536;
pub const LINUX_RTSIG_MAX: u32 = 32;
pub const LINUX_MAP_32BIT: u32 = 64;
pub const LINUX_MAP_ABOVE4G: u32 = 128;
pub const LINUX_SHADOW_STACK_SET_TOKEN: u32 = 1;
pub const LINUX_PROT_READ: u32 = 1;
pub const LINUX_PROT_WRITE: u32 = 2;
pub const LINUX_PROT_EXEC: u32 = 4;
pub const LINUX_PROT_SEM: u32 = 8;
pub const LINUX_PROT_NONE: u32 = 0;
pub const LINUX_PROT_GROWSDOWN: u32 = 16777216;
pub const LINUX_PROT_GROWSUP: u32 = 33554432;
pub const LINUX_MAP_TYPE: u32 = 15;
pub const LINUX_MAP_FIXED: u32 = 16;
pub const LINUX_MAP_ANONYMOUS: u32 = 32;
pub const LINUX_MAP_POPULATE: u32 = 32768;
pub const LINUX_MAP_NONBLOCK: u32 = 65536;
pub const LINUX_MAP_STACK: u32 = 131072;
pub const LINUX_MAP_HUGETLB: u32 = 262144;
pub const LINUX_MAP_SYNC: u32 = 524288;
pub const LINUX_MAP_FIXED_NOREPLACE: u32 = 1048576;
pub const LINUX_MAP_UNINITIALIZED: u32 = 67108864;
pub const LINUX_MLOCK_ONFAULT: u32 = 1;
pub const LINUX_MS_ASYNC: u32 = 1;
pub const LINUX_MS_INVALIDATE: u32 = 2;
pub const LINUX_MS_SYNC: u32 = 4;
pub const LINUX_MADV_NORMAL: u32 = 0;
pub const LINUX_MADV_RANDOM: u32 = 1;
pub const LINUX_MADV_SEQUENTIAL: u32 = 2;
pub const LINUX_MADV_WILLNEED: u32 = 3;
pub const LINUX_MADV_DONTNEED: u32 = 4;
pub const LINUX_MADV_FREE: u32 = 8;
pub const LINUX_MADV_REMOVE: u32 = 9;
pub const LINUX_MADV_DONTFORK: u32 = 10;
pub const LINUX_MADV_DOFORK: u32 = 11;
pub const LINUX_MADV_HWPOISON: u32 = 100;
pub const LINUX_MADV_SOFT_OFFLINE: u32 = 101;
pub const LINUX_MADV_MERGEABLE: u32 = 12;
pub const LINUX_MADV_UNMERGEABLE: u32 = 13;
pub const LINUX_MADV_HUGEPAGE: u32 = 14;
pub const LINUX_MADV_NOHUGEPAGE: u32 = 15;
pub const LINUX_MADV_DONTDUMP: u32 = 16;
pub const LINUX_MADV_DODUMP: u32 = 17;
pub const LINUX_MADV_WIPEONFORK: u32 = 18;
pub const LINUX_MADV_KEEPONFORK: u32 = 19;
pub const LINUX_MADV_COLD: u32 = 20;
pub const LINUX_MADV_PAGEOUT: u32 = 21;
pub const LINUX_MADV_POPULATE_READ: u32 = 22;
pub const LINUX_MADV_POPULATE_WRITE: u32 = 23;
pub const LINUX_MADV_DONTNEED_LOCKED: u32 = 24;
pub const LINUX_MADV_COLLAPSE: u32 = 25;
pub const LINUX_MAP_FILE: u32 = 0;
pub const LINUX_PKEY_DISABLE_ACCESS: u32 = 1;
pub const LINUX_PKEY_DISABLE_WRITE: u32 = 2;
pub const LINUX_PKEY_ACCESS_MASK: u32 = 3;
pub const LINUX_MAP_GROWSDOWN: u32 = 256;
pub const LINUX_MAP_DENYWRITE: u32 = 2048;
pub const LINUX_MAP_EXECUTABLE: u32 = 4096;
pub const LINUX_MAP_LOCKED: u32 = 8192;
pub const LINUX_MAP_NORESERVE: u32 = 16384;
pub const LINUX_MCL_CURRENT: u32 = 1;
pub const LINUX_MCL_FUTURE: u32 = 2;
pub const LINUX_MCL_ONFAULT: u32 = 4;
pub const LINUX_HUGETLB_FLAG_ENCODE_SHIFT: u32 = 26;
pub const LINUX_HUGETLB_FLAG_ENCODE_MASK: u32 = 63;
pub const LINUX_HUGETLB_FLAG_ENCODE_16KB: u32 = 939524096;
pub const LINUX_HUGETLB_FLAG_ENCODE_64KB: u32 = 1073741824;
pub const LINUX_HUGETLB_FLAG_ENCODE_512KB: u32 = 1275068416;
pub const LINUX_HUGETLB_FLAG_ENCODE_1MB: u32 = 1342177280;
pub const LINUX_HUGETLB_FLAG_ENCODE_2MB: u32 = 1409286144;
pub const LINUX_HUGETLB_FLAG_ENCODE_8MB: u32 = 1543503872;
pub const LINUX_HUGETLB_FLAG_ENCODE_16MB: u32 = 1610612736;
pub const LINUX_HUGETLB_FLAG_ENCODE_32MB: u32 = 1677721600;
pub const LINUX_HUGETLB_FLAG_ENCODE_256MB: u32 = 1879048192;
pub const LINUX_HUGETLB_FLAG_ENCODE_512MB: u32 = 1946157056;
pub const LINUX_HUGETLB_FLAG_ENCODE_1GB: u32 = 2013265920;
pub const LINUX_HUGETLB_FLAG_ENCODE_2GB: u32 = 2080374784;
pub const LINUX_HUGETLB_FLAG_ENCODE_16GB: u32 = 2281701376;
pub const LINUX_MREMAP_MAYMOVE: u32 = 1;
pub const LINUX_MREMAP_FIXED: u32 = 2;
pub const LINUX_MREMAP_DONTUNMAP: u32 = 4;
pub const LINUX_OVERCOMMIT_GUESS: u32 = 0;
pub const LINUX_OVERCOMMIT_ALWAYS: u32 = 1;
pub const LINUX_OVERCOMMIT_NEVER: u32 = 2;
pub const LINUX_MAP_SHARED: u32 = 1;
pub const LINUX_MAP_PRIVATE: u32 = 2;
pub const LINUX_MAP_SHARED_VALIDATE: u32 = 3;
pub const LINUX_MAP_DROPPABLE: u32 = 8;
pub const LINUX_MAP_HUGE_SHIFT: u32 = 26;
pub const LINUX_MAP_HUGE_MASK: u32 = 63;
pub const LINUX_MAP_HUGE_16KB: u32 = 939524096;
pub const LINUX_MAP_HUGE_64KB: u32 = 1073741824;
pub const LINUX_MAP_HUGE_512KB: u32 = 1275068416;
pub const LINUX_MAP_HUGE_1MB: u32 = 1342177280;
pub const LINUX_MAP_HUGE_2MB: u32 = 1409286144;
pub const LINUX_MAP_HUGE_8MB: u32 = 1543503872;
pub const LINUX_MAP_HUGE_16MB: u32 = 1610612736;
pub const LINUX_MAP_HUGE_32MB: u32 = 1677721600;
pub const LINUX_MAP_HUGE_256MB: u32 = 1879048192;
pub const LINUX_MAP_HUGE_512MB: u32 = 1946157056;
pub const LINUX_MAP_HUGE_1GB: u32 = 2013265920;
pub const LINUX_MAP_HUGE_2GB: u32 = 2080374784;
pub const LINUX_MAP_HUGE_16GB: u32 = 2281701376;
pub const LINUX_NETLINK_ROUTE: u32 = 0;
pub const LINUX_NETLINK_UNUSED: u32 = 1;
pub const LINUX_NETLINK_USERSOCK: u32 = 2;
pub const LINUX_NETLINK_FIREWALL: u32 = 3;
pub const LINUX_NETLINK_SOCK_DIAG: u32 = 4;
pub const LINUX_NETLINK_NFLOG: u32 = 5;
pub const LINUX_NETLINK_XFRM: u32 = 6;
pub const LINUX_NETLINK_SELINUX: u32 = 7;
pub const LINUX_NETLINK_ISCSI: u32 = 8;
pub const LINUX_NETLINK_AUDIT: u32 = 9;
pub const LINUX_NETLINK_FIB_LOOKUP: u32 = 10;
pub const LINUX_NETLINK_CONNECTOR: u32 = 11;
pub const LINUX_NETLINK_NETFILTER: u32 = 12;
pub const LINUX_NETLINK_IP6_FW: u32 = 13;
pub const LINUX_NETLINK_DNRTMSG: u32 = 14;
pub const LINUX_NETLINK_KOBJECT_UEVENT: u32 = 15;
pub const LINUX_NETLINK_GENERIC: u32 = 16;
pub const LINUX_NETLINK_SCSITRANSPORT: u32 = 18;
pub const LINUX_NETLINK_ECRYPTFS: u32 = 19;
pub const LINUX_NETLINK_RDMA: u32 = 20;
pub const LINUX_NETLINK_CRYPTO: u32 = 21;
pub const LINUX_NETLINK_SMC: u32 = 22;
pub const LINUX_NETLINK_INET_DIAG: u32 = 4;
pub const LINUX_MAX_LINKS: u32 = 32;
pub const LINUX_NLM_F_REQUEST: u32 = 1;
pub const LINUX_NLM_F_MULTI: u32 = 2;
pub const LINUX_NLM_F_ACK: u32 = 4;
pub const LINUX_NLM_F_ECHO: u32 = 8;
pub const LINUX_NLM_F_DUMP_INTR: u32 = 16;
pub const LINUX_NLM_F_DUMP_FILTERED: u32 = 32;
pub const LINUX_NLM_F_ROOT: u32 = 256;
pub const LINUX_NLM_F_MATCH: u32 = 512;
pub const LINUX_NLM_F_ATOMIC: u32 = 1024;
pub const LINUX_NLM_F_DUMP: u32 = 768;
pub const LINUX_NLM_F_REPLACE: u32 = 256;
pub const LINUX_NLM_F_EXCL: u32 = 512;
pub const LINUX_NLM_F_CREATE: u32 = 1024;
pub const LINUX_NLM_F_APPEND: u32 = 2048;
pub const LINUX_NLM_F_NONREC: u32 = 256;
pub const LINUX_NLM_F_BULK: u32 = 512;
pub const LINUX_NLM_F_CAPPED: u32 = 256;
pub const LINUX_NLM_F_ACK_TLVS: u32 = 512;
pub const LINUX_NLMSG_ALIGNTO: u32 = 4;
pub const LINUX_NLMSG_NOOP: u32 = 1;
pub const LINUX_NLMSG_ERROR: u32 = 2;
pub const LINUX_NLMSG_DONE: u32 = 3;
pub const LINUX_NLMSG_OVERRUN: u32 = 4;
pub const LINUX_NLMSG_MIN_TYPE: u32 = 16;
pub const LINUX_NETLINK_ADD_MEMBERSHIP: u32 = 1;
pub const LINUX_NETLINK_DROP_MEMBERSHIP: u32 = 2;
pub const LINUX_NETLINK_PKTINFO: u32 = 3;
pub const LINUX_NETLINK_BROADCAST_ERROR: u32 = 4;
pub const LINUX_NETLINK_NO_ENOBUFS: u32 = 5;
pub const LINUX_NETLINK_RX_RING: u32 = 6;
pub const LINUX_NETLINK_TX_RING: u32 = 7;
pub const LINUX_NETLINK_LISTEN_ALL_NSID: u32 = 8;
pub const LINUX_NETLINK_LIST_MEMBERSHIPS: u32 = 9;
pub const LINUX_NETLINK_CAP_ACK: u32 = 10;
pub const LINUX_NETLINK_EXT_ACK: u32 = 11;
pub const LINUX_NETLINK_GET_STRICT_CHK: u32 = 12;
pub const LINUX_NL_MMAP_MSG_ALIGNMENT: u32 = 4;
pub const LINUX_NET_MAJOR: u32 = 36;
pub const LINUX_NLA_F_NESTED: u32 = 32768;
pub const LINUX_NLA_F_NET_BYTEORDER: u32 = 16384;
pub const LINUX_NLA_TYPE_MASK: i32 = -49153;
pub const LINUX_NLA_ALIGNTO: u32 = 4;
pub const LINUX_PR_SET_PDEATHSIG: u32 = 1;
pub const LINUX_PR_GET_PDEATHSIG: u32 = 2;
pub const LINUX_PR_GET_DUMPABLE: u32 = 3;
pub const LINUX_PR_SET_DUMPABLE: u32 = 4;
pub const LINUX_PR_GET_UNALIGN: u32 = 5;
pub const LINUX_PR_SET_UNALIGN: u32 = 6;
pub const LINUX_PR_UNALIGN_NOPRINT: u32 = 1;
pub const LINUX_PR_UNALIGN_SIGBUS: u32 = 2;
pub const LINUX_PR_GET_KEEPCAPS: u32 = 7;
pub const LINUX_PR_SET_KEEPCAPS: u32 = 8;
pub const LINUX_PR_GET_FPEMU: u32 = 9;
pub const LINUX_PR_SET_FPEMU: u32 = 10;
pub const LINUX_PR_FPEMU_NOPRINT: u32 = 1;
pub const LINUX_PR_FPEMU_SIGFPE: u32 = 2;
pub const LINUX_PR_GET_FPEXC: u32 = 11;
pub const LINUX_PR_SET_FPEXC: u32 = 12;
pub const LINUX_PR_FP_EXC_SW_ENABLE: u32 = 128;
pub const LINUX_PR_FP_EXC_DIV: u32 = 65536;
pub const LINUX_PR_FP_EXC_OVF: u32 = 131072;
pub const LINUX_PR_FP_EXC_UND: u32 = 262144;
pub const LINUX_PR_FP_EXC_RES: u32 = 524288;
pub const LINUX_PR_FP_EXC_INV: u32 = 1048576;
pub const LINUX_PR_FP_EXC_DISABLED: u32 = 0;
pub const LINUX_PR_FP_EXC_NONRECOV: u32 = 1;
pub const LINUX_PR_FP_EXC_ASYNC: u32 = 2;
pub const LINUX_PR_FP_EXC_PRECISE: u32 = 3;
pub const LINUX_PR_GET_TIMING: u32 = 13;
pub const LINUX_PR_SET_TIMING: u32 = 14;
pub const LINUX_PR_TIMING_STATISTICAL: u32 = 0;
pub const LINUX_PR_TIMING_TIMESTAMP: u32 = 1;
pub const LINUX_PR_SET_NAME: u32 = 15;
pub const LINUX_PR_GET_NAME: u32 = 16;
pub const LINUX_PR_GET_ENDIAN: u32 = 19;
pub const LINUX_PR_SET_ENDIAN: u32 = 20;
pub const LINUX_PR_ENDIAN_BIG: u32 = 0;
pub const LINUX_PR_ENDIAN_LITTLE: u32 = 1;
pub const LINUX_PR_ENDIAN_PPC_LITTLE: u32 = 2;
pub const LINUX_PR_GET_SECCOMP: u32 = 21;
pub const LINUX_PR_SET_SECCOMP: u32 = 22;
pub const LINUX_PR_CAPBSET_READ: u32 = 23;
pub const LINUX_PR_CAPBSET_DROP: u32 = 24;
pub const LINUX_PR_GET_TSC: u32 = 25;
pub const LINUX_PR_SET_TSC: u32 = 26;
pub const LINUX_PR_TSC_ENABLE: u32 = 1;
pub const LINUX_PR_TSC_SIGSEGV: u32 = 2;
pub const LINUX_PR_GET_SECUREBITS: u32 = 27;
pub const LINUX_PR_SET_SECUREBITS: u32 = 28;
pub const LINUX_PR_SET_TIMERSLACK: u32 = 29;
pub const LINUX_PR_GET_TIMERSLACK: u32 = 30;
pub const LINUX_PR_TASK_PERF_EVENTS_DISABLE: u32 = 31;
pub const LINUX_PR_TASK_PERF_EVENTS_ENABLE: u32 = 32;
pub const LINUX_PR_MCE_KILL: u32 = 33;
pub const LINUX_PR_MCE_KILL_CLEAR: u32 = 0;
pub const LINUX_PR_MCE_KILL_SET: u32 = 1;
pub const LINUX_PR_MCE_KILL_LATE: u32 = 0;
pub const LINUX_PR_MCE_KILL_EARLY: u32 = 1;
pub const LINUX_PR_MCE_KILL_DEFAULT: u32 = 2;
pub const LINUX_PR_MCE_KILL_GET: u32 = 34;
pub const LINUX_PR_SET_MM: u32 = 35;
pub const LINUX_PR_SET_MM_START_CODE: u32 = 1;
pub const LINUX_PR_SET_MM_END_CODE: u32 = 2;
pub const LINUX_PR_SET_MM_START_DATA: u32 = 3;
pub const LINUX_PR_SET_MM_END_DATA: u32 = 4;
pub const LINUX_PR_SET_MM_START_STACK: u32 = 5;
pub const LINUX_PR_SET_MM_START_BRK: u32 = 6;
pub const LINUX_PR_SET_MM_BRK: u32 = 7;
pub const LINUX_PR_SET_MM_ARG_START: u32 = 8;
pub const LINUX_PR_SET_MM_ARG_END: u32 = 9;
pub const LINUX_PR_SET_MM_ENV_START: u32 = 10;
pub const LINUX_PR_SET_MM_ENV_END: u32 = 11;
pub const LINUX_PR_SET_MM_AUXV: u32 = 12;
pub const LINUX_PR_SET_MM_EXE_FILE: u32 = 13;
pub const LINUX_PR_SET_MM_MAP: u32 = 14;
pub const LINUX_PR_SET_MM_MAP_SIZE: u32 = 15;
pub const LINUX_PR_SET_PTRACER: u32 = 1499557217;
pub const LINUX_PR_SET_CHILD_SUBREAPER: u32 = 36;
pub const LINUX_PR_GET_CHILD_SUBREAPER: u32 = 37;
pub const LINUX_PR_SET_NO_NEW_PRIVS: u32 = 38;
pub const LINUX_PR_GET_NO_NEW_PRIVS: u32 = 39;
pub const LINUX_PR_GET_TID_ADDRESS: u32 = 40;
pub const LINUX_PR_SET_THP_DISABLE: u32 = 41;
pub const LINUX_PR_GET_THP_DISABLE: u32 = 42;
pub const LINUX_PR_MPX_ENABLE_MANAGEMENT: u32 = 43;
pub const LINUX_PR_MPX_DISABLE_MANAGEMENT: u32 = 44;
pub const LINUX_PR_SET_FP_MODE: u32 = 45;
pub const LINUX_PR_GET_FP_MODE: u32 = 46;
pub const LINUX_PR_FP_MODE_FR: u32 = 1;
pub const LINUX_PR_FP_MODE_FRE: u32 = 2;
pub const LINUX_PR_CAP_AMBIENT: u32 = 47;
pub const LINUX_PR_CAP_AMBIENT_IS_SET: u32 = 1;
pub const LINUX_PR_CAP_AMBIENT_RAISE: u32 = 2;
pub const LINUX_PR_CAP_AMBIENT_LOWER: u32 = 3;
pub const LINUX_PR_CAP_AMBIENT_CLEAR_ALL: u32 = 4;
pub const LINUX_PR_SVE_SET_VL: u32 = 50;
pub const LINUX_PR_SVE_SET_VL_ONEXEC: u32 = 262144;
pub const LINUX_PR_SVE_GET_VL: u32 = 51;
pub const LINUX_PR_SVE_VL_LEN_MASK: u32 = 65535;
pub const LINUX_PR_SVE_VL_INHERIT: u32 = 131072;
pub const LINUX_PR_GET_SPECULATION_CTRL: u32 = 52;
pub const LINUX_PR_SET_SPECULATION_CTRL: u32 = 53;
pub const LINUX_PR_SPEC_STORE_BYPASS: u32 = 0;
pub const LINUX_PR_SPEC_INDIRECT_BRANCH: u32 = 1;
pub const LINUX_PR_SPEC_L1D_FLUSH: u32 = 2;
pub const LINUX_PR_SPEC_NOT_AFFECTED: u32 = 0;
pub const LINUX_PR_SPEC_PRCTL: u32 = 1;
pub const LINUX_PR_SPEC_ENABLE: u32 = 2;
pub const LINUX_PR_SPEC_DISABLE: u32 = 4;
pub const LINUX_PR_SPEC_FORCE_DISABLE: u32 = 8;
pub const LINUX_PR_SPEC_DISABLE_NOEXEC: u32 = 16;
pub const LINUX_PR_PAC_RESET_KEYS: u32 = 54;
pub const LINUX_PR_PAC_APIAKEY: u32 = 1;
pub const LINUX_PR_PAC_APIBKEY: u32 = 2;
pub const LINUX_PR_PAC_APDAKEY: u32 = 4;
pub const LINUX_PR_PAC_APDBKEY: u32 = 8;
pub const LINUX_PR_PAC_APGAKEY: u32 = 16;
pub const LINUX_PR_SET_TAGGED_ADDR_CTRL: u32 = 55;
pub const LINUX_PR_GET_TAGGED_ADDR_CTRL: u32 = 56;
pub const LINUX_PR_TAGGED_ADDR_ENABLE: u32 = 1;
pub const LINUX_PR_MTE_TCF_NONE: u32 = 0;
pub const LINUX_PR_MTE_TCF_SYNC: u32 = 2;
pub const LINUX_PR_MTE_TCF_ASYNC: u32 = 4;
pub const LINUX_PR_MTE_TCF_MASK: u32 = 6;
pub const LINUX_PR_MTE_TAG_SHIFT: u32 = 3;
pub const LINUX_PR_MTE_TAG_MASK: u32 = 524280;
pub const LINUX_PR_MTE_TCF_SHIFT: u32 = 1;
pub const LINUX_PR_SET_IO_FLUSHER: u32 = 57;
pub const LINUX_PR_GET_IO_FLUSHER: u32 = 58;
pub const LINUX_PR_SET_SYSCALL_USER_DISPATCH: u32 = 59;
pub const LINUX_PR_SYS_DISPATCH_OFF: u32 = 0;
pub const LINUX_PR_SYS_DISPATCH_ON: u32 = 1;
pub const LINUX_SYSCALL_DISPATCH_FILTER_ALLOW: u32 = 0;
pub const LINUX_SYSCALL_DISPATCH_FILTER_BLOCK: u32 = 1;
pub const LINUX_PR_PAC_SET_ENABLED_KEYS: u32 = 60;
pub const LINUX_PR_PAC_GET_ENABLED_KEYS: u32 = 61;
pub const LINUX_PR_SCHED_CORE: u32 = 62;
pub const LINUX_PR_SCHED_CORE_GET: u32 = 0;
pub const LINUX_PR_SCHED_CORE_CREATE: u32 = 1;
pub const LINUX_PR_SCHED_CORE_SHARE_TO: u32 = 2;
pub const LINUX_PR_SCHED_CORE_SHARE_FROM: u32 = 3;
pub const LINUX_PR_SCHED_CORE_MAX: u32 = 4;
pub const LINUX_PR_SCHED_CORE_SCOPE_THREAD: u32 = 0;
pub const LINUX_PR_SCHED_CORE_SCOPE_THREAD_GROUP: u32 = 1;
pub const LINUX_PR_SCHED_CORE_SCOPE_PROCESS_GROUP: u32 = 2;
pub const LINUX_PR_SME_SET_VL: u32 = 63;
pub const LINUX_PR_SME_SET_VL_ONEXEC: u32 = 262144;
pub const LINUX_PR_SME_GET_VL: u32 = 64;
pub const LINUX_PR_SME_VL_LEN_MASK: u32 = 65535;
pub const LINUX_PR_SME_VL_INHERIT: u32 = 131072;
pub const LINUX_PR_SET_MDWE: u32 = 65;
pub const LINUX_PR_MDWE_REFUSE_EXEC_GAIN: u32 = 1;
pub const LINUX_PR_MDWE_NO_INHERIT: u32 = 2;
pub const LINUX_PR_GET_MDWE: u32 = 66;
pub const LINUX_PR_SET_VMA: u32 = 1398164801;
pub const LINUX_PR_SET_VMA_ANON_NAME: u32 = 0;
pub const LINUX_PR_GET_AUXV: u32 = 1096112214;
pub const LINUX_PR_SET_MEMORY_MERGE: u32 = 67;
pub const LINUX_PR_GET_MEMORY_MERGE: u32 = 68;
pub const LINUX_PR_RISCV_V_SET_CONTROL: u32 = 69;
pub const LINUX_PR_RISCV_V_GET_CONTROL: u32 = 70;
pub const LINUX_PR_RISCV_V_VSTATE_CTRL_DEFAULT: u32 = 0;
pub const LINUX_PR_RISCV_V_VSTATE_CTRL_OFF: u32 = 1;
pub const LINUX_PR_RISCV_V_VSTATE_CTRL_ON: u32 = 2;
pub const LINUX_PR_RISCV_V_VSTATE_CTRL_INHERIT: u32 = 16;
pub const LINUX_PR_RISCV_V_VSTATE_CTRL_CUR_MASK: u32 = 3;
pub const LINUX_PR_RISCV_V_VSTATE_CTRL_NEXT_MASK: u32 = 12;
pub const LINUX_PR_RISCV_V_VSTATE_CTRL_MASK: u32 = 31;
pub const LINUX_PR_RISCV_SET_ICACHE_FLUSH_CTX: u32 = 71;
pub const LINUX_PR_RISCV_CTX_SW_FENCEI_ON: u32 = 0;
pub const LINUX_PR_RISCV_CTX_SW_FENCEI_OFF: u32 = 1;
pub const LINUX_PR_RISCV_SCOPE_PER_PROCESS: u32 = 0;
pub const LINUX_PR_RISCV_SCOPE_PER_THREAD: u32 = 1;
pub const LINUX_PR_PPC_GET_DEXCR: u32 = 72;
pub const LINUX_PR_PPC_SET_DEXCR: u32 = 73;
pub const LINUX_PR_PPC_DEXCR_SBHE: u32 = 0;
pub const LINUX_PR_PPC_DEXCR_IBRTPD: u32 = 1;
pub const LINUX_PR_PPC_DEXCR_SRAPD: u32 = 2;
pub const LINUX_PR_PPC_DEXCR_NPHIE: u32 = 3;
pub const LINUX_PR_PPC_DEXCR_CTRL_EDITABLE: u32 = 1;
pub const LINUX_PR_PPC_DEXCR_CTRL_SET: u32 = 2;
pub const LINUX_PR_PPC_DEXCR_CTRL_CLEAR: u32 = 4;
pub const LINUX_PR_PPC_DEXCR_CTRL_SET_ONEXEC: u32 = 8;
pub const LINUX_PR_PPC_DEXCR_CTRL_CLEAR_ONEXEC: u32 = 16;
pub const LINUX_PR_PPC_DEXCR_CTRL_MASK: u32 = 31;
pub const LINUX_RUSAGE_SELF: u32 = 0;
pub const LINUX_RUSAGE_CHILDREN: i32 = -1;
pub const LINUX_RUSAGE_BOTH: i32 = -2;
pub const LINUX_RUSAGE_THREAD: u32 = 1;
pub const LINUX_RLIM64_INFINITY: i32 = -1;
pub const LINUX_PRIO_MIN: i32 = -20;
pub const LINUX_PRIO_MAX: u32 = 20;
pub const LINUX_PRIO_PROCESS: u32 = 0;
pub const LINUX_PRIO_PGRP: u32 = 1;
pub const LINUX_PRIO_USER: u32 = 2;
pub const LINUX__STK_LIM: u32 = 8388608;
pub const LINUX_MLOCK_LIMIT: u32 = 8388608;
pub const LINUX_RLIMIT_CPU: u32 = 0;
pub const LINUX_RLIMIT_FSIZE: u32 = 1;
pub const LINUX_RLIMIT_DATA: u32 = 2;
pub const LINUX_RLIMIT_STACK: u32 = 3;
pub const LINUX_RLIMIT_CORE: u32 = 4;
pub const LINUX_RLIMIT_RSS: u32 = 5;
pub const LINUX_RLIMIT_NPROC: u32 = 6;
pub const LINUX_RLIMIT_NOFILE: u32 = 7;
pub const LINUX_RLIMIT_MEMLOCK: u32 = 8;
pub const LINUX_RLIMIT_AS: u32 = 9;
pub const LINUX_RLIMIT_LOCKS: u32 = 10;
pub const LINUX_RLIMIT_SIGPENDING: u32 = 11;
pub const LINUX_RLIMIT_MSGQUEUE: u32 = 12;
pub const LINUX_RLIMIT_NICE: u32 = 13;
pub const LINUX_RLIMIT_RTPRIO: u32 = 14;
pub const LINUX_RLIMIT_RTTIME: u32 = 15;
pub const LINUX_RLIM_NLIMITS: u32 = 16;
pub const LINUX_RLIM_INFINITY: i32 = -1;
pub const LINUX_MACVLAN_FLAG_NOPROMISC: u32 = 1;
pub const LINUX_MACVLAN_FLAG_NODST: u32 = 2;
pub const LINUX_IPVLAN_F_PRIVATE: u32 = 1;
pub const LINUX_IPVLAN_F_VEPA: u32 = 2;
pub const LINUX_TUNNEL_MSG_FLAG_STATS: u32 = 1;
pub const LINUX_TUNNEL_MSG_VALID_USER_FLAGS: u32 = 1;
pub const LINUX_MAX_VLAN_LIST_LEN: u32 = 1;
pub const LINUX_PORT_PROFILE_MAX: u32 = 40;
pub const LINUX_PORT_UUID_MAX: u32 = 16;
pub const LINUX_PORT_SELF_VF: i32 = -1;
pub const LINUX_XDP_FLAGS_UPDATE_IF_NOEXIST: u32 = 1;
pub const LINUX_XDP_FLAGS_SKB_MODE: u32 = 2;
pub const LINUX_XDP_FLAGS_DRV_MODE: u32 = 4;
pub const LINUX_XDP_FLAGS_HW_MODE: u32 = 8;
pub const LINUX_XDP_FLAGS_REPLACE: u32 = 16;
pub const LINUX_XDP_FLAGS_MODES: u32 = 14;
pub const LINUX_XDP_FLAGS_MASK: u32 = 31;
pub const LINUX_RMNET_FLAGS_INGRESS_DEAGGREGATION: u32 = 1;
pub const LINUX_RMNET_FLAGS_INGRESS_MAP_COMMANDS: u32 = 2;
pub const LINUX_RMNET_FLAGS_INGRESS_MAP_CKSUMV4: u32 = 4;
pub const LINUX_RMNET_FLAGS_EGRESS_MAP_CKSUMV4: u32 = 8;
pub const LINUX_RMNET_FLAGS_INGRESS_MAP_CKSUMV5: u32 = 16;
pub const LINUX_RMNET_FLAGS_EGRESS_MAP_CKSUMV5: u32 = 32;
pub const LINUX_IFA_F_SECONDARY: u32 = 1;
pub const LINUX_IFA_F_TEMPORARY: u32 = 1;
pub const LINUX_IFA_F_NODAD: u32 = 2;
pub const LINUX_IFA_F_OPTIMISTIC: u32 = 4;
pub const LINUX_IFA_F_DADFAILED: u32 = 8;
pub const LINUX_IFA_F_HOMEADDRESS: u32 = 16;
pub const LINUX_IFA_F_DEPRECATED: u32 = 32;
pub const LINUX_IFA_F_TENTATIVE: u32 = 64;
pub const LINUX_IFA_F_PERMANENT: u32 = 128;
pub const LINUX_IFA_F_MANAGETEMPADDR: u32 = 256;
pub const LINUX_IFA_F_NOPREFIXROUTE: u32 = 512;
pub const LINUX_IFA_F_MCAUTOJOIN: u32 = 1024;
pub const LINUX_IFA_F_STABLE_PRIVACY: u32 = 2048;
pub const LINUX_IFAPROT_UNSPEC: u32 = 0;
pub const LINUX_IFAPROT_KERNEL_LO: u32 = 1;
pub const LINUX_IFAPROT_KERNEL_RA: u32 = 2;
pub const LINUX_IFAPROT_KERNEL_LL: u32 = 3;
pub const LINUX_NTF_USE: u32 = 1;
pub const LINUX_NTF_SELF: u32 = 2;
pub const LINUX_NTF_MASTER: u32 = 4;
pub const LINUX_NTF_PROXY: u32 = 8;
pub const LINUX_NTF_EXT_LEARNED: u32 = 16;
pub const LINUX_NTF_OFFLOADED: u32 = 32;
pub const LINUX_NTF_STICKY: u32 = 64;
pub const LINUX_NTF_ROUTER: u32 = 128;
pub const LINUX_NTF_EXT_MANAGED: u32 = 1;
pub const LINUX_NTF_EXT_LOCKED: u32 = 2;
pub const LINUX_NUD_INCOMPLETE: u32 = 1;
pub const LINUX_NUD_REACHABLE: u32 = 2;
pub const LINUX_NUD_STALE: u32 = 4;
pub const LINUX_NUD_DELAY: u32 = 8;
pub const LINUX_NUD_PROBE: u32 = 16;
pub const LINUX_NUD_FAILED: u32 = 32;
pub const LINUX_NUD_NOARP: u32 = 64;
pub const LINUX_NUD_PERMANENT: u32 = 128;
pub const LINUX_NUD_NONE: u32 = 0;
pub const LINUX_RTNL_FAMILY_IPMR: u32 = 128;
pub const LINUX_RTNL_FAMILY_IP6MR: u32 = 129;
pub const LINUX_RTNL_FAMILY_MAX: u32 = 129;
pub const LINUX_RTA_ALIGNTO: u32 = 4;
pub const LINUX_RTPROT_UNSPEC: u32 = 0;
pub const LINUX_RTPROT_REDIRECT: u32 = 1;
pub const LINUX_RTPROT_KERNEL: u32 = 2;
pub const LINUX_RTPROT_BOOT: u32 = 3;
pub const LINUX_RTPROT_STATIC: u32 = 4;
pub const LINUX_RTPROT_GATED: u32 = 8;
pub const LINUX_RTPROT_RA: u32 = 9;
pub const LINUX_RTPROT_MRT: u32 = 10;
pub const LINUX_RTPROT_ZEBRA: u32 = 11;
pub const LINUX_RTPROT_BIRD: u32 = 12;
pub const LINUX_RTPROT_DNROUTED: u32 = 13;
pub const LINUX_RTPROT_XORP: u32 = 14;
pub const LINUX_RTPROT_NTK: u32 = 15;
pub const LINUX_RTPROT_DHCP: u32 = 16;
pub const LINUX_RTPROT_MROUTED: u32 = 17;
pub const LINUX_RTPROT_KEEPALIVED: u32 = 18;
pub const LINUX_RTPROT_BABEL: u32 = 42;
pub const LINUX_RTPROT_OPENR: u32 = 99;
pub const LINUX_RTPROT_BGP: u32 = 186;
pub const LINUX_RTPROT_ISIS: u32 = 187;
pub const LINUX_RTPROT_OSPF: u32 = 188;
pub const LINUX_RTPROT_RIP: u32 = 189;
pub const LINUX_RTPROT_EIGRP: u32 = 192;
pub const LINUX_RTM_F_NOTIFY: u32 = 256;
pub const LINUX_RTM_F_CLONED: u32 = 512;
pub const LINUX_RTM_F_EQUALIZE: u32 = 1024;
pub const LINUX_RTM_F_PREFIX: u32 = 2048;
pub const LINUX_RTM_F_LOOKUP_TABLE: u32 = 4096;
pub const LINUX_RTM_F_FIB_MATCH: u32 = 8192;
pub const LINUX_RTM_F_OFFLOAD: u32 = 16384;
pub const LINUX_RTM_F_TRAP: u32 = 32768;
pub const LINUX_RTM_F_OFFLOAD_FAILED: u32 = 536870912;
pub const LINUX_RTNH_F_DEAD: u32 = 1;
pub const LINUX_RTNH_F_PERVASIVE: u32 = 2;
pub const LINUX_RTNH_F_ONLINK: u32 = 4;
pub const LINUX_RTNH_F_OFFLOAD: u32 = 8;
pub const LINUX_RTNH_F_LINKDOWN: u32 = 16;
pub const LINUX_RTNH_F_UNRESOLVED: u32 = 32;
pub const LINUX_RTNH_F_TRAP: u32 = 64;
pub const LINUX_RTNH_COMPARE_MASK: u32 = 89;
pub const LINUX_RTNH_ALIGNTO: u32 = 4;
pub const LINUX_RTNETLINK_HAVE_PEERINFO: u32 = 1;
pub const LINUX_RTAX_FEATURE_ECN: u32 = 1;
pub const LINUX_RTAX_FEATURE_SACK: u32 = 2;
pub const LINUX_RTAX_FEATURE_TIMESTAMP: u32 = 4;
pub const LINUX_RTAX_FEATURE_ALLFRAG: u32 = 8;
pub const LINUX_RTAX_FEATURE_TCP_USEC_TS: u32 = 16;
pub const LINUX_RTAX_FEATURE_MASK: u32 = 31;
pub const LINUX_TCM_IFINDEX_MAGIC_BLOCK: u32 = 4294967295;
pub const LINUX_TCA_DUMP_FLAGS_TERSE: u32 = 1;
pub const LINUX_RTMGRP_LINK: u32 = 1;
pub const LINUX_RTMGRP_NOTIFY: u32 = 2;
pub const LINUX_RTMGRP_NEIGH: u32 = 4;
pub const LINUX_RTMGRP_TC: u32 = 8;
pub const LINUX_RTMGRP_IPV4_IFADDR: u32 = 16;
pub const LINUX_RTMGRP_IPV4_MROUTE: u32 = 32;
pub const LINUX_RTMGRP_IPV4_ROUTE: u32 = 64;
pub const LINUX_RTMGRP_IPV4_RULE: u32 = 128;
pub const LINUX_RTMGRP_IPV6_IFADDR: u32 = 256;
pub const LINUX_RTMGRP_IPV6_MROUTE: u32 = 512;
pub const LINUX_RTMGRP_IPV6_ROUTE: u32 = 1024;
pub const LINUX_RTMGRP_IPV6_IFINFO: u32 = 2048;
pub const LINUX_RTMGRP_DECnet_IFADDR: u32 = 4096;
pub const LINUX_RTMGRP_DECnet_ROUTE: u32 = 16384;
pub const LINUX_RTMGRP_IPV6_PREFIX: u32 = 131072;
pub const LINUX_TCA_FLAG_LARGE_DUMP_ON: u32 = 1;
pub const LINUX_TCA_ACT_FLAG_LARGE_DUMP_ON: u32 = 1;
pub const LINUX_TCA_ACT_FLAG_TERSE_DUMP: u32 = 2;
pub const LINUX_RTEXT_FILTER_VF: u32 = 1;
pub const LINUX_RTEXT_FILTER_BRVLAN: u32 = 2;
pub const LINUX_RTEXT_FILTER_BRVLAN_COMPRESSED: u32 = 4;
pub const LINUX_RTEXT_FILTER_SKIP_STATS: u32 = 8;
pub const LINUX_RTEXT_FILTER_MRP: u32 = 16;
pub const LINUX_RTEXT_FILTER_CFM_CONFIG: u32 = 32;
pub const LINUX_RTEXT_FILTER_CFM_STATUS: u32 = 64;
pub const LINUX_RTEXT_FILTER_MST: u32 = 128;
pub const LINUX_CSIGNAL: u32 = 255;
pub const LINUX_CLONE_VM: u32 = 256;
pub const LINUX_CLONE_FS: u32 = 512;
pub const LINUX_CLONE_FILES: u32 = 1024;
pub const LINUX_CLONE_SIGHAND: u32 = 2048;
pub const LINUX_CLONE_PIDFD: u32 = 4096;
pub const LINUX_CLONE_PTRACE: u32 = 8192;
pub const LINUX_CLONE_VFORK: u32 = 16384;
pub const LINUX_CLONE_PARENT: u32 = 32768;
pub const LINUX_CLONE_THREAD: u32 = 65536;
pub const LINUX_CLONE_NEWNS: u32 = 131072;
pub const LINUX_CLONE_SYSVSEM: u32 = 262144;
pub const LINUX_CLONE_SETTLS: u32 = 524288;
pub const LINUX_CLONE_PARENT_SETTID: u32 = 1048576;
pub const LINUX_CLONE_CHILD_CLEARTID: u32 = 2097152;
pub const LINUX_CLONE_DETACHED: u32 = 4194304;
pub const LINUX_CLONE_UNTRACED: u32 = 8388608;
pub const LINUX_CLONE_CHILD_SETTID: u32 = 16777216;
pub const LINUX_CLONE_NEWCGROUP: u32 = 33554432;
pub const LINUX_CLONE_NEWUTS: u32 = 67108864;
pub const LINUX_CLONE_NEWIPC: u32 = 134217728;
pub const LINUX_CLONE_NEWUSER: u32 = 268435456;
pub const LINUX_CLONE_NEWPID: u32 = 536870912;
pub const LINUX_CLONE_NEWNET: u32 = 1073741824;
pub const LINUX_CLONE_IO: u32 = 2147483648;
pub const LINUX_CLONE_CLEAR_SIGHAND: u64 = 4294967296;
pub const LINUX_CLONE_INTO_CGROUP: u64 = 8589934592;
pub const LINUX_CLONE_NEWTIME: u32 = 128;
pub const LINUX_CLONE_ARGS_SIZE_VER0: u32 = 64;
pub const LINUX_CLONE_ARGS_SIZE_VER1: u32 = 80;
pub const LINUX_CLONE_ARGS_SIZE_VER2: u32 = 88;
pub const LINUX_SCHED_NORMAL: u32 = 0;
pub const LINUX_SCHED_FIFO: u32 = 1;
pub const LINUX_SCHED_RR: u32 = 2;
pub const LINUX_SCHED_BATCH: u32 = 3;
pub const LINUX_SCHED_IDLE: u32 = 5;
pub const LINUX_SCHED_DEADLINE: u32 = 6;
pub const LINUX_SCHED_EXT: u32 = 7;
pub const LINUX_SCHED_RESET_ON_FORK: u32 = 1073741824;
pub const LINUX_SCHED_FLAG_RESET_ON_FORK: u32 = 1;
pub const LINUX_SCHED_FLAG_RECLAIM: u32 = 2;
pub const LINUX_SCHED_FLAG_DL_OVERRUN: u32 = 4;
pub const LINUX_SCHED_FLAG_KEEP_POLICY: u32 = 8;
pub const LINUX_SCHED_FLAG_KEEP_PARAMS: u32 = 16;
pub const LINUX_SCHED_FLAG_UTIL_CLAMP_MIN: u32 = 32;
pub const LINUX_SCHED_FLAG_UTIL_CLAMP_MAX: u32 = 64;
pub const LINUX_SCHED_FLAG_KEEP_ALL: u32 = 24;
pub const LINUX_SCHED_FLAG_UTIL_CLAMP: u32 = 96;
pub const LINUX_SCHED_FLAG_ALL: u32 = 127;
pub const LINUX_NSIG: u32 = 32;
pub const LINUX_SIGHUP: u32 = 1;
pub const LINUX_SIGINT: u32 = 2;
pub const LINUX_SIGQUIT: u32 = 3;
pub const LINUX_SIGILL: u32 = 4;
pub const LINUX_SIGTRAP: u32 = 5;
pub const LINUX_SIGABRT: u32 = 6;
pub const LINUX_SIGIOT: u32 = 6;
pub const LINUX_SIGBUS: u32 = 7;
pub const LINUX_SIGFPE: u32 = 8;
pub const LINUX_SIGKILL: u32 = 9;
pub const LINUX_SIGUSR1: u32 = 10;
pub const LINUX_SIGSEGV: u32 = 11;
pub const LINUX_SIGUSR2: u32 = 12;
pub const LINUX_SIGPIPE: u32 = 13;
pub const LINUX_SIGALRM: u32 = 14;
pub const LINUX_SIGTERM: u32 = 15;
pub const LINUX_SIGSTKFLT: u32 = 16;
pub const LINUX_SIGCHLD: u32 = 17;
pub const LINUX_SIGCONT: u32 = 18;
pub const LINUX_SIGSTOP: u32 = 19;
pub const LINUX_SIGTSTP: u32 = 20;
pub const LINUX_SIGTTIN: u32 = 21;
pub const LINUX_SIGTTOU: u32 = 22;
pub const LINUX_SIGURG: u32 = 23;
pub const LINUX_SIGXCPU: u32 = 24;
pub const LINUX_SIGXFSZ: u32 = 25;
pub const LINUX_SIGVTALRM: u32 = 26;
pub const LINUX_SIGPROF: u32 = 27;
pub const LINUX_SIGWINCH: u32 = 28;
pub const LINUX_SIGIO: u32 = 29;
pub const LINUX_SIGPOLL: u32 = 29;
pub const LINUX_SIGPWR: u32 = 30;
pub const LINUX_SIGSYS: u32 = 31;
pub const LINUX_SIGUNUSED: u32 = 31;
pub const LINUX_SIGRTMIN: u32 = 32;
pub const LINUX_SA_RESTORER: u32 = 67108864;
pub const LINUX_MINSIGSTKSZ: u32 = 2048;
pub const LINUX_SIGSTKSZ: u32 = 8192;
pub const LINUX_SA_NOCLDSTOP: u32 = 1;
pub const LINUX_SA_NOCLDWAIT: u32 = 2;
pub const LINUX_SA_SIGINFO: u32 = 4;
pub const LINUX_SA_UNSUPPORTED: u32 = 1024;
pub const LINUX_SA_EXPOSE_TAGBITS: u32 = 2048;
pub const LINUX_SA_ONSTACK: u32 = 134217728;
pub const LINUX_SA_RESTART: u32 = 268435456;
pub const LINUX_SA_NODEFER: u32 = 1073741824;
pub const LINUX_SA_RESETHAND: u32 = 2147483648;
pub const LINUX_SA_NOMASK: u32 = 1073741824;
pub const LINUX_SA_ONESHOT: u32 = 2147483648;
pub const LINUX_SIG_BLOCK: u32 = 0;
pub const LINUX_SIG_UNBLOCK: u32 = 1;
pub const LINUX_SIG_SETMASK: u32 = 2;
pub const LINUX_SI_MAX_SIZE: u32 = 128;
pub const LINUX_SI_USER: u32 = 0;
pub const LINUX_SI_KERNEL: u32 = 128;
pub const LINUX_SI_QUEUE: i32 = -1;
pub const LINUX_SI_TIMER: i32 = -2;
pub const LINUX_SI_MESGQ: i32 = -3;
pub const LINUX_SI_ASYNCIO: i32 = -4;
pub const LINUX_SI_SIGIO: i32 = -5;
pub const LINUX_SI_TKILL: i32 = -6;
pub const LINUX_SI_DETHREAD: i32 = -7;
pub const LINUX_SI_ASYNCNL: i32 = -60;
pub const LINUX_ILL_ILLOPC: u32 = 1;
pub const LINUX_ILL_ILLOPN: u32 = 2;
pub const LINUX_ILL_ILLADR: u32 = 3;
pub const LINUX_ILL_ILLTRP: u32 = 4;
pub const LINUX_ILL_PRVOPC: u32 = 5;
pub const LINUX_ILL_PRVREG: u32 = 6;
pub const LINUX_ILL_COPROC: u32 = 7;
pub const LINUX_ILL_BADSTK: u32 = 8;
pub const LINUX_ILL_BADIADDR: u32 = 9;
pub const LINUX___ILL_BREAK: u32 = 10;
pub const LINUX___ILL_BNDMOD: u32 = 11;
pub const LINUX_NSIGILL: u32 = 11;
pub const LINUX_FPE_INTDIV: u32 = 1;
pub const LINUX_FPE_INTOVF: u32 = 2;
pub const LINUX_FPE_FLTDIV: u32 = 3;
pub const LINUX_FPE_FLTOVF: u32 = 4;
pub const LINUX_FPE_FLTUND: u32 = 5;
pub const LINUX_FPE_FLTRES: u32 = 6;
pub const LINUX_FPE_FLTINV: u32 = 7;
pub const LINUX_FPE_FLTSUB: u32 = 8;
pub const LINUX___FPE_DECOVF: u32 = 9;
pub const LINUX___FPE_DECDIV: u32 = 10;
pub const LINUX___FPE_DECERR: u32 = 11;
pub const LINUX___FPE_INVASC: u32 = 12;
pub const LINUX___FPE_INVDEC: u32 = 13;
pub const LINUX_FPE_FLTUNK: u32 = 14;
pub const LINUX_FPE_CONDTRAP: u32 = 15;
pub const LINUX_NSIGFPE: u32 = 15;
pub const LINUX_SEGV_MAPERR: u32 = 1;
pub const LINUX_SEGV_ACCERR: u32 = 2;
pub const LINUX_SEGV_BNDERR: u32 = 3;
pub const LINUX_SEGV_PKUERR: u32 = 4;
pub const LINUX_SEGV_ACCADI: u32 = 5;
pub const LINUX_SEGV_ADIDERR: u32 = 6;
pub const LINUX_SEGV_ADIPERR: u32 = 7;
pub const LINUX_SEGV_MTEAERR: u32 = 8;
pub const LINUX_SEGV_MTESERR: u32 = 9;
pub const LINUX_SEGV_CPERR: u32 = 10;
pub const LINUX_NSIGSEGV: u32 = 10;
pub const LINUX_BUS_ADRALN: u32 = 1;
pub const LINUX_BUS_ADRERR: u32 = 2;
pub const LINUX_BUS_OBJERR: u32 = 3;
pub const LINUX_BUS_MCEERR_AR: u32 = 4;
pub const LINUX_BUS_MCEERR_AO: u32 = 5;
pub const LINUX_NSIGBUS: u32 = 5;
pub const LINUX_TRAP_BRKPT: u32 = 1;
pub const LINUX_TRAP_TRACE: u32 = 2;
pub const LINUX_TRAP_BRANCH: u32 = 3;
pub const LINUX_TRAP_HWBKPT: u32 = 4;
pub const LINUX_TRAP_UNK: u32 = 5;
pub const LINUX_TRAP_PERF: u32 = 6;
pub const LINUX_NSIGTRAP: u32 = 6;
pub const LINUX_TRAP_PERF_FLAG_ASYNC: u32 = 1;
pub const LINUX_CLD_EXITED: u32 = 1;
pub const LINUX_CLD_KILLED: u32 = 2;
pub const LINUX_CLD_DUMPED: u32 = 3;
pub const LINUX_CLD_TRAPPED: u32 = 4;
pub const LINUX_CLD_STOPPED: u32 = 5;
pub const LINUX_CLD_CONTINUED: u32 = 6;
pub const LINUX_NSIGCHLD: u32 = 6;
pub const LINUX_POLL_IN: u32 = 1;
pub const LINUX_POLL_OUT: u32 = 2;
pub const LINUX_POLL_MSG: u32 = 3;
pub const LINUX_POLL_ERR: u32 = 4;
pub const LINUX_POLL_PRI: u32 = 5;
pub const LINUX_POLL_HUP: u32 = 6;
pub const LINUX_NSIGPOLL: u32 = 6;
pub const LINUX_SYS_SECCOMP: u32 = 1;
pub const LINUX_SYS_USER_DISPATCH: u32 = 2;
pub const LINUX_NSIGSYS: u32 = 2;
pub const LINUX_EMT_TAGOVF: u32 = 1;
pub const LINUX_NSIGEMT: u32 = 1;
pub const LINUX_SIGEV_SIGNAL: u32 = 0;
pub const LINUX_SIGEV_NONE: u32 = 1;
pub const LINUX_SIGEV_THREAD: u32 = 2;
pub const LINUX_SIGEV_THREAD_ID: u32 = 4;
pub const LINUX_SIGEV_MAX_SIZE: u32 = 64;
pub const LINUX_SS_ONSTACK: u32 = 1;
pub const LINUX_SS_DISABLE: u32 = 2;
pub const LINUX_SS_FLAG_BITS: u32 = 2147483648;
pub const LINUX_FIOSETOWN: u32 = 35073;
pub const LINUX_SIOCSPGRP: u32 = 35074;
pub const LINUX_FIOGETOWN: u32 = 35075;
pub const LINUX_SIOCGPGRP: u32 = 35076;
pub const LINUX_SIOCATMARK: u32 = 35077;
pub const LINUX_SIOCGSTAMP_OLD: u32 = 35078;
pub const LINUX_SIOCGSTAMPNS_OLD: u32 = 35079;
pub const LINUX_SOCK_IOC_TYPE: u32 = 137;
pub const LINUX_SIOCGSTAMP: u32 = 35078;
pub const LINUX_SIOCGSTAMPNS: u32 = 35079;
pub const LINUX_SIOCADDRT: u32 = 35083;
pub const LINUX_SIOCDELRT: u32 = 35084;
pub const LINUX_SIOCRTMSG: u32 = 35085;
pub const LINUX_SIOCGIFNAME: u32 = 35088;
pub const LINUX_SIOCSIFLINK: u32 = 35089;
pub const LINUX_SIOCGIFCONF: u32 = 35090;
pub const LINUX_SIOCGIFFLAGS: u32 = 35091;
pub const LINUX_SIOCSIFFLAGS: u32 = 35092;
pub const LINUX_SIOCGIFADDR: u32 = 35093;
pub const LINUX_SIOCSIFADDR: u32 = 35094;
pub const LINUX_SIOCGIFDSTADDR: u32 = 35095;
pub const LINUX_SIOCSIFDSTADDR: u32 = 35096;
pub const LINUX_SIOCGIFBRDADDR: u32 = 35097;
pub const LINUX_SIOCSIFBRDADDR: u32 = 35098;
pub const LINUX_SIOCGIFNETMASK: u32 = 35099;
pub const LINUX_SIOCSIFNETMASK: u32 = 35100;
pub const LINUX_SIOCGIFMETRIC: u32 = 35101;
pub const LINUX_SIOCSIFMETRIC: u32 = 35102;
pub const LINUX_SIOCGIFMEM: u32 = 35103;
pub const LINUX_SIOCSIFMEM: u32 = 35104;
pub const LINUX_SIOCGIFMTU: u32 = 35105;
pub const LINUX_SIOCSIFMTU: u32 = 35106;
pub const LINUX_SIOCSIFNAME: u32 = 35107;
pub const LINUX_SIOCSIFHWADDR: u32 = 35108;
pub const LINUX_SIOCGIFENCAP: u32 = 35109;
pub const LINUX_SIOCSIFENCAP: u32 = 35110;
pub const LINUX_SIOCGIFHWADDR: u32 = 35111;
pub const LINUX_SIOCGIFSLAVE: u32 = 35113;
pub const LINUX_SIOCSIFSLAVE: u32 = 35120;
pub const LINUX_SIOCADDMULTI: u32 = 35121;
pub const LINUX_SIOCDELMULTI: u32 = 35122;
pub const LINUX_SIOCGIFINDEX: u32 = 35123;
pub const LINUX_SIOGIFINDEX: u32 = 35123;
pub const LINUX_SIOCSIFPFLAGS: u32 = 35124;
pub const LINUX_SIOCGIFPFLAGS: u32 = 35125;
pub const LINUX_SIOCDIFADDR: u32 = 35126;
pub const LINUX_SIOCSIFHWBROADCAST: u32 = 35127;
pub const LINUX_SIOCGIFCOUNT: u32 = 35128;
pub const LINUX_SIOCGIFBR: u32 = 35136;
pub const LINUX_SIOCSIFBR: u32 = 35137;
pub const LINUX_SIOCGIFTXQLEN: u32 = 35138;
pub const LINUX_SIOCSIFTXQLEN: u32 = 35139;
pub const LINUX_SIOCETHTOOL: u32 = 35142;
pub const LINUX_SIOCGMIIPHY: u32 = 35143;
pub const LINUX_SIOCGMIIREG: u32 = 35144;
pub const LINUX_SIOCSMIIREG: u32 = 35145;
pub const LINUX_SIOCWANDEV: u32 = 35146;
pub const LINUX_SIOCOUTQNSD: u32 = 35147;
pub const LINUX_SIOCGSKNS: u32 = 35148;
pub const LINUX_SIOCDARP: u32 = 35155;
pub const LINUX_SIOCGARP: u32 = 35156;
pub const LINUX_SIOCSARP: u32 = 35157;
pub const LINUX_SIOCDRARP: u32 = 35168;
pub const LINUX_SIOCGRARP: u32 = 35169;
pub const LINUX_SIOCSRARP: u32 = 35170;
pub const LINUX_SIOCGIFMAP: u32 = 35184;
pub const LINUX_SIOCSIFMAP: u32 = 35185;
pub const LINUX_SIOCADDDLCI: u32 = 35200;
pub const LINUX_SIOCDELDLCI: u32 = 35201;
pub const LINUX_SIOCGIFVLAN: u32 = 35202;
pub const LINUX_SIOCSIFVLAN: u32 = 35203;
pub const LINUX_SIOCBONDENSLAVE: u32 = 35216;
pub const LINUX_SIOCBONDRELEASE: u32 = 35217;
pub const LINUX_SIOCBONDSETHWADDR: u32 = 35218;
pub const LINUX_SIOCBONDSLAVEINFOQUERY: u32 = 35219;
pub const LINUX_SIOCBONDINFOQUERY: u32 = 35220;
pub const LINUX_SIOCBONDCHANGEACTIVE: u32 = 35221;
pub const LINUX_SIOCBRADDBR: u32 = 35232;
pub const LINUX_SIOCBRDELBR: u32 = 35233;
pub const LINUX_SIOCBRADDIF: u32 = 35234;
pub const LINUX_SIOCBRDELIF: u32 = 35235;
pub const LINUX_SIOCSHWTSTAMP: u32 = 35248;
pub const LINUX_SIOCGHWTSTAMP: u32 = 35249;
pub const LINUX_SIOCDEVPRIVATE: u32 = 35312;
pub const LINUX_SIOCPROTOPRIVATE: u32 = 35296;
pub const LINUX_S_IFMT: u32 = 61440;
pub const LINUX_S_IFSOCK: u32 = 49152;
pub const LINUX_S_IFLNK: u32 = 40960;
pub const LINUX_S_IFREG: u32 = 32768;
pub const LINUX_S_IFBLK: u32 = 24576;
pub const LINUX_S_IFDIR: u32 = 16384;
pub const LINUX_S_IFCHR: u32 = 8192;
pub const LINUX_S_IFIFO: u32 = 4096;
pub const LINUX_S_ISUID: u32 = 2048;
pub const LINUX_S_ISGID: u32 = 1024;
pub const LINUX_S_ISVTX: u32 = 512;
pub const LINUX_S_IRWXU: u32 = 448;
pub const LINUX_S_IRUSR: u32 = 256;
pub const LINUX_S_IWUSR: u32 = 128;
pub const LINUX_S_IXUSR: u32 = 64;
pub const LINUX_S_IRWXG: u32 = 56;
pub const LINUX_S_IRGRP: u32 = 32;
pub const LINUX_S_IWGRP: u32 = 16;
pub const LINUX_S_IXGRP: u32 = 8;
pub const LINUX_S_IRWXO: u32 = 7;
pub const LINUX_S_IROTH: u32 = 4;
pub const LINUX_S_IWOTH: u32 = 2;
pub const LINUX_S_IXOTH: u32 = 1;
pub const LINUX_STATX_TYPE: u32 = 1;
pub const LINUX_STATX_MODE: u32 = 2;
pub const LINUX_STATX_NLINK: u32 = 4;
pub const LINUX_STATX_UID: u32 = 8;
pub const LINUX_STATX_GID: u32 = 16;
pub const LINUX_STATX_ATIME: u32 = 32;
pub const LINUX_STATX_MTIME: u32 = 64;
pub const LINUX_STATX_CTIME: u32 = 128;
pub const LINUX_STATX_INO: u32 = 256;
pub const LINUX_STATX_SIZE: u32 = 512;
pub const LINUX_STATX_BLOCKS: u32 = 1024;
pub const LINUX_STATX_BASIC_STATS: u32 = 2047;
pub const LINUX_STATX_BTIME: u32 = 2048;
pub const LINUX_STATX_MNT_ID: u32 = 4096;
pub const LINUX_STATX_DIOALIGN: u32 = 8192;
pub const LINUX_STATX_MNT_ID_UNIQUE: u32 = 16384;
pub const LINUX_STATX_SUBVOL: u32 = 32768;
pub const LINUX_STATX_WRITE_ATOMIC: u32 = 65536;
pub const LINUX_STATX__RESERVED: u32 = 2147483648;
pub const LINUX_STATX_ALL: u32 = 4095;
pub const LINUX_STATX_ATTR_COMPRESSED: u32 = 4;
pub const LINUX_STATX_ATTR_IMMUTABLE: u32 = 16;
pub const LINUX_STATX_ATTR_APPEND: u32 = 32;
pub const LINUX_STATX_ATTR_NODUMP: u32 = 64;
pub const LINUX_STATX_ATTR_ENCRYPTED: u32 = 2048;
pub const LINUX_STATX_ATTR_AUTOMOUNT: u32 = 4096;
pub const LINUX_STATX_ATTR_MOUNT_ROOT: u32 = 8192;
pub const LINUX_STATX_ATTR_VERITY: u32 = 1048576;
pub const LINUX_STATX_ATTR_DAX: u32 = 2097152;
pub const LINUX_STATX_ATTR_WRITE_ATOMIC: u32 = 4194304;
pub const LINUX_ITIMER_REAL: u32 = 0;
pub const LINUX_ITIMER_VIRTUAL: u32 = 1;
pub const LINUX_ITIMER_PROF: u32 = 2;
pub const LINUX_CLOCK_REALTIME: u32 = 0;
pub const LINUX_CLOCK_MONOTONIC: u32 = 1;
pub const LINUX_CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
pub const LINUX_CLOCK_THREAD_CPUTIME_ID: u32 = 3;
pub const LINUX_CLOCK_MONOTONIC_RAW: u32 = 4;
pub const LINUX_CLOCK_REALTIME_COARSE: u32 = 5;
pub const LINUX_CLOCK_MONOTONIC_COARSE: u32 = 6;
pub const LINUX_CLOCK_BOOTTIME: u32 = 7;
pub const LINUX_CLOCK_REALTIME_ALARM: u32 = 8;
pub const LINUX_CLOCK_BOOTTIME_ALARM: u32 = 9;
pub const LINUX_CLOCK_SGI_CYCLE: u32 = 10;
pub const LINUX_CLOCK_TAI: u32 = 11;
pub const LINUX_MAX_CLOCKS: u32 = 16;
pub const LINUX_CLOCKS_MASK: u32 = 1;
pub const LINUX_CLOCKS_MONO: u32 = 1;
pub const LINUX_TIMER_ABSTIME: u32 = 1;
pub const LINUX___X32_SYSCALL_BIT: u32 = 1073741824;
pub const LINUX___NR_read: u32 = 0;
pub const LINUX___NR_write: u32 = 1;
pub const LINUX___NR_open: u32 = 2;
pub const LINUX___NR_close: u32 = 3;
pub const LINUX___NR_stat: u32 = 4;
pub const LINUX___NR_fstat: u32 = 5;
pub const LINUX___NR_lstat: u32 = 6;
pub const LINUX___NR_poll: u32 = 7;
pub const LINUX___NR_lseek: u32 = 8;
pub const LINUX___NR_mmap: u32 = 9;
pub const LINUX___NR_mprotect: u32 = 10;
pub const LINUX___NR_munmap: u32 = 11;
pub const LINUX___NR_brk: u32 = 12;
pub const LINUX___NR_rt_sigaction: u32 = 13;
pub const LINUX___NR_rt_sigprocmask: u32 = 14;
pub const LINUX___NR_rt_sigreturn: u32 = 15;
pub const LINUX___NR_ioctl: u32 = 16;
pub const LINUX___NR_pread64: u32 = 17;
pub const LINUX___NR_pwrite64: u32 = 18;
pub const LINUX___NR_readv: u32 = 19;
pub const LINUX___NR_writev: u32 = 20;
pub const LINUX___NR_access: u32 = 21;
pub const LINUX___NR_pipe: u32 = 22;
pub const LINUX___NR_select: u32 = 23;
pub const LINUX___NR_sched_yield: u32 = 24;
pub const LINUX___NR_mremap: u32 = 25;
pub const LINUX___NR_msync: u32 = 26;
pub const LINUX___NR_mincore: u32 = 27;
pub const LINUX___NR_madvise: u32 = 28;
pub const LINUX___NR_shmget: u32 = 29;
pub const LINUX___NR_shmat: u32 = 30;
pub const LINUX___NR_shmctl: u32 = 31;
pub const LINUX___NR_dup: u32 = 32;
pub const LINUX___NR_dup2: u32 = 33;
pub const LINUX___NR_pause: u32 = 34;
pub const LINUX___NR_nanosleep: u32 = 35;
pub const LINUX___NR_getitimer: u32 = 36;
pub const LINUX___NR_alarm: u32 = 37;
pub const LINUX___NR_setitimer: u32 = 38;
pub const LINUX___NR_getpid: u32 = 39;
pub const LINUX___NR_sendfile: u32 = 40;
pub const LINUX___NR_socket: u32 = 41;
pub const LINUX___NR_connect: u32 = 42;
pub const LINUX___NR_accept: u32 = 43;
pub const LINUX___NR_sendto: u32 = 44;
pub const LINUX___NR_recvfrom: u32 = 45;
pub const LINUX___NR_sendmsg: u32 = 46;
pub const LINUX___NR_recvmsg: u32 = 47;
pub const LINUX___NR_shutdown: u32 = 48;
pub const LINUX___NR_bind: u32 = 49;
pub const LINUX___NR_listen: u32 = 50;
pub const LINUX___NR_getsockname: u32 = 51;
pub const LINUX___NR_getpeername: u32 = 52;
pub const LINUX___NR_socketpair: u32 = 53;
pub const LINUX___NR_setsockopt: u32 = 54;
pub const LINUX___NR_getsockopt: u32 = 55;
pub const LINUX___NR_clone: u32 = 56;
pub const LINUX___NR_fork: u32 = 57;
pub const LINUX___NR_vfork: u32 = 58;
pub const LINUX___NR_execve: u32 = 59;
pub const LINUX___NR_exit: u32 = 60;
pub const LINUX___NR_wait4: u32 = 61;
pub const LINUX___NR_kill: u32 = 62;
pub const LINUX___NR_uname: u32 = 63;
pub const LINUX___NR_semget: u32 = 64;
pub const LINUX___NR_semop: u32 = 65;
pub const LINUX___NR_semctl: u32 = 66;
pub const LINUX___NR_shmdt: u32 = 67;
pub const LINUX___NR_msgget: u32 = 68;
pub const LINUX___NR_msgsnd: u32 = 69;
pub const LINUX___NR_msgrcv: u32 = 70;
pub const LINUX___NR_msgctl: u32 = 71;
pub const LINUX___NR_fcntl: u32 = 72;
pub const LINUX___NR_flock: u32 = 73;
pub const LINUX___NR_fsync: u32 = 74;
pub const LINUX___NR_fdatasync: u32 = 75;
pub const LINUX___NR_truncate: u32 = 76;
pub const LINUX___NR_ftruncate: u32 = 77;
pub const LINUX___NR_getdents: u32 = 78;
pub const LINUX___NR_getcwd: u32 = 79;
pub const LINUX___NR_chdir: u32 = 80;
pub const LINUX___NR_fchdir: u32 = 81;
pub const LINUX___NR_rename: u32 = 82;
pub const LINUX___NR_mkdir: u32 = 83;
pub const LINUX___NR_rmdir: u32 = 84;
pub const LINUX___NR_creat: u32 = 85;
pub const LINUX___NR_link: u32 = 86;
pub const LINUX___NR_unlink: u32 = 87;
pub const LINUX___NR_symlink: u32 = 88;
pub const LINUX___NR_readlink: u32 = 89;
pub const LINUX___NR_chmod: u32 = 90;
pub const LINUX___NR_fchmod: u32 = 91;
pub const LINUX___NR_chown: u32 = 92;
pub const LINUX___NR_fchown: u32 = 93;
pub const LINUX___NR_lchown: u32 = 94;
pub const LINUX___NR_umask: u32 = 95;
pub const LINUX___NR_gettimeofday: u32 = 96;
pub const LINUX___NR_getrlimit: u32 = 97;
pub const LINUX___NR_getrusage: u32 = 98;
pub const LINUX___NR_sysinfo: u32 = 99;
pub const LINUX___NR_times: u32 = 100;
pub const LINUX___NR_ptrace: u32 = 101;
pub const LINUX___NR_getuid: u32 = 102;
pub const LINUX___NR_syslog: u32 = 103;
pub const LINUX___NR_getgid: u32 = 104;
pub const LINUX___NR_setuid: u32 = 105;
pub const LINUX___NR_setgid: u32 = 106;
pub const LINUX___NR_geteuid: u32 = 107;
pub const LINUX___NR_getegid: u32 = 108;
pub const LINUX___NR_setpgid: u32 = 109;
pub const LINUX___NR_getppid: u32 = 110;
pub const LINUX___NR_getpgrp: u32 = 111;
pub const LINUX___NR_setsid: u32 = 112;
pub const LINUX___NR_setreuid: u32 = 113;
pub const LINUX___NR_setregid: u32 = 114;
pub const LINUX___NR_getgroups: u32 = 115;
pub const LINUX___NR_setgroups: u32 = 116;
pub const LINUX___NR_setresuid: u32 = 117;
pub const LINUX___NR_getresuid: u32 = 118;
pub const LINUX___NR_setresgid: u32 = 119;
pub const LINUX___NR_getresgid: u32 = 120;
pub const LINUX___NR_getpgid: u32 = 121;
pub const LINUX___NR_setfsuid: u32 = 122;
pub const LINUX___NR_setfsgid: u32 = 123;
pub const LINUX___NR_getsid: u32 = 124;
pub const LINUX___NR_capget: u32 = 125;
pub const LINUX___NR_capset: u32 = 126;
pub const LINUX___NR_rt_sigpending: u32 = 127;
pub const LINUX___NR_rt_sigtimedwait: u32 = 128;
pub const LINUX___NR_rt_sigqueueinfo: u32 = 129;
pub const LINUX___NR_rt_sigsuspend: u32 = 130;
pub const LINUX___NR_sigaltstack: u32 = 131;
pub const LINUX___NR_utime: u32 = 132;
pub const LINUX___NR_mknod: u32 = 133;
pub const LINUX___NR_uselib: u32 = 134;
pub const LINUX___NR_personality: u32 = 135;
pub const LINUX___NR_ustat: u32 = 136;
pub const LINUX___NR_statfs: u32 = 137;
pub const LINUX___NR_fstatfs: u32 = 138;
pub const LINUX___NR_sysfs: u32 = 139;
pub const LINUX___NR_getpriority: u32 = 140;
pub const LINUX___NR_setpriority: u32 = 141;
pub const LINUX___NR_sched_setparam: u32 = 142;
pub const LINUX___NR_sched_getparam: u32 = 143;
pub const LINUX___NR_sched_setscheduler: u32 = 144;
pub const LINUX___NR_sched_getscheduler: u32 = 145;
pub const LINUX___NR_sched_get_priority_max: u32 = 146;
pub const LINUX___NR_sched_get_priority_min: u32 = 147;
pub const LINUX___NR_sched_rr_get_interval: u32 = 148;
pub const LINUX___NR_mlock: u32 = 149;
pub const LINUX___NR_munlock: u32 = 150;
pub const LINUX___NR_mlockall: u32 = 151;
pub const LINUX___NR_munlockall: u32 = 152;
pub const LINUX___NR_vhangup: u32 = 153;
pub const LINUX___NR_modify_ldt: u32 = 154;
pub const LINUX___NR_pivot_root: u32 = 155;
pub const LINUX___NR__sysctl: u32 = 156;
pub const LINUX___NR_prctl: u32 = 157;
pub const LINUX___NR_arch_prctl: u32 = 158;
pub const LINUX___NR_adjtimex: u32 = 159;
pub const LINUX___NR_setrlimit: u32 = 160;
pub const LINUX___NR_chroot: u32 = 161;
pub const LINUX___NR_sync: u32 = 162;
pub const LINUX___NR_acct: u32 = 163;
pub const LINUX___NR_settimeofday: u32 = 164;
pub const LINUX___NR_mount: u32 = 165;
pub const LINUX___NR_umount2: u32 = 166;
pub const LINUX___NR_swapon: u32 = 167;
pub const LINUX___NR_swapoff: u32 = 168;
pub const LINUX___NR_reboot: u32 = 169;
pub const LINUX___NR_sethostname: u32 = 170;
pub const LINUX___NR_setdomainname: u32 = 171;
pub const LINUX___NR_iopl: u32 = 172;
pub const LINUX___NR_ioperm: u32 = 173;
pub const LINUX___NR_create_module: u32 = 174;
pub const LINUX___NR_init_module: u32 = 175;
pub const LINUX___NR_delete_module: u32 = 176;
pub const LINUX___NR_get_kernel_syms: u32 = 177;
pub const LINUX___NR_query_module: u32 = 178;
pub const LINUX___NR_quotactl: u32 = 179;
pub const LINUX___NR_nfsservctl: u32 = 180;
pub const LINUX___NR_getpmsg: u32 = 181;
pub const LINUX___NR_putpmsg: u32 = 182;
pub const LINUX___NR_afs_syscall: u32 = 183;
pub const LINUX___NR_tuxcall: u32 = 184;
pub const LINUX___NR_security: u32 = 185;
pub const LINUX___NR_gettid: u32 = 186;
pub const LINUX___NR_readahead: u32 = 187;
pub const LINUX___NR_setxattr: u32 = 188;
pub const LINUX___NR_lsetxattr: u32 = 189;
pub const LINUX___NR_fsetxattr: u32 = 190;
pub const LINUX___NR_getxattr: u32 = 191;
pub const LINUX___NR_lgetxattr: u32 = 192;
pub const LINUX___NR_fgetxattr: u32 = 193;
pub const LINUX___NR_listxattr: u32 = 194;
pub const LINUX___NR_llistxattr: u32 = 195;
pub const LINUX___NR_flistxattr: u32 = 196;
pub const LINUX___NR_removexattr: u32 = 197;
pub const LINUX___NR_lremovexattr: u32 = 198;
pub const LINUX___NR_fremovexattr: u32 = 199;
pub const LINUX___NR_tkill: u32 = 200;
pub const LINUX___NR_time: u32 = 201;
pub const LINUX___NR_futex: u32 = 202;
pub const LINUX___NR_sched_setaffinity: u32 = 203;
pub const LINUX___NR_sched_getaffinity: u32 = 204;
pub const LINUX___NR_set_thread_area: u32 = 205;
pub const LINUX___NR_io_setup: u32 = 206;
pub const LINUX___NR_io_destroy: u32 = 207;
pub const LINUX___NR_io_getevents: u32 = 208;
pub const LINUX___NR_io_submit: u32 = 209;
pub const LINUX___NR_io_cancel: u32 = 210;
pub const LINUX___NR_get_thread_area: u32 = 211;
pub const LINUX___NR_lookup_dcookie: u32 = 212;
pub const LINUX___NR_epoll_create: u32 = 213;
pub const LINUX___NR_epoll_ctl_old: u32 = 214;
pub const LINUX___NR_epoll_wait_old: u32 = 215;
pub const LINUX___NR_remap_file_pages: u32 = 216;
pub const LINUX___NR_getdents64: u32 = 217;
pub const LINUX___NR_set_tid_address: u32 = 218;
pub const LINUX___NR_restart_syscall: u32 = 219;
pub const LINUX___NR_semtimedop: u32 = 220;
pub const LINUX___NR_fadvise64: u32 = 221;
pub const LINUX___NR_timer_create: u32 = 222;
pub const LINUX___NR_timer_settime: u32 = 223;
pub const LINUX___NR_timer_gettime: u32 = 224;
pub const LINUX___NR_timer_getoverrun: u32 = 225;
pub const LINUX___NR_timer_delete: u32 = 226;
pub const LINUX___NR_clock_settime: u32 = 227;
pub const LINUX___NR_clock_gettime: u32 = 228;
pub const LINUX___NR_clock_getres: u32 = 229;
pub const LINUX___NR_clock_nanosleep: u32 = 230;
pub const LINUX___NR_exit_group: u32 = 231;
pub const LINUX___NR_epoll_wait: u32 = 232;
pub const LINUX___NR_epoll_ctl: u32 = 233;
pub const LINUX___NR_tgkill: u32 = 234;
pub const LINUX___NR_utimes: u32 = 235;
pub const LINUX___NR_vserver: u32 = 236;
pub const LINUX___NR_mbind: u32 = 237;
pub const LINUX___NR_set_mempolicy: u32 = 238;
pub const LINUX___NR_get_mempolicy: u32 = 239;
pub const LINUX___NR_mq_open: u32 = 240;
pub const LINUX___NR_mq_unlink: u32 = 241;
pub const LINUX___NR_mq_timedsend: u32 = 242;
pub const LINUX___NR_mq_timedreceive: u32 = 243;
pub const LINUX___NR_mq_notify: u32 = 244;
pub const LINUX___NR_mq_getsetattr: u32 = 245;
pub const LINUX___NR_kexec_load: u32 = 246;
pub const LINUX___NR_waitid: u32 = 247;
pub const LINUX___NR_add_key: u32 = 248;
pub const LINUX___NR_request_key: u32 = 249;
pub const LINUX___NR_keyctl: u32 = 250;
pub const LINUX___NR_ioprio_set: u32 = 251;
pub const LINUX___NR_ioprio_get: u32 = 252;
pub const LINUX___NR_inotify_init: u32 = 253;
pub const LINUX___NR_inotify_add_watch: u32 = 254;
pub const LINUX___NR_inotify_rm_watch: u32 = 255;
pub const LINUX___NR_migrate_pages: u32 = 256;
pub const LINUX___NR_openat: u32 = 257;
pub const LINUX___NR_mkdirat: u32 = 258;
pub const LINUX___NR_mknodat: u32 = 259;
pub const LINUX___NR_fchownat: u32 = 260;
pub const LINUX___NR_futimesat: u32 = 261;
pub const LINUX___NR_newfstatat: u32 = 262;
pub const LINUX___NR_unlinkat: u32 = 263;
pub const LINUX___NR_renameat: u32 = 264;
pub const LINUX___NR_linkat: u32 = 265;
pub const LINUX___NR_symlinkat: u32 = 266;
pub const LINUX___NR_readlinkat: u32 = 267;
pub const LINUX___NR_fchmodat: u32 = 268;
pub const LINUX___NR_faccessat: u32 = 269;
pub const LINUX___NR_pselect6: u32 = 270;
pub const LINUX___NR_ppoll: u32 = 271;
pub const LINUX___NR_unshare: u32 = 272;
pub const LINUX___NR_set_robust_list: u32 = 273;
pub const LINUX___NR_get_robust_list: u32 = 274;
pub const LINUX___NR_splice: u32 = 275;
pub const LINUX___NR_tee: u32 = 276;
pub const LINUX___NR_sync_file_range: u32 = 277;
pub const LINUX___NR_vmsplice: u32 = 278;
pub const LINUX___NR_move_pages: u32 = 279;
pub const LINUX___NR_utimensat: u32 = 280;
pub const LINUX___NR_epoll_pwait: u32 = 281;
pub const LINUX___NR_signalfd: u32 = 282;
pub const LINUX___NR_timerfd_create: u32 = 283;
pub const LINUX___NR_eventfd: u32 = 284;
pub const LINUX___NR_fallocate: u32 = 285;
pub const LINUX___NR_timerfd_settime: u32 = 286;
pub const LINUX___NR_timerfd_gettime: u32 = 287;
pub const LINUX___NR_accept4: u32 = 288;
pub const LINUX___NR_signalfd4: u32 = 289;
pub const LINUX___NR_eventfd2: u32 = 290;
pub const LINUX___NR_epoll_create1: u32 = 291;
pub const LINUX___NR_dup3: u32 = 292;
pub const LINUX___NR_pipe2: u32 = 293;
pub const LINUX___NR_inotify_init1: u32 = 294;
pub const LINUX___NR_preadv: u32 = 295;
pub const LINUX___NR_pwritev: u32 = 296;
pub const LINUX___NR_rt_tgsigqueueinfo: u32 = 297;
pub const LINUX___NR_perf_event_open: u32 = 298;
pub const LINUX___NR_recvmmsg: u32 = 299;
pub const LINUX___NR_fanotify_init: u32 = 300;
pub const LINUX___NR_fanotify_mark: u32 = 301;
pub const LINUX___NR_prlimit64: u32 = 302;
pub const LINUX___NR_name_to_handle_at: u32 = 303;
pub const LINUX___NR_open_by_handle_at: u32 = 304;
pub const LINUX___NR_clock_adjtime: u32 = 305;
pub const LINUX___NR_syncfs: u32 = 306;
pub const LINUX___NR_sendmmsg: u32 = 307;
pub const LINUX___NR_setns: u32 = 308;
pub const LINUX___NR_getcpu: u32 = 309;
pub const LINUX___NR_process_vm_readv: u32 = 310;
pub const LINUX___NR_process_vm_writev: u32 = 311;
pub const LINUX___NR_kcmp: u32 = 312;
pub const LINUX___NR_finit_module: u32 = 313;
pub const LINUX___NR_sched_setattr: u32 = 314;
pub const LINUX___NR_sched_getattr: u32 = 315;
pub const LINUX___NR_renameat2: u32 = 316;
pub const LINUX___NR_seccomp: u32 = 317;
pub const LINUX___NR_getrandom: u32 = 318;
pub const LINUX___NR_memfd_create: u32 = 319;
pub const LINUX___NR_kexec_file_load: u32 = 320;
pub const LINUX___NR_bpf: u32 = 321;
pub const LINUX___NR_execveat: u32 = 322;
pub const LINUX___NR_userfaultfd: u32 = 323;
pub const LINUX___NR_membarrier: u32 = 324;
pub const LINUX___NR_mlock2: u32 = 325;
pub const LINUX___NR_copy_file_range: u32 = 326;
pub const LINUX___NR_preadv2: u32 = 327;
pub const LINUX___NR_pwritev2: u32 = 328;
pub const LINUX___NR_pkey_mprotect: u32 = 329;
pub const LINUX___NR_pkey_alloc: u32 = 330;
pub const LINUX___NR_pkey_free: u32 = 331;
pub const LINUX___NR_statx: u32 = 332;
pub const LINUX___NR_io_pgetevents: u32 = 333;
pub const LINUX___NR_rseq: u32 = 334;
pub const LINUX___NR_uretprobe: u32 = 335;
pub const LINUX___NR_pidfd_send_signal: u32 = 424;
pub const LINUX___NR_io_uring_setup: u32 = 425;
pub const LINUX___NR_io_uring_enter: u32 = 426;
pub const LINUX___NR_io_uring_register: u32 = 427;
pub const LINUX___NR_open_tree: u32 = 428;
pub const LINUX___NR_move_mount: u32 = 429;
pub const LINUX___NR_fsopen: u32 = 430;
pub const LINUX___NR_fsconfig: u32 = 431;
pub const LINUX___NR_fsmount: u32 = 432;
pub const LINUX___NR_fspick: u32 = 433;
pub const LINUX___NR_pidfd_open: u32 = 434;
pub const LINUX___NR_clone3: u32 = 435;
pub const LINUX___NR_close_range: u32 = 436;
pub const LINUX___NR_openat2: u32 = 437;
pub const LINUX___NR_pidfd_getfd: u32 = 438;
pub const LINUX___NR_faccessat2: u32 = 439;
pub const LINUX___NR_process_madvise: u32 = 440;
pub const LINUX___NR_epoll_pwait2: u32 = 441;
pub const LINUX___NR_mount_setattr: u32 = 442;
pub const LINUX___NR_quotactl_fd: u32 = 443;
pub const LINUX___NR_landlock_create_ruleset: u32 = 444;
pub const LINUX___NR_landlock_add_rule: u32 = 445;
pub const LINUX___NR_landlock_restrict_self: u32 = 446;
pub const LINUX___NR_memfd_secret: u32 = 447;
pub const LINUX___NR_process_mrelease: u32 = 448;
pub const LINUX___NR_futex_waitv: u32 = 449;
pub const LINUX___NR_set_mempolicy_home_node: u32 = 450;
pub const LINUX___NR_cachestat: u32 = 451;
pub const LINUX___NR_fchmodat2: u32 = 452;
pub const LINUX___NR_map_shadow_stack: u32 = 453;
pub const LINUX___NR_futex_wake: u32 = 454;
pub const LINUX___NR_futex_wait: u32 = 455;
pub const LINUX___NR_futex_requeue: u32 = 456;
pub const LINUX___NR_statmount: u32 = 457;
pub const LINUX___NR_listmount: u32 = 458;
pub const LINUX___NR_lsm_get_self_attr: u32 = 459;
pub const LINUX___NR_lsm_set_self_attr: u32 = 460;
pub const LINUX___NR_lsm_list_modules: u32 = 461;
pub const LINUX___NR_mseal: u32 = 462;
pub const LINUX___OLD_UTS_LEN: u32 = 8;
pub const LINUX___NEW_UTS_LEN: u32 = 64;
pub const LINUX_WNOHANG: u32 = 1;
pub const LINUX_WUNTRACED: u32 = 2;
pub const LINUX_WSTOPPED: u32 = 2;
pub const LINUX_WEXITED: u32 = 4;
pub const LINUX_WCONTINUED: u32 = 8;
pub const LINUX_WNOWAIT: u32 = 16777216;
pub const LINUX___WNOTHREAD: u32 = 536870912;
pub const LINUX___WALL: u32 = 1073741824;
pub const LINUX___WCLONE: u32 = 2147483648;
pub const LINUX_P_ALL: u32 = 0;
pub const LINUX_P_PID: u32 = 1;
pub const LINUX_P_PGID: u32 = 2;
pub const LINUX_P_PIDFD: u32 = 3;
pub const LINUX__IOC_NRBITS: u32 = 8;
pub const LINUX__IOC_TYPEBITS: u32 = 8;
pub const LINUX__IOC_SIZEBITS: u32 = 14;
pub const LINUX__IOC_DIRBITS: u32 = 2;
pub const LINUX__IOC_NRMASK: u32 = 255;
pub const LINUX__IOC_TYPEMASK: u32 = 255;
pub const LINUX__IOC_SIZEMASK: u32 = 16383;
pub const LINUX__IOC_DIRMASK: u32 = 3;
pub const LINUX__IOC_NRSHIFT: u32 = 0;
pub const LINUX__IOC_TYPESHIFT: u32 = 8;
pub const LINUX__IOC_SIZESHIFT: u32 = 16;
pub const LINUX__IOC_DIRSHIFT: u32 = 30;
pub const LINUX__IOC_NONE: u32 = 0;
pub const LINUX__IOC_WRITE: u32 = 1;
pub const LINUX__IOC_READ: u32 = 2;
pub const LINUX_IOC_IN: u32 = 1073741824;
pub const LINUX_IOC_OUT: u32 = 2147483648;
pub const LINUX_IOC_INOUT: u32 = 3221225472;
pub const LINUX_IOCSIZE_MASK: u32 = 1073676288;
pub const LINUX_IOCSIZE_SHIFT: u32 = 16;
pub const LINUX_TCGETS: u32 = 21505;
pub const LINUX_TCSETS: u32 = 21506;
pub const LINUX_TCSETSW: u32 = 21507;
pub const LINUX_TCSETSF: u32 = 21508;
pub const LINUX_TCGETA: u32 = 21509;
pub const LINUX_TCSETA: u32 = 21510;
pub const LINUX_TCSETAW: u32 = 21511;
pub const LINUX_TCSETAF: u32 = 21512;
pub const LINUX_TCSBRK: u32 = 21513;
pub const LINUX_TCXONC: u32 = 21514;
pub const LINUX_TCFLSH: u32 = 21515;
pub const LINUX_TIOCEXCL: u32 = 21516;
pub const LINUX_TIOCNXCL: u32 = 21517;
pub const LINUX_TIOCSCTTY: u32 = 21518;
pub const LINUX_TIOCGPGRP: u32 = 21519;
pub const LINUX_TIOCSPGRP: u32 = 21520;
pub const LINUX_TIOCOUTQ: u32 = 21521;
pub const LINUX_TIOCSTI: u32 = 21522;
pub const LINUX_TIOCGWINSZ: u32 = 21523;
pub const LINUX_TIOCSWINSZ: u32 = 21524;
pub const LINUX_TIOCMGET: u32 = 21525;
pub const LINUX_TIOCMBIS: u32 = 21526;
pub const LINUX_TIOCMBIC: u32 = 21527;
pub const LINUX_TIOCMSET: u32 = 21528;
pub const LINUX_TIOCGSOFTCAR: u32 = 21529;
pub const LINUX_TIOCSSOFTCAR: u32 = 21530;
pub const LINUX_FIONREAD: u32 = 21531;
pub const LINUX_TIOCINQ: u32 = 21531;
pub const LINUX_TIOCLINUX: u32 = 21532;
pub const LINUX_TIOCCONS: u32 = 21533;
pub const LINUX_TIOCGSERIAL: u32 = 21534;
pub const LINUX_TIOCSSERIAL: u32 = 21535;
pub const LINUX_TIOCPKT: u32 = 21536;
pub const LINUX_FIONBIO: u32 = 21537;
pub const LINUX_TIOCNOTTY: u32 = 21538;
pub const LINUX_TIOCSETD: u32 = 21539;
pub const LINUX_TIOCGETD: u32 = 21540;
pub const LINUX_TCSBRKP: u32 = 21541;
pub const LINUX_TIOCSBRK: u32 = 21543;
pub const LINUX_TIOCCBRK: u32 = 21544;
pub const LINUX_TIOCGSID: u32 = 21545;
pub const LINUX_TIOCGRS485: u32 = 21550;
pub const LINUX_TIOCSRS485: u32 = 21551;
pub const LINUX_TCGETX: u32 = 21554;
pub const LINUX_TCSETX: u32 = 21555;
pub const LINUX_TCSETXF: u32 = 21556;
pub const LINUX_TCSETXW: u32 = 21557;
pub const LINUX_TIOCVHANGUP: u32 = 21559;
pub const LINUX_FIONCLEX: u32 = 21584;
pub const LINUX_FIOCLEX: u32 = 21585;
pub const LINUX_FIOASYNC: u32 = 21586;
pub const LINUX_TIOCSERCONFIG: u32 = 21587;
pub const LINUX_TIOCSERGWILD: u32 = 21588;
pub const LINUX_TIOCSERSWILD: u32 = 21589;
pub const LINUX_TIOCGLCKTRMIOS: u32 = 21590;
pub const LINUX_TIOCSLCKTRMIOS: u32 = 21591;
pub const LINUX_TIOCSERGSTRUCT: u32 = 21592;
pub const LINUX_TIOCSERGETLSR: u32 = 21593;
pub const LINUX_TIOCSERGETMULTI: u32 = 21594;
pub const LINUX_TIOCSERSETMULTI: u32 = 21595;
pub const LINUX_TIOCMIWAIT: u32 = 21596;
pub const LINUX_TIOCGICOUNT: u32 = 21597;
pub const LINUX_FIOQSIZE: u32 = 21600;
pub const LINUX_TIOCPKT_DATA: u32 = 0;
pub const LINUX_TIOCPKT_FLUSHREAD: u32 = 1;
pub const LINUX_TIOCPKT_FLUSHWRITE: u32 = 2;
pub const LINUX_TIOCPKT_STOP: u32 = 4;
pub const LINUX_TIOCPKT_START: u32 = 8;
pub const LINUX_TIOCPKT_NOSTOP: u32 = 16;
pub const LINUX_TIOCPKT_DOSTOP: u32 = 32;
pub const LINUX_TIOCPKT_IOCTL: u32 = 64;
pub const LINUX_TIOCSER_TEMT: u32 = 1;
pub const LINUX_FP_XSTATE_MAGIC1: u32 = 1179670611;
pub const LINUX_FP_XSTATE_MAGIC2: u32 = 1179670597;
pub const LINUX_X86_FXSR_MAGIC: u32 = 0;
pub const LINUX_STAT_HAVE_NSEC: u32 = 1;
pub const LINUX_UC_FP_XSTATE: u32 = 1;
pub const LINUX_UC_SIGCONTEXT_SS: u32 = 2;
pub const LINUX_UC_STRICT_RESTORE_SS: u32 = 4;
pub const LINUX_POLLIN: u32 = 1;
pub const LINUX_POLLPRI: u32 = 2;
pub const LINUX_POLLOUT: u32 = 4;
pub const LINUX_POLLERR: u32 = 8;
pub const LINUX_POLLHUP: u32 = 16;
pub const LINUX_POLLNVAL: u32 = 32;
pub const LINUX_POLLRDNORM: u32 = 64;
pub const LINUX_POLLRDBAND: u32 = 128;
pub const LINUX_POLLWRNORM: u32 = 256;
pub const LINUX_POLLWRBAND: u32 = 512;
pub const LINUX_POLLMSG: u32 = 1024;
pub const LINUX_POLLREMOVE: u32 = 4096;
pub const LINUX_POLLRDHUP: u32 = 8192;
pub const LINUX_EPOLLIN: u32 = 1;
pub const LINUX_EPOLLPRI: u32 = 2;
pub const LINUX_EPOLLOUT: u32 = 4;
pub const LINUX_EPOLLERR: u32 = 8;
pub const LINUX_EPOLLHUP: u32 = 16;
pub const LINUX_EPOLLNVAL: u32 = 32;
pub const LINUX_EPOLLRDNORM: u32 = 64;
pub const LINUX_EPOLLRDBAND: u32 = 128;
pub const LINUX_EPOLLWRNORM: u32 = 256;
pub const LINUX_EPOLLWRBAND: u32 = 512;
pub const LINUX_EPOLLMSG: u32 = 1024;
pub const LINUX_EPOLLRDHUP: u32 = 8192;
pub const LINUX_EPOLLEXCLUSIVE: u32 = 268435456;
pub const LINUX_EPOLLWAKEUP: u32 = 536870912;
pub const LINUX_EPOLLONESHOT: u32 = 1073741824;
pub const LINUX_EPOLLET: u32 = 2147483648;
pub const LINUX_SUID_DUMP_DISABLE: u32 = 0;
pub const LINUX_SUID_DUMP_USER: u32 = 1;
pub const LINUX_SUID_DUMP_ROOT: u32 = 2;
pub const LINUX_AF_UNSPEC: u32 = 0;
pub const LINUX_AF_UNIX: u32 = 1;
pub const LINUX_AF_LOCAL: u32 = 1;
pub const LINUX_AF_INET: u32 = 2;
pub const LINUX_AF_AX25: u32 = 3;
pub const LINUX_AF_IPX: u32 = 4;
pub const LINUX_AF_APPLETALK: u32 = 5;
pub const LINUX_AF_NETROM: u32 = 6;
pub const LINUX_AF_BRIDGE: u32 = 7;
pub const LINUX_AF_ATMPVC: u32 = 8;
pub const LINUX_AF_X25: u32 = 9;
pub const LINUX_AF_INET6: u32 = 10;
pub const LINUX_AF_ROSE: u32 = 11;
pub const LINUX_AF_DECnet: u32 = 12;
pub const LINUX_AF_NETBEUI: u32 = 13;
pub const LINUX_AF_SECURITY: u32 = 14;
pub const LINUX_AF_KEY: u32 = 15;
pub const LINUX_AF_NETLINK: u32 = 16;
pub const LINUX_AF_ROUTE: u32 = 16;
pub const LINUX_AF_PACKET: u32 = 17;
pub const LINUX_AF_ASH: u32 = 18;
pub const LINUX_AF_ECONET: u32 = 19;
pub const LINUX_AF_ATMSVC: u32 = 20;
pub const LINUX_AF_RDS: u32 = 21;
pub const LINUX_AF_SNA: u32 = 22;
pub const LINUX_AF_IRDA: u32 = 23;
pub const LINUX_AF_PPPOX: u32 = 24;
pub const LINUX_AF_WANPIPE: u32 = 25;
pub const LINUX_AF_LLC: u32 = 26;
pub const LINUX_AF_IB: u32 = 27;
pub const LINUX_AF_MPLS: u32 = 28;
pub const LINUX_AF_CAN: u32 = 29;
pub const LINUX_AF_TIPC: u32 = 30;
pub const LINUX_AF_BLUETOOTH: u32 = 31;
pub const LINUX_AF_IUCV: u32 = 32;
pub const LINUX_AF_RXRPC: u32 = 33;
pub const LINUX_AF_ISDN: u32 = 34;
pub const LINUX_AF_PHONET: u32 = 35;
pub const LINUX_AF_IEEE802154: u32 = 36;
pub const LINUX_AF_CAIF: u32 = 37;
pub const LINUX_AF_ALG: u32 = 38;
pub const LINUX_AF_NFC: u32 = 39;
pub const LINUX_AF_VSOCK: u32 = 40;
pub const LINUX_AF_KCM: u32 = 41;
pub const LINUX_AF_QIPCRTR: u32 = 42;
pub const LINUX_AF_SMC: u32 = 43;
pub const LINUX_AF_XDP: u32 = 44;
pub const LINUX_AF_MCTP: u32 = 45;
pub type linux___u8 = ::core::ffi::c_uchar;
pub type linux___u16 = ::core::ffi::c_ushort;
pub type linux___u32 = ::core::ffi::c_uint;
pub type linux___u64 = ::core::ffi::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux___kernel_fd_set {
    pub fds_bits: [::core::ffi::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___kernel_fd_set() {
    const UNINIT: ::core::mem::MaybeUninit<linux___kernel_fd_set> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux___kernel_fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(linux___kernel_fd_set))
    );
    assert_eq!(
        ::core::mem::align_of::<linux___kernel_fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(linux___kernel_fd_set))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fds_bits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___kernel_fd_set),
            "::",
            stringify!(fds_bits)
        )
    );
}
pub type linux___kernel_sighandler_t =
    ::core::option::Option<unsafe extern "C" fn(arg1: ::core::ffi::c_int)>;
pub type linux___kernel_key_t = ::core::ffi::c_int;
pub type linux___kernel_mqd_t = ::core::ffi::c_int;
pub type linux___kernel_old_uid_t = ::core::ffi::c_ushort;
pub type linux___kernel_old_gid_t = ::core::ffi::c_ushort;
pub type linux___kernel_old_dev_t = ::core::ffi::c_ulong;
pub type linux___kernel_long_t = ::core::ffi::c_long;
pub type linux___kernel_ulong_t = ::core::ffi::c_ulong;
pub type linux___kernel_ino_t = linux___kernel_ulong_t;
pub type linux___kernel_mode_t = ::core::ffi::c_uint;
pub type linux___kernel_pid_t = ::core::ffi::c_int;
pub type linux___kernel_ipc_pid_t = ::core::ffi::c_int;
pub type linux___kernel_uid_t = ::core::ffi::c_uint;
pub type linux___kernel_gid_t = ::core::ffi::c_uint;
pub type linux___kernel_suseconds_t = linux___kernel_long_t;
pub type linux___kernel_daddr_t = ::core::ffi::c_int;
pub type linux___kernel_uid32_t = ::core::ffi::c_uint;
pub type linux___kernel_gid32_t = ::core::ffi::c_uint;
pub type linux___kernel_size_t = linux___kernel_ulong_t;
pub type linux___kernel_ssize_t = linux___kernel_long_t;
pub type linux___kernel_ptrdiff_t = linux___kernel_long_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux___kernel_fsid_t {
    pub val: [::core::ffi::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___kernel_fsid_t() {
    const UNINIT: ::core::mem::MaybeUninit<linux___kernel_fsid_t> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux___kernel_fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(linux___kernel_fsid_t))
    );
    assert_eq!(
        ::core::mem::align_of::<linux___kernel_fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(linux___kernel_fsid_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___kernel_fsid_t),
            "::",
            stringify!(val)
        )
    );
}
pub type linux___kernel_off_t = linux___kernel_long_t;
pub type linux___kernel_loff_t = ::core::ffi::c_longlong;
pub type linux___kernel_old_time_t = linux___kernel_long_t;
pub type linux___kernel_time_t = linux___kernel_long_t;
pub type linux___kernel_time64_t = ::core::ffi::c_longlong;
pub type linux___kernel_clock_t = linux___kernel_long_t;
pub type linux___kernel_timer_t = ::core::ffi::c_int;
pub type linux___kernel_clockid_t = ::core::ffi::c_int;
pub type linux___kernel_caddr_t = *mut ::core::ffi::c_char;
pub type linux___kernel_uid16_t = ::core::ffi::c_ushort;
pub type linux___kernel_gid16_t = ::core::ffi::c_ushort;
pub type linux___be16 = linux___u16;
pub type linux___be32 = linux___u32;
pub type linux___poll_t = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux_flock {
    pub l_type: ::core::ffi::c_short,
    pub l_whence: ::core::ffi::c_short,
    pub l_start: linux___kernel_off_t,
    pub l_len: linux___kernel_off_t,
    pub l_pid: linux___kernel_pid_t,
}
#[test]
fn bindgen_test_layout_flock() {
    const UNINIT: ::core::mem::MaybeUninit<linux_flock> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_flock>(),
        32usize,
        concat!("Size of: ", stringify!(linux_flock))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_flock>(),
        8usize,
        concat!("Alignment of ", stringify!(linux_flock))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_flock),
            "::",
            stringify!(l_type)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_whence) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_flock),
            "::",
            stringify!(l_whence)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_start) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_flock),
            "::",
            stringify!(l_start)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_len) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_flock),
            "::",
            stringify!(l_len)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_pid) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_flock),
            "::",
            stringify!(l_pid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux_flock64 {
    pub l_type: ::core::ffi::c_short,
    pub l_whence: ::core::ffi::c_short,
    pub l_start: linux___kernel_loff_t,
    pub l_len: linux___kernel_loff_t,
    pub l_pid: linux___kernel_pid_t,
}
#[test]
fn bindgen_test_layout_flock64() {
    const UNINIT: ::core::mem::MaybeUninit<linux_flock64> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_flock64>(),
        32usize,
        concat!("Size of: ", stringify!(linux_flock64))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_flock64>(),
        8usize,
        concat!("Alignment of ", stringify!(linux_flock64))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_flock64),
            "::",
            stringify!(l_type)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_whence) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_flock64),
            "::",
            stringify!(l_whence)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_start) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_flock64),
            "::",
            stringify!(l_start)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_len) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_flock64),
            "::",
            stringify!(l_len)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_pid) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_flock64),
            "::",
            stringify!(l_pid)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux_epoll_event {
    pub events: linux___poll_t,
    pub data: linux___u64,
}
#[test]
fn bindgen_test_layout_epoll_event() {
    const UNINIT: ::core::mem::MaybeUninit<linux_epoll_event> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_epoll_event>(),
        12usize,
        concat!("Size of: ", stringify!(linux_epoll_event))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_epoll_event>(),
        1usize,
        concat!("Alignment of ", stringify!(linux_epoll_event))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).events) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_epoll_event),
            "::",
            stringify!(events)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_epoll_event),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux_robust_list {
    pub next: *mut linux_robust_list,
}
#[test]
fn bindgen_test_layout_robust_list() {
    const UNINIT: ::core::mem::MaybeUninit<linux_robust_list> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_robust_list>(),
        8usize,
        concat!("Size of: ", stringify!(linux_robust_list))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_robust_list>(),
        8usize,
        concat!("Alignment of ", stringify!(linux_robust_list))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_robust_list),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux_robust_list_head {
    pub list: linux_robust_list,
    pub futex_offset: ::core::ffi::c_long,
    pub list_op_pending: *mut linux_robust_list,
}
#[test]
fn bindgen_test_layout_robust_list_head() {
    const UNINIT: ::core::mem::MaybeUninit<linux_robust_list_head> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_robust_list_head>(),
        24usize,
        concat!("Size of: ", stringify!(linux_robust_list_head))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_robust_list_head>(),
        8usize,
        concat!("Alignment of ", stringify!(linux_robust_list_head))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).list) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_robust_list_head),
            "::",
            stringify!(list)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).futex_offset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_robust_list_head),
            "::",
            stringify!(futex_offset)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).list_op_pending) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_robust_list_head),
            "::",
            stringify!(list_op_pending)
        )
    );
}
pub type linux___kernel_sa_family_t = ::core::ffi::c_ushort;
pub const LINUX_IPPROTO_IP: linux__bindgen_ty_1 = 0;
pub const LINUX_IPPROTO_ICMP: linux__bindgen_ty_1 = 1;
pub const LINUX_IPPROTO_IGMP: linux__bindgen_ty_1 = 2;
pub const LINUX_IPPROTO_IPIP: linux__bindgen_ty_1 = 4;
pub const LINUX_IPPROTO_TCP: linux__bindgen_ty_1 = 6;
pub const LINUX_IPPROTO_EGP: linux__bindgen_ty_1 = 8;
pub const LINUX_IPPROTO_PUP: linux__bindgen_ty_1 = 12;
pub const LINUX_IPPROTO_UDP: linux__bindgen_ty_1 = 17;
pub const LINUX_IPPROTO_IDP: linux__bindgen_ty_1 = 22;
pub const LINUX_IPPROTO_TP: linux__bindgen_ty_1 = 29;
pub const LINUX_IPPROTO_DCCP: linux__bindgen_ty_1 = 33;
pub const LINUX_IPPROTO_IPV6: linux__bindgen_ty_1 = 41;
pub const LINUX_IPPROTO_RSVP: linux__bindgen_ty_1 = 46;
pub const LINUX_IPPROTO_GRE: linux__bindgen_ty_1 = 47;
pub const LINUX_IPPROTO_ESP: linux__bindgen_ty_1 = 50;
pub const LINUX_IPPROTO_AH: linux__bindgen_ty_1 = 51;
pub const LINUX_IPPROTO_MTP: linux__bindgen_ty_1 = 92;
pub const LINUX_IPPROTO_BEETPH: linux__bindgen_ty_1 = 94;
pub const LINUX_IPPROTO_ENCAP: linux__bindgen_ty_1 = 98;
pub const LINUX_IPPROTO_PIM: linux__bindgen_ty_1 = 103;
pub const LINUX_IPPROTO_COMP: linux__bindgen_ty_1 = 108;
pub const LINUX_IPPROTO_L2TP: linux__bindgen_ty_1 = 115;
pub const LINUX_IPPROTO_SCTP: linux__bindgen_ty_1 = 132;
pub const LINUX_IPPROTO_UDPLITE: linux__bindgen_ty_1 = 136;
pub const LINUX_IPPROTO_MPLS: linux__bindgen_ty_1 = 137;
pub const LINUX_IPPROTO_ETHERNET: linux__bindgen_ty_1 = 143;
pub const LINUX_IPPROTO_RAW: linux__bindgen_ty_1 = 255;
pub const LINUX_IPPROTO_SMC: linux__bindgen_ty_1 = 256;
pub const LINUX_IPPROTO_MPTCP: linux__bindgen_ty_1 = 262;
pub const LINUX_IPPROTO_MAX: linux__bindgen_ty_1 = 263;
pub type linux__bindgen_ty_1 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux_in_addr {
    pub s_addr: linux___be32,
}
#[test]
fn bindgen_test_layout_in_addr() {
    const UNINIT: ::core::mem::MaybeUninit<linux_in_addr> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_in_addr>(),
        4usize,
        concat!("Size of: ", stringify!(linux_in_addr))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_in_addr>(),
        4usize,
        concat!("Alignment of ", stringify!(linux_in_addr))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).s_addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_in_addr),
            "::",
            stringify!(s_addr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux_sockaddr_in {
    pub sin_family: linux___kernel_sa_family_t,
    pub sin_port: linux___be16,
    pub sin_addr: linux_in_addr,
    pub l__pad: [::core::ffi::c_uchar; 8usize],
}
#[test]
fn bindgen_test_layout_sockaddr_in() {
    const UNINIT: ::core::mem::MaybeUninit<linux_sockaddr_in> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_sockaddr_in>(),
        16usize,
        concat!("Size of: ", stringify!(linux_sockaddr_in))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_sockaddr_in>(),
        4usize,
        concat!("Alignment of ", stringify!(linux_sockaddr_in))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sin_family) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sockaddr_in),
            "::",
            stringify!(sin_family)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sin_port) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sockaddr_in),
            "::",
            stringify!(sin_port)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sin_addr) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sockaddr_in),
            "::",
            stringify!(sin_addr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l__pad) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sockaddr_in),
            "::",
            stringify!(l__pad)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux_nlmsghdr {
    pub nlmsg_len: linux___u32,
    pub nlmsg_type: linux___u16,
    pub nlmsg_flags: linux___u16,
    pub nlmsg_seq: linux___u32,
    pub nlmsg_pid: linux___u32,
}
#[test]
fn bindgen_test_layout_nlmsghdr() {
    const UNINIT: ::core::mem::MaybeUninit<linux_nlmsghdr> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_nlmsghdr>(),
        16usize,
        concat!("Size of: ", stringify!(linux_nlmsghdr))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_nlmsghdr>(),
        4usize,
        concat!("Alignment of ", stringify!(linux_nlmsghdr))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).nlmsg_len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_nlmsghdr),
            "::",
            stringify!(nlmsg_len)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).nlmsg_type) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_nlmsghdr),
            "::",
            stringify!(nlmsg_type)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).nlmsg_flags) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_nlmsghdr),
            "::",
            stringify!(nlmsg_flags)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).nlmsg_seq) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_nlmsghdr),
            "::",
            stringify!(nlmsg_seq)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).nlmsg_pid) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_nlmsghdr),
            "::",
            stringify!(nlmsg_pid)
        )
    );
}
pub const LINUX_NETLINK_UNCONNECTED: linux__bindgen_ty_2 = 0;
pub const LINUX_NETLINK_CONNECTED: linux__bindgen_ty_2 = 1;
pub type linux__bindgen_ty_2 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux___kernel_timespec {
    pub tv_sec: linux___kernel_time64_t,
    pub tv_nsec: ::core::ffi::c_longlong,
}
#[test]
fn bindgen_test_layout___kernel_timespec() {
    const UNINIT: ::core::mem::MaybeUninit<linux___kernel_timespec> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux___kernel_timespec>(),
        16usize,
        concat!("Size of: ", stringify!(linux___kernel_timespec))
    );
    assert_eq!(
        ::core::mem::align_of::<linux___kernel_timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(linux___kernel_timespec))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___kernel_timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___kernel_timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux___kernel_old_timeval {
    pub tv_sec: linux___kernel_long_t,
    pub tv_usec: linux___kernel_long_t,
}
#[test]
fn bindgen_test_layout___kernel_old_timeval() {
    const UNINIT: ::core::mem::MaybeUninit<linux___kernel_old_timeval> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux___kernel_old_timeval>(),
        16usize,
        concat!("Size of: ", stringify!(linux___kernel_old_timeval))
    );
    assert_eq!(
        ::core::mem::align_of::<linux___kernel_old_timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(linux___kernel_old_timeval))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___kernel_old_timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tv_usec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___kernel_old_timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux___kernel_old_itimerval {
    pub it_interval: linux___kernel_old_timeval,
    pub it_value: linux___kernel_old_timeval,
}
#[test]
fn bindgen_test_layout___kernel_old_itimerval() {
    const UNINIT: ::core::mem::MaybeUninit<linux___kernel_old_itimerval> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux___kernel_old_itimerval>(),
        32usize,
        concat!("Size of: ", stringify!(linux___kernel_old_itimerval))
    );
    assert_eq!(
        ::core::mem::align_of::<linux___kernel_old_itimerval>(),
        8usize,
        concat!("Alignment of ", stringify!(linux___kernel_old_itimerval))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).it_interval) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___kernel_old_itimerval),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).it_value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___kernel_old_itimerval),
            "::",
            stringify!(it_value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux_rusage {
    pub ru_utime: linux___kernel_old_timeval,
    pub ru_stime: linux___kernel_old_timeval,
    pub ru_maxrss: linux___kernel_long_t,
    pub ru_ixrss: linux___kernel_long_t,
    pub ru_idrss: linux___kernel_long_t,
    pub ru_isrss: linux___kernel_long_t,
    pub ru_minflt: linux___kernel_long_t,
    pub ru_majflt: linux___kernel_long_t,
    pub ru_nswap: linux___kernel_long_t,
    pub ru_inblock: linux___kernel_long_t,
    pub ru_oublock: linux___kernel_long_t,
    pub ru_msgsnd: linux___kernel_long_t,
    pub ru_msgrcv: linux___kernel_long_t,
    pub ru_nsignals: linux___kernel_long_t,
    pub ru_nvcsw: linux___kernel_long_t,
    pub ru_nivcsw: linux___kernel_long_t,
}
#[test]
fn bindgen_test_layout_rusage() {
    const UNINIT: ::core::mem::MaybeUninit<linux_rusage> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_rusage>(),
        144usize,
        concat!("Size of: ", stringify!(linux_rusage))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_rusage>(),
        8usize,
        concat!("Alignment of ", stringify!(linux_rusage))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ru_utime) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_rusage),
            "::",
            stringify!(ru_utime)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ru_stime) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_rusage),
            "::",
            stringify!(ru_stime)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ru_maxrss) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_rusage),
            "::",
            stringify!(ru_maxrss)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ru_ixrss) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_rusage),
            "::",
            stringify!(ru_ixrss)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ru_idrss) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_rusage),
            "::",
            stringify!(ru_idrss)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ru_isrss) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_rusage),
            "::",
            stringify!(ru_isrss)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ru_minflt) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_rusage),
            "::",
            stringify!(ru_minflt)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ru_majflt) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_rusage),
            "::",
            stringify!(ru_majflt)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ru_nswap) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_rusage),
            "::",
            stringify!(ru_nswap)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ru_inblock) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_rusage),
            "::",
            stringify!(ru_inblock)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ru_oublock) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_rusage),
            "::",
            stringify!(ru_oublock)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ru_msgsnd) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_rusage),
            "::",
            stringify!(ru_msgsnd)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ru_msgrcv) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_rusage),
            "::",
            stringify!(ru_msgrcv)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ru_nsignals) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_rusage),
            "::",
            stringify!(ru_nsignals)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ru_nvcsw) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_rusage),
            "::",
            stringify!(ru_nvcsw)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ru_nivcsw) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_rusage),
            "::",
            stringify!(ru_nivcsw)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux_rlimit {
    pub rlim_cur: linux___kernel_ulong_t,
    pub rlim_max: linux___kernel_ulong_t,
}
#[test]
fn bindgen_test_layout_rlimit() {
    const UNINIT: ::core::mem::MaybeUninit<linux_rlimit> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_rlimit>(),
        16usize,
        concat!("Size of: ", stringify!(linux_rlimit))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_rlimit>(),
        8usize,
        concat!("Alignment of ", stringify!(linux_rlimit))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rlim_cur) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_rlimit),
            "::",
            stringify!(rlim_cur)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rlim_max) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_rlimit),
            "::",
            stringify!(rlim_max)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux_rlimit64 {
    pub rlim_cur: linux___u64,
    pub rlim_max: linux___u64,
}
#[test]
fn bindgen_test_layout_rlimit64() {
    const UNINIT: ::core::mem::MaybeUninit<linux_rlimit64> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_rlimit64>(),
        16usize,
        concat!("Size of: ", stringify!(linux_rlimit64))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_rlimit64>(),
        8usize,
        concat!("Alignment of ", stringify!(linux_rlimit64))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rlim_cur) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_rlimit64),
            "::",
            stringify!(rlim_cur)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rlim_max) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_rlimit64),
            "::",
            stringify!(rlim_max)
        )
    );
}
#[repr(C)]
#[repr(align(32))]
#[derive(Debug)]
pub struct linux_rseq {
    pub cpu_id_start: linux___u32,
    pub cpu_id: linux___u32,
    pub rseq_cs: linux___u64,
    pub flags: linux___u32,
    pub node_id: linux___u32,
    pub mm_cid: linux___u32,
    pub end: linux___IncompleteArrayField<::core::ffi::c_char>,
}
#[test]
fn bindgen_test_layout_rseq() {
    const UNINIT: ::core::mem::MaybeUninit<linux_rseq> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_rseq>(),
        32usize,
        concat!("Size of: ", stringify!(linux_rseq))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_rseq>(),
        32usize,
        concat!("Alignment of ", stringify!(linux_rseq))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cpu_id_start) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_rseq),
            "::",
            stringify!(cpu_id_start)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cpu_id) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_rseq),
            "::",
            stringify!(cpu_id)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rseq_cs) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_rseq),
            "::",
            stringify!(rseq_cs)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_rseq),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).node_id) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_rseq),
            "::",
            stringify!(node_id)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).mm_cid) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_rseq),
            "::",
            stringify!(mm_cid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).end) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_rseq),
            "::",
            stringify!(end)
        )
    );
}
pub const LINUX_IFLA_UNSPEC: linux__bindgen_ty_3 = 0;
pub const LINUX_IFLA_ADDRESS: linux__bindgen_ty_3 = 1;
pub const LINUX_IFLA_BROADCAST: linux__bindgen_ty_3 = 2;
pub const LINUX_IFLA_IFNAME: linux__bindgen_ty_3 = 3;
pub const LINUX_IFLA_MTU: linux__bindgen_ty_3 = 4;
pub const LINUX_IFLA_LINK: linux__bindgen_ty_3 = 5;
pub const LINUX_IFLA_QDISC: linux__bindgen_ty_3 = 6;
pub const LINUX_IFLA_STATS: linux__bindgen_ty_3 = 7;
pub const LINUX_IFLA_COST: linux__bindgen_ty_3 = 8;
pub const LINUX_IFLA_PRIORITY: linux__bindgen_ty_3 = 9;
pub const LINUX_IFLA_MASTER: linux__bindgen_ty_3 = 10;
pub const LINUX_IFLA_WIRELESS: linux__bindgen_ty_3 = 11;
pub const LINUX_IFLA_PROTINFO: linux__bindgen_ty_3 = 12;
pub const LINUX_IFLA_TXQLEN: linux__bindgen_ty_3 = 13;
pub const LINUX_IFLA_MAP: linux__bindgen_ty_3 = 14;
pub const LINUX_IFLA_WEIGHT: linux__bindgen_ty_3 = 15;
pub const LINUX_IFLA_OPERSTATE: linux__bindgen_ty_3 = 16;
pub const LINUX_IFLA_LINKMODE: linux__bindgen_ty_3 = 17;
pub const LINUX_IFLA_LINKINFO: linux__bindgen_ty_3 = 18;
pub const LINUX_IFLA_NET_NS_PID: linux__bindgen_ty_3 = 19;
pub const LINUX_IFLA_IFALIAS: linux__bindgen_ty_3 = 20;
pub const LINUX_IFLA_NUM_VF: linux__bindgen_ty_3 = 21;
pub const LINUX_IFLA_VFINFO_LIST: linux__bindgen_ty_3 = 22;
pub const LINUX_IFLA_STATS64: linux__bindgen_ty_3 = 23;
pub const LINUX_IFLA_VF_PORTS: linux__bindgen_ty_3 = 24;
pub const LINUX_IFLA_PORT_SELF: linux__bindgen_ty_3 = 25;
pub const LINUX_IFLA_AF_SPEC: linux__bindgen_ty_3 = 26;
pub const LINUX_IFLA_GROUP: linux__bindgen_ty_3 = 27;
pub const LINUX_IFLA_NET_NS_FD: linux__bindgen_ty_3 = 28;
pub const LINUX_IFLA_EXT_MASK: linux__bindgen_ty_3 = 29;
pub const LINUX_IFLA_PROMISCUITY: linux__bindgen_ty_3 = 30;
pub const LINUX_IFLA_NUM_TX_QUEUES: linux__bindgen_ty_3 = 31;
pub const LINUX_IFLA_NUM_RX_QUEUES: linux__bindgen_ty_3 = 32;
pub const LINUX_IFLA_CARRIER: linux__bindgen_ty_3 = 33;
pub const LINUX_IFLA_PHYS_PORT_ID: linux__bindgen_ty_3 = 34;
pub const LINUX_IFLA_CARRIER_CHANGES: linux__bindgen_ty_3 = 35;
pub const LINUX_IFLA_PHYS_SWITCH_ID: linux__bindgen_ty_3 = 36;
pub const LINUX_IFLA_LINK_NETNSID: linux__bindgen_ty_3 = 37;
pub const LINUX_IFLA_PHYS_PORT_NAME: linux__bindgen_ty_3 = 38;
pub const LINUX_IFLA_PROTO_DOWN: linux__bindgen_ty_3 = 39;
pub const LINUX_IFLA_GSO_MAX_SEGS: linux__bindgen_ty_3 = 40;
pub const LINUX_IFLA_GSO_MAX_SIZE: linux__bindgen_ty_3 = 41;
pub const LINUX_IFLA_PAD: linux__bindgen_ty_3 = 42;
pub const LINUX_IFLA_XDP: linux__bindgen_ty_3 = 43;
pub const LINUX_IFLA_EVENT: linux__bindgen_ty_3 = 44;
pub const LINUX_IFLA_NEW_NETNSID: linux__bindgen_ty_3 = 45;
pub const LINUX_IFLA_IF_NETNSID: linux__bindgen_ty_3 = 46;
pub const LINUX_IFLA_TARGET_NETNSID: linux__bindgen_ty_3 = 46;
pub const LINUX_IFLA_CARRIER_UP_COUNT: linux__bindgen_ty_3 = 47;
pub const LINUX_IFLA_CARRIER_DOWN_COUNT: linux__bindgen_ty_3 = 48;
pub const LINUX_IFLA_NEW_IFINDEX: linux__bindgen_ty_3 = 49;
pub const LINUX_IFLA_MIN_MTU: linux__bindgen_ty_3 = 50;
pub const LINUX_IFLA_MAX_MTU: linux__bindgen_ty_3 = 51;
pub const LINUX_IFLA_PROP_LIST: linux__bindgen_ty_3 = 52;
pub const LINUX_IFLA_ALT_IFNAME: linux__bindgen_ty_3 = 53;
pub const LINUX_IFLA_PERM_ADDRESS: linux__bindgen_ty_3 = 54;
pub const LINUX_IFLA_PROTO_DOWN_REASON: linux__bindgen_ty_3 = 55;
pub const LINUX_IFLA_PARENT_DEV_NAME: linux__bindgen_ty_3 = 56;
pub const LINUX_IFLA_PARENT_DEV_BUS_NAME: linux__bindgen_ty_3 = 57;
pub const LINUX_IFLA_GRO_MAX_SIZE: linux__bindgen_ty_3 = 58;
pub const LINUX_IFLA_TSO_MAX_SIZE: linux__bindgen_ty_3 = 59;
pub const LINUX_IFLA_TSO_MAX_SEGS: linux__bindgen_ty_3 = 60;
pub const LINUX_IFLA_ALLMULTI: linux__bindgen_ty_3 = 61;
pub const LINUX_IFLA_DEVLINK_PORT: linux__bindgen_ty_3 = 62;
pub const LINUX_IFLA_GSO_IPV4_MAX_SIZE: linux__bindgen_ty_3 = 63;
pub const LINUX_IFLA_GRO_IPV4_MAX_SIZE: linux__bindgen_ty_3 = 64;
pub const LINUX_IFLA_DPLL_PIN: linux__bindgen_ty_3 = 65;
pub const LINUX___IFLA_MAX: linux__bindgen_ty_3 = 66;
pub type linux__bindgen_ty_3 = ::core::ffi::c_uint;
pub const LINUX_IFLA_PROTO_DOWN_REASON_UNSPEC: linux__bindgen_ty_4 = 0;
pub const LINUX_IFLA_PROTO_DOWN_REASON_MASK: linux__bindgen_ty_4 = 1;
pub const LINUX_IFLA_PROTO_DOWN_REASON_VALUE: linux__bindgen_ty_4 = 2;
pub const LINUX___IFLA_PROTO_DOWN_REASON_CNT: linux__bindgen_ty_4 = 3;
pub const LINUX_IFLA_PROTO_DOWN_REASON_MAX: linux__bindgen_ty_4 = 2;
pub type linux__bindgen_ty_4 = ::core::ffi::c_uint;
pub const LINUX_IFLA_INET_UNSPEC: linux__bindgen_ty_5 = 0;
pub const LINUX_IFLA_INET_CONF: linux__bindgen_ty_5 = 1;
pub const LINUX___IFLA_INET_MAX: linux__bindgen_ty_5 = 2;
pub type linux__bindgen_ty_5 = ::core::ffi::c_uint;
pub const LINUX_IFLA_INET6_UNSPEC: linux__bindgen_ty_6 = 0;
pub const LINUX_IFLA_INET6_FLAGS: linux__bindgen_ty_6 = 1;
pub const LINUX_IFLA_INET6_CONF: linux__bindgen_ty_6 = 2;
pub const LINUX_IFLA_INET6_STATS: linux__bindgen_ty_6 = 3;
pub const LINUX_IFLA_INET6_MCAST: linux__bindgen_ty_6 = 4;
pub const LINUX_IFLA_INET6_CACHEINFO: linux__bindgen_ty_6 = 5;
pub const LINUX_IFLA_INET6_ICMP6STATS: linux__bindgen_ty_6 = 6;
pub const LINUX_IFLA_INET6_TOKEN: linux__bindgen_ty_6 = 7;
pub const LINUX_IFLA_INET6_ADDR_GEN_MODE: linux__bindgen_ty_6 = 8;
pub const LINUX_IFLA_INET6_RA_MTU: linux__bindgen_ty_6 = 9;
pub const LINUX___IFLA_INET6_MAX: linux__bindgen_ty_6 = 10;
pub type linux__bindgen_ty_6 = ::core::ffi::c_uint;
pub const LINUX_IFLA_BR_UNSPEC: linux__bindgen_ty_7 = 0;
pub const LINUX_IFLA_BR_FORWARD_DELAY: linux__bindgen_ty_7 = 1;
pub const LINUX_IFLA_BR_HELLO_TIME: linux__bindgen_ty_7 = 2;
pub const LINUX_IFLA_BR_MAX_AGE: linux__bindgen_ty_7 = 3;
pub const LINUX_IFLA_BR_AGEING_TIME: linux__bindgen_ty_7 = 4;
pub const LINUX_IFLA_BR_STP_STATE: linux__bindgen_ty_7 = 5;
pub const LINUX_IFLA_BR_PRIORITY: linux__bindgen_ty_7 = 6;
pub const LINUX_IFLA_BR_VLAN_FILTERING: linux__bindgen_ty_7 = 7;
pub const LINUX_IFLA_BR_VLAN_PROTOCOL: linux__bindgen_ty_7 = 8;
pub const LINUX_IFLA_BR_GROUP_FWD_MASK: linux__bindgen_ty_7 = 9;
pub const LINUX_IFLA_BR_ROOT_ID: linux__bindgen_ty_7 = 10;
pub const LINUX_IFLA_BR_BRIDGE_ID: linux__bindgen_ty_7 = 11;
pub const LINUX_IFLA_BR_ROOT_PORT: linux__bindgen_ty_7 = 12;
pub const LINUX_IFLA_BR_ROOT_PATH_COST: linux__bindgen_ty_7 = 13;
pub const LINUX_IFLA_BR_TOPOLOGY_CHANGE: linux__bindgen_ty_7 = 14;
pub const LINUX_IFLA_BR_TOPOLOGY_CHANGE_DETECTED: linux__bindgen_ty_7 = 15;
pub const LINUX_IFLA_BR_HELLO_TIMER: linux__bindgen_ty_7 = 16;
pub const LINUX_IFLA_BR_TCN_TIMER: linux__bindgen_ty_7 = 17;
pub const LINUX_IFLA_BR_TOPOLOGY_CHANGE_TIMER: linux__bindgen_ty_7 = 18;
pub const LINUX_IFLA_BR_GC_TIMER: linux__bindgen_ty_7 = 19;
pub const LINUX_IFLA_BR_GROUP_ADDR: linux__bindgen_ty_7 = 20;
pub const LINUX_IFLA_BR_FDB_FLUSH: linux__bindgen_ty_7 = 21;
pub const LINUX_IFLA_BR_MCAST_ROUTER: linux__bindgen_ty_7 = 22;
pub const LINUX_IFLA_BR_MCAST_SNOOPING: linux__bindgen_ty_7 = 23;
pub const LINUX_IFLA_BR_MCAST_QUERY_USE_IFADDR: linux__bindgen_ty_7 = 24;
pub const LINUX_IFLA_BR_MCAST_QUERIER: linux__bindgen_ty_7 = 25;
pub const LINUX_IFLA_BR_MCAST_HASH_ELASTICITY: linux__bindgen_ty_7 = 26;
pub const LINUX_IFLA_BR_MCAST_HASH_MAX: linux__bindgen_ty_7 = 27;
pub const LINUX_IFLA_BR_MCAST_LAST_MEMBER_CNT: linux__bindgen_ty_7 = 28;
pub const LINUX_IFLA_BR_MCAST_STARTUP_QUERY_CNT: linux__bindgen_ty_7 = 29;
pub const LINUX_IFLA_BR_MCAST_LAST_MEMBER_INTVL: linux__bindgen_ty_7 = 30;
pub const LINUX_IFLA_BR_MCAST_MEMBERSHIP_INTVL: linux__bindgen_ty_7 = 31;
pub const LINUX_IFLA_BR_MCAST_QUERIER_INTVL: linux__bindgen_ty_7 = 32;
pub const LINUX_IFLA_BR_MCAST_QUERY_INTVL: linux__bindgen_ty_7 = 33;
pub const LINUX_IFLA_BR_MCAST_QUERY_RESPONSE_INTVL: linux__bindgen_ty_7 = 34;
pub const LINUX_IFLA_BR_MCAST_STARTUP_QUERY_INTVL: linux__bindgen_ty_7 = 35;
pub const LINUX_IFLA_BR_NF_CALL_IPTABLES: linux__bindgen_ty_7 = 36;
pub const LINUX_IFLA_BR_NF_CALL_IP6TABLES: linux__bindgen_ty_7 = 37;
pub const LINUX_IFLA_BR_NF_CALL_ARPTABLES: linux__bindgen_ty_7 = 38;
pub const LINUX_IFLA_BR_VLAN_DEFAULT_PVID: linux__bindgen_ty_7 = 39;
pub const LINUX_IFLA_BR_PAD: linux__bindgen_ty_7 = 40;
pub const LINUX_IFLA_BR_VLAN_STATS_ENABLED: linux__bindgen_ty_7 = 41;
pub const LINUX_IFLA_BR_MCAST_STATS_ENABLED: linux__bindgen_ty_7 = 42;
pub const LINUX_IFLA_BR_MCAST_IGMP_VERSION: linux__bindgen_ty_7 = 43;
pub const LINUX_IFLA_BR_MCAST_MLD_VERSION: linux__bindgen_ty_7 = 44;
pub const LINUX_IFLA_BR_VLAN_STATS_PER_PORT: linux__bindgen_ty_7 = 45;
pub const LINUX_IFLA_BR_MULTI_BOOLOPT: linux__bindgen_ty_7 = 46;
pub const LINUX_IFLA_BR_MCAST_QUERIER_STATE: linux__bindgen_ty_7 = 47;
pub const LINUX_IFLA_BR_FDB_N_LEARNED: linux__bindgen_ty_7 = 48;
pub const LINUX_IFLA_BR_FDB_MAX_LEARNED: linux__bindgen_ty_7 = 49;
pub const LINUX___IFLA_BR_MAX: linux__bindgen_ty_7 = 50;
pub type linux__bindgen_ty_7 = ::core::ffi::c_uint;
pub const LINUX_BRIDGE_MODE_UNSPEC: linux__bindgen_ty_8 = 0;
pub const LINUX_BRIDGE_MODE_HAIRPIN: linux__bindgen_ty_8 = 1;
pub type linux__bindgen_ty_8 = ::core::ffi::c_uint;
pub const LINUX_IFLA_BRPORT_UNSPEC: linux__bindgen_ty_9 = 0;
pub const LINUX_IFLA_BRPORT_STATE: linux__bindgen_ty_9 = 1;
pub const LINUX_IFLA_BRPORT_PRIORITY: linux__bindgen_ty_9 = 2;
pub const LINUX_IFLA_BRPORT_COST: linux__bindgen_ty_9 = 3;
pub const LINUX_IFLA_BRPORT_MODE: linux__bindgen_ty_9 = 4;
pub const LINUX_IFLA_BRPORT_GUARD: linux__bindgen_ty_9 = 5;
pub const LINUX_IFLA_BRPORT_PROTECT: linux__bindgen_ty_9 = 6;
pub const LINUX_IFLA_BRPORT_FAST_LEAVE: linux__bindgen_ty_9 = 7;
pub const LINUX_IFLA_BRPORT_LEARNING: linux__bindgen_ty_9 = 8;
pub const LINUX_IFLA_BRPORT_UNICAST_FLOOD: linux__bindgen_ty_9 = 9;
pub const LINUX_IFLA_BRPORT_PROXYARP: linux__bindgen_ty_9 = 10;
pub const LINUX_IFLA_BRPORT_LEARNING_SYNC: linux__bindgen_ty_9 = 11;
pub const LINUX_IFLA_BRPORT_PROXYARP_WIFI: linux__bindgen_ty_9 = 12;
pub const LINUX_IFLA_BRPORT_ROOT_ID: linux__bindgen_ty_9 = 13;
pub const LINUX_IFLA_BRPORT_BRIDGE_ID: linux__bindgen_ty_9 = 14;
pub const LINUX_IFLA_BRPORT_DESIGNATED_PORT: linux__bindgen_ty_9 = 15;
pub const LINUX_IFLA_BRPORT_DESIGNATED_COST: linux__bindgen_ty_9 = 16;
pub const LINUX_IFLA_BRPORT_ID: linux__bindgen_ty_9 = 17;
pub const LINUX_IFLA_BRPORT_NO: linux__bindgen_ty_9 = 18;
pub const LINUX_IFLA_BRPORT_TOPOLOGY_CHANGE_ACK: linux__bindgen_ty_9 = 19;
pub const LINUX_IFLA_BRPORT_CONFIG_PENDING: linux__bindgen_ty_9 = 20;
pub const LINUX_IFLA_BRPORT_MESSAGE_AGE_TIMER: linux__bindgen_ty_9 = 21;
pub const LINUX_IFLA_BRPORT_FORWARD_DELAY_TIMER: linux__bindgen_ty_9 = 22;
pub const LINUX_IFLA_BRPORT_HOLD_TIMER: linux__bindgen_ty_9 = 23;
pub const LINUX_IFLA_BRPORT_FLUSH: linux__bindgen_ty_9 = 24;
pub const LINUX_IFLA_BRPORT_MULTICAST_ROUTER: linux__bindgen_ty_9 = 25;
pub const LINUX_IFLA_BRPORT_PAD: linux__bindgen_ty_9 = 26;
pub const LINUX_IFLA_BRPORT_MCAST_FLOOD: linux__bindgen_ty_9 = 27;
pub const LINUX_IFLA_BRPORT_MCAST_TO_UCAST: linux__bindgen_ty_9 = 28;
pub const LINUX_IFLA_BRPORT_VLAN_TUNNEL: linux__bindgen_ty_9 = 29;
pub const LINUX_IFLA_BRPORT_BCAST_FLOOD: linux__bindgen_ty_9 = 30;
pub const LINUX_IFLA_BRPORT_GROUP_FWD_MASK: linux__bindgen_ty_9 = 31;
pub const LINUX_IFLA_BRPORT_NEIGH_SUPPRESS: linux__bindgen_ty_9 = 32;
pub const LINUX_IFLA_BRPORT_ISOLATED: linux__bindgen_ty_9 = 33;
pub const LINUX_IFLA_BRPORT_BACKUP_PORT: linux__bindgen_ty_9 = 34;
pub const LINUX_IFLA_BRPORT_MRP_RING_OPEN: linux__bindgen_ty_9 = 35;
pub const LINUX_IFLA_BRPORT_MRP_IN_OPEN: linux__bindgen_ty_9 = 36;
pub const LINUX_IFLA_BRPORT_MCAST_EHT_HOSTS_LIMIT: linux__bindgen_ty_9 = 37;
pub const LINUX_IFLA_BRPORT_MCAST_EHT_HOSTS_CNT: linux__bindgen_ty_9 = 38;
pub const LINUX_IFLA_BRPORT_LOCKED: linux__bindgen_ty_9 = 39;
pub const LINUX_IFLA_BRPORT_MAB: linux__bindgen_ty_9 = 40;
pub const LINUX_IFLA_BRPORT_MCAST_N_GROUPS: linux__bindgen_ty_9 = 41;
pub const LINUX_IFLA_BRPORT_MCAST_MAX_GROUPS: linux__bindgen_ty_9 = 42;
pub const LINUX_IFLA_BRPORT_NEIGH_VLAN_SUPPRESS: linux__bindgen_ty_9 = 43;
pub const LINUX_IFLA_BRPORT_BACKUP_NHID: linux__bindgen_ty_9 = 44;
pub const LINUX___IFLA_BRPORT_MAX: linux__bindgen_ty_9 = 45;
pub type linux__bindgen_ty_9 = ::core::ffi::c_uint;
pub const LINUX_IFLA_INFO_UNSPEC: linux__bindgen_ty_10 = 0;
pub const LINUX_IFLA_INFO_KIND: linux__bindgen_ty_10 = 1;
pub const LINUX_IFLA_INFO_DATA: linux__bindgen_ty_10 = 2;
pub const LINUX_IFLA_INFO_XSTATS: linux__bindgen_ty_10 = 3;
pub const LINUX_IFLA_INFO_SLAVE_KIND: linux__bindgen_ty_10 = 4;
pub const LINUX_IFLA_INFO_SLAVE_DATA: linux__bindgen_ty_10 = 5;
pub const LINUX___IFLA_INFO_MAX: linux__bindgen_ty_10 = 6;
pub type linux__bindgen_ty_10 = ::core::ffi::c_uint;
pub const LINUX_IFLA_VLAN_UNSPEC: linux__bindgen_ty_11 = 0;
pub const LINUX_IFLA_VLAN_ID: linux__bindgen_ty_11 = 1;
pub const LINUX_IFLA_VLAN_FLAGS: linux__bindgen_ty_11 = 2;
pub const LINUX_IFLA_VLAN_EGRESS_QOS: linux__bindgen_ty_11 = 3;
pub const LINUX_IFLA_VLAN_INGRESS_QOS: linux__bindgen_ty_11 = 4;
pub const LINUX_IFLA_VLAN_PROTOCOL: linux__bindgen_ty_11 = 5;
pub const LINUX___IFLA_VLAN_MAX: linux__bindgen_ty_11 = 6;
pub type linux__bindgen_ty_11 = ::core::ffi::c_uint;
pub const LINUX_IFLA_VLAN_QOS_UNSPEC: linux__bindgen_ty_12 = 0;
pub const LINUX_IFLA_VLAN_QOS_MAPPING: linux__bindgen_ty_12 = 1;
pub const LINUX___IFLA_VLAN_QOS_MAX: linux__bindgen_ty_12 = 2;
pub type linux__bindgen_ty_12 = ::core::ffi::c_uint;
pub const LINUX_IFLA_MACVLAN_UNSPEC: linux__bindgen_ty_13 = 0;
pub const LINUX_IFLA_MACVLAN_MODE: linux__bindgen_ty_13 = 1;
pub const LINUX_IFLA_MACVLAN_FLAGS: linux__bindgen_ty_13 = 2;
pub const LINUX_IFLA_MACVLAN_MACADDR_MODE: linux__bindgen_ty_13 = 3;
pub const LINUX_IFLA_MACVLAN_MACADDR: linux__bindgen_ty_13 = 4;
pub const LINUX_IFLA_MACVLAN_MACADDR_DATA: linux__bindgen_ty_13 = 5;
pub const LINUX_IFLA_MACVLAN_MACADDR_COUNT: linux__bindgen_ty_13 = 6;
pub const LINUX_IFLA_MACVLAN_BC_QUEUE_LEN: linux__bindgen_ty_13 = 7;
pub const LINUX_IFLA_MACVLAN_BC_QUEUE_LEN_USED: linux__bindgen_ty_13 = 8;
pub const LINUX_IFLA_MACVLAN_BC_CUTOFF: linux__bindgen_ty_13 = 9;
pub const LINUX___IFLA_MACVLAN_MAX: linux__bindgen_ty_13 = 10;
pub type linux__bindgen_ty_13 = ::core::ffi::c_uint;
pub const LINUX_IFLA_VRF_UNSPEC: linux__bindgen_ty_14 = 0;
pub const LINUX_IFLA_VRF_TABLE: linux__bindgen_ty_14 = 1;
pub const LINUX___IFLA_VRF_MAX: linux__bindgen_ty_14 = 2;
pub type linux__bindgen_ty_14 = ::core::ffi::c_uint;
pub const LINUX_IFLA_VRF_PORT_UNSPEC: linux__bindgen_ty_15 = 0;
pub const LINUX_IFLA_VRF_PORT_TABLE: linux__bindgen_ty_15 = 1;
pub const LINUX___IFLA_VRF_PORT_MAX: linux__bindgen_ty_15 = 2;
pub type linux__bindgen_ty_15 = ::core::ffi::c_uint;
pub const LINUX_IFLA_MACSEC_UNSPEC: linux__bindgen_ty_16 = 0;
pub const LINUX_IFLA_MACSEC_SCI: linux__bindgen_ty_16 = 1;
pub const LINUX_IFLA_MACSEC_PORT: linux__bindgen_ty_16 = 2;
pub const LINUX_IFLA_MACSEC_ICV_LEN: linux__bindgen_ty_16 = 3;
pub const LINUX_IFLA_MACSEC_CIPHER_SUITE: linux__bindgen_ty_16 = 4;
pub const LINUX_IFLA_MACSEC_WINDOW: linux__bindgen_ty_16 = 5;
pub const LINUX_IFLA_MACSEC_ENCODING_SA: linux__bindgen_ty_16 = 6;
pub const LINUX_IFLA_MACSEC_ENCRYPT: linux__bindgen_ty_16 = 7;
pub const LINUX_IFLA_MACSEC_PROTECT: linux__bindgen_ty_16 = 8;
pub const LINUX_IFLA_MACSEC_INC_SCI: linux__bindgen_ty_16 = 9;
pub const LINUX_IFLA_MACSEC_ES: linux__bindgen_ty_16 = 10;
pub const LINUX_IFLA_MACSEC_SCB: linux__bindgen_ty_16 = 11;
pub const LINUX_IFLA_MACSEC_REPLAY_PROTECT: linux__bindgen_ty_16 = 12;
pub const LINUX_IFLA_MACSEC_VALIDATION: linux__bindgen_ty_16 = 13;
pub const LINUX_IFLA_MACSEC_PAD: linux__bindgen_ty_16 = 14;
pub const LINUX_IFLA_MACSEC_OFFLOAD: linux__bindgen_ty_16 = 15;
pub const LINUX___IFLA_MACSEC_MAX: linux__bindgen_ty_16 = 16;
pub type linux__bindgen_ty_16 = ::core::ffi::c_uint;
pub const LINUX_IFLA_XFRM_UNSPEC: linux__bindgen_ty_17 = 0;
pub const LINUX_IFLA_XFRM_LINK: linux__bindgen_ty_17 = 1;
pub const LINUX_IFLA_XFRM_IF_ID: linux__bindgen_ty_17 = 2;
pub const LINUX_IFLA_XFRM_COLLECT_METADATA: linux__bindgen_ty_17 = 3;
pub const LINUX___IFLA_XFRM_MAX: linux__bindgen_ty_17 = 4;
pub type linux__bindgen_ty_17 = ::core::ffi::c_uint;
pub const LINUX_IFLA_IPVLAN_UNSPEC: linux__bindgen_ty_18 = 0;
pub const LINUX_IFLA_IPVLAN_MODE: linux__bindgen_ty_18 = 1;
pub const LINUX_IFLA_IPVLAN_FLAGS: linux__bindgen_ty_18 = 2;
pub const LINUX___IFLA_IPVLAN_MAX: linux__bindgen_ty_18 = 3;
pub type linux__bindgen_ty_18 = ::core::ffi::c_uint;
pub const LINUX_IFLA_NETKIT_UNSPEC: linux__bindgen_ty_19 = 0;
pub const LINUX_IFLA_NETKIT_PEER_INFO: linux__bindgen_ty_19 = 1;
pub const LINUX_IFLA_NETKIT_PRIMARY: linux__bindgen_ty_19 = 2;
pub const LINUX_IFLA_NETKIT_POLICY: linux__bindgen_ty_19 = 3;
pub const LINUX_IFLA_NETKIT_PEER_POLICY: linux__bindgen_ty_19 = 4;
pub const LINUX_IFLA_NETKIT_MODE: linux__bindgen_ty_19 = 5;
pub const LINUX___IFLA_NETKIT_MAX: linux__bindgen_ty_19 = 6;
pub type linux__bindgen_ty_19 = ::core::ffi::c_uint;
pub const LINUX_VNIFILTER_ENTRY_STATS_UNSPEC: linux__bindgen_ty_20 = 0;
pub const LINUX_VNIFILTER_ENTRY_STATS_RX_BYTES: linux__bindgen_ty_20 = 1;
pub const LINUX_VNIFILTER_ENTRY_STATS_RX_PKTS: linux__bindgen_ty_20 = 2;
pub const LINUX_VNIFILTER_ENTRY_STATS_RX_DROPS: linux__bindgen_ty_20 = 3;
pub const LINUX_VNIFILTER_ENTRY_STATS_RX_ERRORS: linux__bindgen_ty_20 = 4;
pub const LINUX_VNIFILTER_ENTRY_STATS_TX_BYTES: linux__bindgen_ty_20 = 5;
pub const LINUX_VNIFILTER_ENTRY_STATS_TX_PKTS: linux__bindgen_ty_20 = 6;
pub const LINUX_VNIFILTER_ENTRY_STATS_TX_DROPS: linux__bindgen_ty_20 = 7;
pub const LINUX_VNIFILTER_ENTRY_STATS_TX_ERRORS: linux__bindgen_ty_20 = 8;
pub const LINUX_VNIFILTER_ENTRY_STATS_PAD: linux__bindgen_ty_20 = 9;
pub const LINUX___VNIFILTER_ENTRY_STATS_MAX: linux__bindgen_ty_20 = 10;
pub type linux__bindgen_ty_20 = ::core::ffi::c_uint;
pub const LINUX_VXLAN_VNIFILTER_ENTRY_UNSPEC: linux__bindgen_ty_21 = 0;
pub const LINUX_VXLAN_VNIFILTER_ENTRY_START: linux__bindgen_ty_21 = 1;
pub const LINUX_VXLAN_VNIFILTER_ENTRY_END: linux__bindgen_ty_21 = 2;
pub const LINUX_VXLAN_VNIFILTER_ENTRY_GROUP: linux__bindgen_ty_21 = 3;
pub const LINUX_VXLAN_VNIFILTER_ENTRY_GROUP6: linux__bindgen_ty_21 = 4;
pub const LINUX_VXLAN_VNIFILTER_ENTRY_STATS: linux__bindgen_ty_21 = 5;
pub const LINUX___VXLAN_VNIFILTER_ENTRY_MAX: linux__bindgen_ty_21 = 6;
pub type linux__bindgen_ty_21 = ::core::ffi::c_uint;
pub const LINUX_VXLAN_VNIFILTER_UNSPEC: linux__bindgen_ty_22 = 0;
pub const LINUX_VXLAN_VNIFILTER_ENTRY: linux__bindgen_ty_22 = 1;
pub const LINUX___VXLAN_VNIFILTER_MAX: linux__bindgen_ty_22 = 2;
pub type linux__bindgen_ty_22 = ::core::ffi::c_uint;
pub const LINUX_IFLA_VXLAN_UNSPEC: linux__bindgen_ty_23 = 0;
pub const LINUX_IFLA_VXLAN_ID: linux__bindgen_ty_23 = 1;
pub const LINUX_IFLA_VXLAN_GROUP: linux__bindgen_ty_23 = 2;
pub const LINUX_IFLA_VXLAN_LINK: linux__bindgen_ty_23 = 3;
pub const LINUX_IFLA_VXLAN_LOCAL: linux__bindgen_ty_23 = 4;
pub const LINUX_IFLA_VXLAN_TTL: linux__bindgen_ty_23 = 5;
pub const LINUX_IFLA_VXLAN_TOS: linux__bindgen_ty_23 = 6;
pub const LINUX_IFLA_VXLAN_LEARNING: linux__bindgen_ty_23 = 7;
pub const LINUX_IFLA_VXLAN_AGEING: linux__bindgen_ty_23 = 8;
pub const LINUX_IFLA_VXLAN_LIMIT: linux__bindgen_ty_23 = 9;
pub const LINUX_IFLA_VXLAN_PORT_RANGE: linux__bindgen_ty_23 = 10;
pub const LINUX_IFLA_VXLAN_PROXY: linux__bindgen_ty_23 = 11;
pub const LINUX_IFLA_VXLAN_RSC: linux__bindgen_ty_23 = 12;
pub const LINUX_IFLA_VXLAN_L2MISS: linux__bindgen_ty_23 = 13;
pub const LINUX_IFLA_VXLAN_L3MISS: linux__bindgen_ty_23 = 14;
pub const LINUX_IFLA_VXLAN_PORT: linux__bindgen_ty_23 = 15;
pub const LINUX_IFLA_VXLAN_GROUP6: linux__bindgen_ty_23 = 16;
pub const LINUX_IFLA_VXLAN_LOCAL6: linux__bindgen_ty_23 = 17;
pub const LINUX_IFLA_VXLAN_UDP_CSUM: linux__bindgen_ty_23 = 18;
pub const LINUX_IFLA_VXLAN_UDP_ZERO_CSUM6_TX: linux__bindgen_ty_23 = 19;
pub const LINUX_IFLA_VXLAN_UDP_ZERO_CSUM6_RX: linux__bindgen_ty_23 = 20;
pub const LINUX_IFLA_VXLAN_REMCSUM_TX: linux__bindgen_ty_23 = 21;
pub const LINUX_IFLA_VXLAN_REMCSUM_RX: linux__bindgen_ty_23 = 22;
pub const LINUX_IFLA_VXLAN_GBP: linux__bindgen_ty_23 = 23;
pub const LINUX_IFLA_VXLAN_REMCSUM_NOPARTIAL: linux__bindgen_ty_23 = 24;
pub const LINUX_IFLA_VXLAN_COLLECT_METADATA: linux__bindgen_ty_23 = 25;
pub const LINUX_IFLA_VXLAN_LABEL: linux__bindgen_ty_23 = 26;
pub const LINUX_IFLA_VXLAN_GPE: linux__bindgen_ty_23 = 27;
pub const LINUX_IFLA_VXLAN_TTL_INHERIT: linux__bindgen_ty_23 = 28;
pub const LINUX_IFLA_VXLAN_DF: linux__bindgen_ty_23 = 29;
pub const LINUX_IFLA_VXLAN_VNIFILTER: linux__bindgen_ty_23 = 30;
pub const LINUX_IFLA_VXLAN_LOCALBYPASS: linux__bindgen_ty_23 = 31;
pub const LINUX_IFLA_VXLAN_LABEL_POLICY: linux__bindgen_ty_23 = 32;
pub const LINUX___IFLA_VXLAN_MAX: linux__bindgen_ty_23 = 33;
pub type linux__bindgen_ty_23 = ::core::ffi::c_uint;
pub const LINUX_IFLA_GENEVE_UNSPEC: linux__bindgen_ty_24 = 0;
pub const LINUX_IFLA_GENEVE_ID: linux__bindgen_ty_24 = 1;
pub const LINUX_IFLA_GENEVE_REMOTE: linux__bindgen_ty_24 = 2;
pub const LINUX_IFLA_GENEVE_TTL: linux__bindgen_ty_24 = 3;
pub const LINUX_IFLA_GENEVE_TOS: linux__bindgen_ty_24 = 4;
pub const LINUX_IFLA_GENEVE_PORT: linux__bindgen_ty_24 = 5;
pub const LINUX_IFLA_GENEVE_COLLECT_METADATA: linux__bindgen_ty_24 = 6;
pub const LINUX_IFLA_GENEVE_REMOTE6: linux__bindgen_ty_24 = 7;
pub const LINUX_IFLA_GENEVE_UDP_CSUM: linux__bindgen_ty_24 = 8;
pub const LINUX_IFLA_GENEVE_UDP_ZERO_CSUM6_TX: linux__bindgen_ty_24 = 9;
pub const LINUX_IFLA_GENEVE_UDP_ZERO_CSUM6_RX: linux__bindgen_ty_24 = 10;
pub const LINUX_IFLA_GENEVE_LABEL: linux__bindgen_ty_24 = 11;
pub const LINUX_IFLA_GENEVE_TTL_INHERIT: linux__bindgen_ty_24 = 12;
pub const LINUX_IFLA_GENEVE_DF: linux__bindgen_ty_24 = 13;
pub const LINUX_IFLA_GENEVE_INNER_PROTO_INHERIT: linux__bindgen_ty_24 = 14;
pub const LINUX___IFLA_GENEVE_MAX: linux__bindgen_ty_24 = 15;
pub type linux__bindgen_ty_24 = ::core::ffi::c_uint;
pub const LINUX_IFLA_BAREUDP_UNSPEC: linux__bindgen_ty_25 = 0;
pub const LINUX_IFLA_BAREUDP_PORT: linux__bindgen_ty_25 = 1;
pub const LINUX_IFLA_BAREUDP_ETHERTYPE: linux__bindgen_ty_25 = 2;
pub const LINUX_IFLA_BAREUDP_SRCPORT_MIN: linux__bindgen_ty_25 = 3;
pub const LINUX_IFLA_BAREUDP_MULTIPROTO_MODE: linux__bindgen_ty_25 = 4;
pub const LINUX___IFLA_BAREUDP_MAX: linux__bindgen_ty_25 = 5;
pub type linux__bindgen_ty_25 = ::core::ffi::c_uint;
pub const LINUX_IFLA_PPP_UNSPEC: linux__bindgen_ty_26 = 0;
pub const LINUX_IFLA_PPP_DEV_FD: linux__bindgen_ty_26 = 1;
pub const LINUX___IFLA_PPP_MAX: linux__bindgen_ty_26 = 2;
pub type linux__bindgen_ty_26 = ::core::ffi::c_uint;
pub const LINUX_IFLA_GTP_UNSPEC: linux__bindgen_ty_27 = 0;
pub const LINUX_IFLA_GTP_FD0: linux__bindgen_ty_27 = 1;
pub const LINUX_IFLA_GTP_FD1: linux__bindgen_ty_27 = 2;
pub const LINUX_IFLA_GTP_PDP_HASHSIZE: linux__bindgen_ty_27 = 3;
pub const LINUX_IFLA_GTP_ROLE: linux__bindgen_ty_27 = 4;
pub const LINUX_IFLA_GTP_CREATE_SOCKETS: linux__bindgen_ty_27 = 5;
pub const LINUX_IFLA_GTP_RESTART_COUNT: linux__bindgen_ty_27 = 6;
pub const LINUX_IFLA_GTP_LOCAL: linux__bindgen_ty_27 = 7;
pub const LINUX_IFLA_GTP_LOCAL6: linux__bindgen_ty_27 = 8;
pub const LINUX___IFLA_GTP_MAX: linux__bindgen_ty_27 = 9;
pub type linux__bindgen_ty_27 = ::core::ffi::c_uint;
pub const LINUX_IFLA_BOND_UNSPEC: linux__bindgen_ty_28 = 0;
pub const LINUX_IFLA_BOND_MODE: linux__bindgen_ty_28 = 1;
pub const LINUX_IFLA_BOND_ACTIVE_SLAVE: linux__bindgen_ty_28 = 2;
pub const LINUX_IFLA_BOND_MIIMON: linux__bindgen_ty_28 = 3;
pub const LINUX_IFLA_BOND_UPDELAY: linux__bindgen_ty_28 = 4;
pub const LINUX_IFLA_BOND_DOWNDELAY: linux__bindgen_ty_28 = 5;
pub const LINUX_IFLA_BOND_USE_CARRIER: linux__bindgen_ty_28 = 6;
pub const LINUX_IFLA_BOND_ARP_INTERVAL: linux__bindgen_ty_28 = 7;
pub const LINUX_IFLA_BOND_ARP_IP_TARGET: linux__bindgen_ty_28 = 8;
pub const LINUX_IFLA_BOND_ARP_VALIDATE: linux__bindgen_ty_28 = 9;
pub const LINUX_IFLA_BOND_ARP_ALL_TARGETS: linux__bindgen_ty_28 = 10;
pub const LINUX_IFLA_BOND_PRIMARY: linux__bindgen_ty_28 = 11;
pub const LINUX_IFLA_BOND_PRIMARY_RESELECT: linux__bindgen_ty_28 = 12;
pub const LINUX_IFLA_BOND_FAIL_OVER_MAC: linux__bindgen_ty_28 = 13;
pub const LINUX_IFLA_BOND_XMIT_HASH_POLICY: linux__bindgen_ty_28 = 14;
pub const LINUX_IFLA_BOND_RESEND_IGMP: linux__bindgen_ty_28 = 15;
pub const LINUX_IFLA_BOND_NUM_PEER_NOTIF: linux__bindgen_ty_28 = 16;
pub const LINUX_IFLA_BOND_ALL_SLAVES_ACTIVE: linux__bindgen_ty_28 = 17;
pub const LINUX_IFLA_BOND_MIN_LINKS: linux__bindgen_ty_28 = 18;
pub const LINUX_IFLA_BOND_LP_INTERVAL: linux__bindgen_ty_28 = 19;
pub const LINUX_IFLA_BOND_PACKETS_PER_SLAVE: linux__bindgen_ty_28 = 20;
pub const LINUX_IFLA_BOND_AD_LACP_RATE: linux__bindgen_ty_28 = 21;
pub const LINUX_IFLA_BOND_AD_SELECT: linux__bindgen_ty_28 = 22;
pub const LINUX_IFLA_BOND_AD_INFO: linux__bindgen_ty_28 = 23;
pub const LINUX_IFLA_BOND_AD_ACTOR_SYS_PRIO: linux__bindgen_ty_28 = 24;
pub const LINUX_IFLA_BOND_AD_USER_PORT_KEY: linux__bindgen_ty_28 = 25;
pub const LINUX_IFLA_BOND_AD_ACTOR_SYSTEM: linux__bindgen_ty_28 = 26;
pub const LINUX_IFLA_BOND_TLB_DYNAMIC_LB: linux__bindgen_ty_28 = 27;
pub const LINUX_IFLA_BOND_PEER_NOTIF_DELAY: linux__bindgen_ty_28 = 28;
pub const LINUX_IFLA_BOND_AD_LACP_ACTIVE: linux__bindgen_ty_28 = 29;
pub const LINUX_IFLA_BOND_MISSED_MAX: linux__bindgen_ty_28 = 30;
pub const LINUX_IFLA_BOND_NS_IP6_TARGET: linux__bindgen_ty_28 = 31;
pub const LINUX_IFLA_BOND_COUPLED_CONTROL: linux__bindgen_ty_28 = 32;
pub const LINUX___IFLA_BOND_MAX: linux__bindgen_ty_28 = 33;
pub type linux__bindgen_ty_28 = ::core::ffi::c_uint;
pub const LINUX_IFLA_BOND_AD_INFO_UNSPEC: linux__bindgen_ty_29 = 0;
pub const LINUX_IFLA_BOND_AD_INFO_AGGREGATOR: linux__bindgen_ty_29 = 1;
pub const LINUX_IFLA_BOND_AD_INFO_NUM_PORTS: linux__bindgen_ty_29 = 2;
pub const LINUX_IFLA_BOND_AD_INFO_ACTOR_KEY: linux__bindgen_ty_29 = 3;
pub const LINUX_IFLA_BOND_AD_INFO_PARTNER_KEY: linux__bindgen_ty_29 = 4;
pub const LINUX_IFLA_BOND_AD_INFO_PARTNER_MAC: linux__bindgen_ty_29 = 5;
pub const LINUX___IFLA_BOND_AD_INFO_MAX: linux__bindgen_ty_29 = 6;
pub type linux__bindgen_ty_29 = ::core::ffi::c_uint;
pub const LINUX_IFLA_BOND_SLAVE_UNSPEC: linux__bindgen_ty_30 = 0;
pub const LINUX_IFLA_BOND_SLAVE_STATE: linux__bindgen_ty_30 = 1;
pub const LINUX_IFLA_BOND_SLAVE_MII_STATUS: linux__bindgen_ty_30 = 2;
pub const LINUX_IFLA_BOND_SLAVE_LINK_FAILURE_COUNT: linux__bindgen_ty_30 = 3;
pub const LINUX_IFLA_BOND_SLAVE_PERM_HWADDR: linux__bindgen_ty_30 = 4;
pub const LINUX_IFLA_BOND_SLAVE_QUEUE_ID: linux__bindgen_ty_30 = 5;
pub const LINUX_IFLA_BOND_SLAVE_AD_AGGREGATOR_ID: linux__bindgen_ty_30 = 6;
pub const LINUX_IFLA_BOND_SLAVE_AD_ACTOR_OPER_PORT_STATE: linux__bindgen_ty_30 = 7;
pub const LINUX_IFLA_BOND_SLAVE_AD_PARTNER_OPER_PORT_STATE: linux__bindgen_ty_30 = 8;
pub const LINUX_IFLA_BOND_SLAVE_PRIO: linux__bindgen_ty_30 = 9;
pub const LINUX___IFLA_BOND_SLAVE_MAX: linux__bindgen_ty_30 = 10;
pub type linux__bindgen_ty_30 = ::core::ffi::c_uint;
pub const LINUX_IFLA_VF_INFO_UNSPEC: linux__bindgen_ty_31 = 0;
pub const LINUX_IFLA_VF_INFO: linux__bindgen_ty_31 = 1;
pub const LINUX___IFLA_VF_INFO_MAX: linux__bindgen_ty_31 = 2;
pub type linux__bindgen_ty_31 = ::core::ffi::c_uint;
pub const LINUX_IFLA_VF_UNSPEC: linux__bindgen_ty_32 = 0;
pub const LINUX_IFLA_VF_MAC: linux__bindgen_ty_32 = 1;
pub const LINUX_IFLA_VF_VLAN: linux__bindgen_ty_32 = 2;
pub const LINUX_IFLA_VF_TX_RATE: linux__bindgen_ty_32 = 3;
pub const LINUX_IFLA_VF_SPOOFCHK: linux__bindgen_ty_32 = 4;
pub const LINUX_IFLA_VF_LINK_STATE: linux__bindgen_ty_32 = 5;
pub const LINUX_IFLA_VF_RATE: linux__bindgen_ty_32 = 6;
pub const LINUX_IFLA_VF_RSS_QUERY_EN: linux__bindgen_ty_32 = 7;
pub const LINUX_IFLA_VF_STATS: linux__bindgen_ty_32 = 8;
pub const LINUX_IFLA_VF_TRUST: linux__bindgen_ty_32 = 9;
pub const LINUX_IFLA_VF_IB_NODE_GUID: linux__bindgen_ty_32 = 10;
pub const LINUX_IFLA_VF_IB_PORT_GUID: linux__bindgen_ty_32 = 11;
pub const LINUX_IFLA_VF_VLAN_LIST: linux__bindgen_ty_32 = 12;
pub const LINUX_IFLA_VF_BROADCAST: linux__bindgen_ty_32 = 13;
pub const LINUX___IFLA_VF_MAX: linux__bindgen_ty_32 = 14;
pub type linux__bindgen_ty_32 = ::core::ffi::c_uint;
pub const LINUX_IFLA_VF_VLAN_INFO_UNSPEC: linux__bindgen_ty_33 = 0;
pub const LINUX_IFLA_VF_VLAN_INFO: linux__bindgen_ty_33 = 1;
pub const LINUX___IFLA_VF_VLAN_INFO_MAX: linux__bindgen_ty_33 = 2;
pub type linux__bindgen_ty_33 = ::core::ffi::c_uint;
pub const LINUX_IFLA_VF_LINK_STATE_AUTO: linux__bindgen_ty_34 = 0;
pub const LINUX_IFLA_VF_LINK_STATE_ENABLE: linux__bindgen_ty_34 = 1;
pub const LINUX_IFLA_VF_LINK_STATE_DISABLE: linux__bindgen_ty_34 = 2;
pub const LINUX___IFLA_VF_LINK_STATE_MAX: linux__bindgen_ty_34 = 3;
pub type linux__bindgen_ty_34 = ::core::ffi::c_uint;
pub const LINUX_IFLA_VF_STATS_RX_PACKETS: linux__bindgen_ty_35 = 0;
pub const LINUX_IFLA_VF_STATS_TX_PACKETS: linux__bindgen_ty_35 = 1;
pub const LINUX_IFLA_VF_STATS_RX_BYTES: linux__bindgen_ty_35 = 2;
pub const LINUX_IFLA_VF_STATS_TX_BYTES: linux__bindgen_ty_35 = 3;
pub const LINUX_IFLA_VF_STATS_BROADCAST: linux__bindgen_ty_35 = 4;
pub const LINUX_IFLA_VF_STATS_MULTICAST: linux__bindgen_ty_35 = 5;
pub const LINUX_IFLA_VF_STATS_PAD: linux__bindgen_ty_35 = 6;
pub const LINUX_IFLA_VF_STATS_RX_DROPPED: linux__bindgen_ty_35 = 7;
pub const LINUX_IFLA_VF_STATS_TX_DROPPED: linux__bindgen_ty_35 = 8;
pub const LINUX___IFLA_VF_STATS_MAX: linux__bindgen_ty_35 = 9;
pub type linux__bindgen_ty_35 = ::core::ffi::c_uint;
pub const LINUX_IFLA_VF_PORT_UNSPEC: linux__bindgen_ty_36 = 0;
pub const LINUX_IFLA_VF_PORT: linux__bindgen_ty_36 = 1;
pub const LINUX___IFLA_VF_PORT_MAX: linux__bindgen_ty_36 = 2;
pub type linux__bindgen_ty_36 = ::core::ffi::c_uint;
pub const LINUX_IFLA_PORT_UNSPEC: linux__bindgen_ty_37 = 0;
pub const LINUX_IFLA_PORT_VF: linux__bindgen_ty_37 = 1;
pub const LINUX_IFLA_PORT_PROFILE: linux__bindgen_ty_37 = 2;
pub const LINUX_IFLA_PORT_VSI_TYPE: linux__bindgen_ty_37 = 3;
pub const LINUX_IFLA_PORT_INSTANCE_UUID: linux__bindgen_ty_37 = 4;
pub const LINUX_IFLA_PORT_HOST_UUID: linux__bindgen_ty_37 = 5;
pub const LINUX_IFLA_PORT_REQUEST: linux__bindgen_ty_37 = 6;
pub const LINUX_IFLA_PORT_RESPONSE: linux__bindgen_ty_37 = 7;
pub const LINUX___IFLA_PORT_MAX: linux__bindgen_ty_37 = 8;
pub type linux__bindgen_ty_37 = ::core::ffi::c_uint;
pub const LINUX_PORT_REQUEST_PREASSOCIATE: linux__bindgen_ty_38 = 0;
pub const LINUX_PORT_REQUEST_PREASSOCIATE_RR: linux__bindgen_ty_38 = 1;
pub const LINUX_PORT_REQUEST_ASSOCIATE: linux__bindgen_ty_38 = 2;
pub const LINUX_PORT_REQUEST_DISASSOCIATE: linux__bindgen_ty_38 = 3;
pub type linux__bindgen_ty_38 = ::core::ffi::c_uint;
pub const LINUX_PORT_VDP_RESPONSE_SUCCESS: linux__bindgen_ty_39 = 0;
pub const LINUX_PORT_VDP_RESPONSE_INVALID_FORMAT: linux__bindgen_ty_39 = 1;
pub const LINUX_PORT_VDP_RESPONSE_INSUFFICIENT_RESOURCES: linux__bindgen_ty_39 = 2;
pub const LINUX_PORT_VDP_RESPONSE_UNUSED_VTID: linux__bindgen_ty_39 = 3;
pub const LINUX_PORT_VDP_RESPONSE_VTID_VIOLATION: linux__bindgen_ty_39 = 4;
pub const LINUX_PORT_VDP_RESPONSE_VTID_VERSION_VIOALTION: linux__bindgen_ty_39 = 5;
pub const LINUX_PORT_VDP_RESPONSE_OUT_OF_SYNC: linux__bindgen_ty_39 = 6;
pub const LINUX_PORT_PROFILE_RESPONSE_SUCCESS: linux__bindgen_ty_39 = 256;
pub const LINUX_PORT_PROFILE_RESPONSE_INPROGRESS: linux__bindgen_ty_39 = 257;
pub const LINUX_PORT_PROFILE_RESPONSE_INVALID: linux__bindgen_ty_39 = 258;
pub const LINUX_PORT_PROFILE_RESPONSE_BADSTATE: linux__bindgen_ty_39 = 259;
pub const LINUX_PORT_PROFILE_RESPONSE_INSUFFICIENT_RESOURCES: linux__bindgen_ty_39 = 260;
pub const LINUX_PORT_PROFILE_RESPONSE_ERROR: linux__bindgen_ty_39 = 261;
pub type linux__bindgen_ty_39 = ::core::ffi::c_uint;
pub const LINUX_IFLA_IPOIB_UNSPEC: linux__bindgen_ty_40 = 0;
pub const LINUX_IFLA_IPOIB_PKEY: linux__bindgen_ty_40 = 1;
pub const LINUX_IFLA_IPOIB_MODE: linux__bindgen_ty_40 = 2;
pub const LINUX_IFLA_IPOIB_UMCAST: linux__bindgen_ty_40 = 3;
pub const LINUX___IFLA_IPOIB_MAX: linux__bindgen_ty_40 = 4;
pub type linux__bindgen_ty_40 = ::core::ffi::c_uint;
pub const LINUX_IPOIB_MODE_DATAGRAM: linux__bindgen_ty_41 = 0;
pub const LINUX_IPOIB_MODE_CONNECTED: linux__bindgen_ty_41 = 1;
pub type linux__bindgen_ty_41 = ::core::ffi::c_uint;
pub const LINUX_HSR_PROTOCOL_HSR: linux__bindgen_ty_42 = 0;
pub const LINUX_HSR_PROTOCOL_PRP: linux__bindgen_ty_42 = 1;
pub const LINUX_HSR_PROTOCOL_MAX: linux__bindgen_ty_42 = 2;
pub type linux__bindgen_ty_42 = ::core::ffi::c_uint;
pub const LINUX_IFLA_HSR_UNSPEC: linux__bindgen_ty_43 = 0;
pub const LINUX_IFLA_HSR_SLAVE1: linux__bindgen_ty_43 = 1;
pub const LINUX_IFLA_HSR_SLAVE2: linux__bindgen_ty_43 = 2;
pub const LINUX_IFLA_HSR_MULTICAST_SPEC: linux__bindgen_ty_43 = 3;
pub const LINUX_IFLA_HSR_SUPERVISION_ADDR: linux__bindgen_ty_43 = 4;
pub const LINUX_IFLA_HSR_SEQ_NR: linux__bindgen_ty_43 = 5;
pub const LINUX_IFLA_HSR_VERSION: linux__bindgen_ty_43 = 6;
pub const LINUX_IFLA_HSR_PROTOCOL: linux__bindgen_ty_43 = 7;
pub const LINUX_IFLA_HSR_INTERLINK: linux__bindgen_ty_43 = 8;
pub const LINUX___IFLA_HSR_MAX: linux__bindgen_ty_43 = 9;
pub type linux__bindgen_ty_43 = ::core::ffi::c_uint;
pub const LINUX_IFLA_STATS_UNSPEC: linux__bindgen_ty_44 = 0;
pub const LINUX_IFLA_STATS_LINK_64: linux__bindgen_ty_44 = 1;
pub const LINUX_IFLA_STATS_LINK_XSTATS: linux__bindgen_ty_44 = 2;
pub const LINUX_IFLA_STATS_LINK_XSTATS_SLAVE: linux__bindgen_ty_44 = 3;
pub const LINUX_IFLA_STATS_LINK_OFFLOAD_XSTATS: linux__bindgen_ty_44 = 4;
pub const LINUX_IFLA_STATS_AF_SPEC: linux__bindgen_ty_44 = 5;
pub const LINUX___IFLA_STATS_MAX: linux__bindgen_ty_44 = 6;
pub type linux__bindgen_ty_44 = ::core::ffi::c_uint;
pub const LINUX_IFLA_STATS_GETSET_UNSPEC: linux__bindgen_ty_45 = 0;
pub const LINUX_IFLA_STATS_GET_FILTERS: linux__bindgen_ty_45 = 1;
pub const LINUX_IFLA_STATS_SET_OFFLOAD_XSTATS_L3_STATS: linux__bindgen_ty_45 = 2;
pub const LINUX___IFLA_STATS_GETSET_MAX: linux__bindgen_ty_45 = 3;
pub type linux__bindgen_ty_45 = ::core::ffi::c_uint;
pub const LINUX_LINK_XSTATS_TYPE_UNSPEC: linux__bindgen_ty_46 = 0;
pub const LINUX_LINK_XSTATS_TYPE_BRIDGE: linux__bindgen_ty_46 = 1;
pub const LINUX_LINK_XSTATS_TYPE_BOND: linux__bindgen_ty_46 = 2;
pub const LINUX___LINK_XSTATS_TYPE_MAX: linux__bindgen_ty_46 = 3;
pub type linux__bindgen_ty_46 = ::core::ffi::c_uint;
pub const LINUX_IFLA_OFFLOAD_XSTATS_UNSPEC: linux__bindgen_ty_47 = 0;
pub const LINUX_IFLA_OFFLOAD_XSTATS_CPU_HIT: linux__bindgen_ty_47 = 1;
pub const LINUX_IFLA_OFFLOAD_XSTATS_HW_S_INFO: linux__bindgen_ty_47 = 2;
pub const LINUX_IFLA_OFFLOAD_XSTATS_L3_STATS: linux__bindgen_ty_47 = 3;
pub const LINUX___IFLA_OFFLOAD_XSTATS_MAX: linux__bindgen_ty_47 = 4;
pub type linux__bindgen_ty_47 = ::core::ffi::c_uint;
pub const LINUX_IFLA_OFFLOAD_XSTATS_HW_S_INFO_UNSPEC: linux__bindgen_ty_48 = 0;
pub const LINUX_IFLA_OFFLOAD_XSTATS_HW_S_INFO_REQUEST: linux__bindgen_ty_48 = 1;
pub const LINUX_IFLA_OFFLOAD_XSTATS_HW_S_INFO_USED: linux__bindgen_ty_48 = 2;
pub const LINUX___IFLA_OFFLOAD_XSTATS_HW_S_INFO_MAX: linux__bindgen_ty_48 = 3;
pub type linux__bindgen_ty_48 = ::core::ffi::c_uint;
pub const LINUX_XDP_ATTACHED_NONE: linux__bindgen_ty_49 = 0;
pub const LINUX_XDP_ATTACHED_DRV: linux__bindgen_ty_49 = 1;
pub const LINUX_XDP_ATTACHED_SKB: linux__bindgen_ty_49 = 2;
pub const LINUX_XDP_ATTACHED_HW: linux__bindgen_ty_49 = 3;
pub const LINUX_XDP_ATTACHED_MULTI: linux__bindgen_ty_49 = 4;
pub type linux__bindgen_ty_49 = ::core::ffi::c_uint;
pub const LINUX_IFLA_XDP_UNSPEC: linux__bindgen_ty_50 = 0;
pub const LINUX_IFLA_XDP_FD: linux__bindgen_ty_50 = 1;
pub const LINUX_IFLA_XDP_ATTACHED: linux__bindgen_ty_50 = 2;
pub const LINUX_IFLA_XDP_FLAGS: linux__bindgen_ty_50 = 3;
pub const LINUX_IFLA_XDP_PROG_ID: linux__bindgen_ty_50 = 4;
pub const LINUX_IFLA_XDP_DRV_PROG_ID: linux__bindgen_ty_50 = 5;
pub const LINUX_IFLA_XDP_SKB_PROG_ID: linux__bindgen_ty_50 = 6;
pub const LINUX_IFLA_XDP_HW_PROG_ID: linux__bindgen_ty_50 = 7;
pub const LINUX_IFLA_XDP_EXPECTED_FD: linux__bindgen_ty_50 = 8;
pub const LINUX___IFLA_XDP_MAX: linux__bindgen_ty_50 = 9;
pub type linux__bindgen_ty_50 = ::core::ffi::c_uint;
pub const LINUX_IFLA_EVENT_NONE: linux__bindgen_ty_51 = 0;
pub const LINUX_IFLA_EVENT_REBOOT: linux__bindgen_ty_51 = 1;
pub const LINUX_IFLA_EVENT_FEATURES: linux__bindgen_ty_51 = 2;
pub const LINUX_IFLA_EVENT_BONDING_FAILOVER: linux__bindgen_ty_51 = 3;
pub const LINUX_IFLA_EVENT_NOTIFY_PEERS: linux__bindgen_ty_51 = 4;
pub const LINUX_IFLA_EVENT_IGMP_RESEND: linux__bindgen_ty_51 = 5;
pub const LINUX_IFLA_EVENT_BONDING_OPTIONS: linux__bindgen_ty_51 = 6;
pub type linux__bindgen_ty_51 = ::core::ffi::c_uint;
pub const LINUX_IFLA_TUN_UNSPEC: linux__bindgen_ty_52 = 0;
pub const LINUX_IFLA_TUN_OWNER: linux__bindgen_ty_52 = 1;
pub const LINUX_IFLA_TUN_GROUP: linux__bindgen_ty_52 = 2;
pub const LINUX_IFLA_TUN_TYPE: linux__bindgen_ty_52 = 3;
pub const LINUX_IFLA_TUN_PI: linux__bindgen_ty_52 = 4;
pub const LINUX_IFLA_TUN_VNET_HDR: linux__bindgen_ty_52 = 5;
pub const LINUX_IFLA_TUN_PERSIST: linux__bindgen_ty_52 = 6;
pub const LINUX_IFLA_TUN_MULTI_QUEUE: linux__bindgen_ty_52 = 7;
pub const LINUX_IFLA_TUN_NUM_QUEUES: linux__bindgen_ty_52 = 8;
pub const LINUX_IFLA_TUN_NUM_DISABLED_QUEUES: linux__bindgen_ty_52 = 9;
pub const LINUX___IFLA_TUN_MAX: linux__bindgen_ty_52 = 10;
pub type linux__bindgen_ty_52 = ::core::ffi::c_uint;
pub const LINUX_IFLA_RMNET_UNSPEC: linux__bindgen_ty_53 = 0;
pub const LINUX_IFLA_RMNET_MUX_ID: linux__bindgen_ty_53 = 1;
pub const LINUX_IFLA_RMNET_FLAGS: linux__bindgen_ty_53 = 2;
pub const LINUX___IFLA_RMNET_MAX: linux__bindgen_ty_53 = 3;
pub type linux__bindgen_ty_53 = ::core::ffi::c_uint;
pub const LINUX_IFLA_MCTP_UNSPEC: linux__bindgen_ty_54 = 0;
pub const LINUX_IFLA_MCTP_NET: linux__bindgen_ty_54 = 1;
pub const LINUX___IFLA_MCTP_MAX: linux__bindgen_ty_54 = 2;
pub type linux__bindgen_ty_54 = ::core::ffi::c_uint;
pub const LINUX_IFLA_DSA_UNSPEC: linux__bindgen_ty_55 = 0;
pub const LINUX_IFLA_DSA_CONDUIT: linux__bindgen_ty_55 = 1;
pub const LINUX_IFLA_DSA_MASTER: linux__bindgen_ty_55 = 1;
pub const LINUX___IFLA_DSA_MAX: linux__bindgen_ty_55 = 2;
pub type linux__bindgen_ty_55 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux_ifaddrmsg {
    pub ifa_family: linux___u8,
    pub ifa_prefixlen: linux___u8,
    pub ifa_flags: linux___u8,
    pub ifa_scope: linux___u8,
    pub ifa_index: linux___u32,
}
#[test]
fn bindgen_test_layout_ifaddrmsg() {
    const UNINIT: ::core::mem::MaybeUninit<linux_ifaddrmsg> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_ifaddrmsg>(),
        8usize,
        concat!("Size of: ", stringify!(linux_ifaddrmsg))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_ifaddrmsg>(),
        4usize,
        concat!("Alignment of ", stringify!(linux_ifaddrmsg))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ifa_family) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_ifaddrmsg),
            "::",
            stringify!(ifa_family)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ifa_prefixlen) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_ifaddrmsg),
            "::",
            stringify!(ifa_prefixlen)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ifa_flags) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_ifaddrmsg),
            "::",
            stringify!(ifa_flags)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ifa_scope) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_ifaddrmsg),
            "::",
            stringify!(ifa_scope)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ifa_index) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_ifaddrmsg),
            "::",
            stringify!(ifa_index)
        )
    );
}
pub const LINUX_IFA_UNSPEC: linux__bindgen_ty_56 = 0;
pub const LINUX_IFA_ADDRESS: linux__bindgen_ty_56 = 1;
pub const LINUX_IFA_LOCAL: linux__bindgen_ty_56 = 2;
pub const LINUX_IFA_LABEL: linux__bindgen_ty_56 = 3;
pub const LINUX_IFA_BROADCAST: linux__bindgen_ty_56 = 4;
pub const LINUX_IFA_ANYCAST: linux__bindgen_ty_56 = 5;
pub const LINUX_IFA_CACHEINFO: linux__bindgen_ty_56 = 6;
pub const LINUX_IFA_MULTICAST: linux__bindgen_ty_56 = 7;
pub const LINUX_IFA_FLAGS: linux__bindgen_ty_56 = 8;
pub const LINUX_IFA_RT_PRIORITY: linux__bindgen_ty_56 = 9;
pub const LINUX_IFA_TARGET_NETNSID: linux__bindgen_ty_56 = 10;
pub const LINUX_IFA_PROTO: linux__bindgen_ty_56 = 11;
pub const LINUX___IFA_MAX: linux__bindgen_ty_56 = 12;
pub type linux__bindgen_ty_56 = ::core::ffi::c_uint;
pub const LINUX_NDA_UNSPEC: linux__bindgen_ty_57 = 0;
pub const LINUX_NDA_DST: linux__bindgen_ty_57 = 1;
pub const LINUX_NDA_LLADDR: linux__bindgen_ty_57 = 2;
pub const LINUX_NDA_CACHEINFO: linux__bindgen_ty_57 = 3;
pub const LINUX_NDA_PROBES: linux__bindgen_ty_57 = 4;
pub const LINUX_NDA_VLAN: linux__bindgen_ty_57 = 5;
pub const LINUX_NDA_PORT: linux__bindgen_ty_57 = 6;
pub const LINUX_NDA_VNI: linux__bindgen_ty_57 = 7;
pub const LINUX_NDA_IFINDEX: linux__bindgen_ty_57 = 8;
pub const LINUX_NDA_MASTER: linux__bindgen_ty_57 = 9;
pub const LINUX_NDA_LINK_NETNSID: linux__bindgen_ty_57 = 10;
pub const LINUX_NDA_SRC_VNI: linux__bindgen_ty_57 = 11;
pub const LINUX_NDA_PROTOCOL: linux__bindgen_ty_57 = 12;
pub const LINUX_NDA_NH_ID: linux__bindgen_ty_57 = 13;
pub const LINUX_NDA_FDB_EXT_ATTRS: linux__bindgen_ty_57 = 14;
pub const LINUX_NDA_FLAGS_EXT: linux__bindgen_ty_57 = 15;
pub const LINUX_NDA_NDM_STATE_MASK: linux__bindgen_ty_57 = 16;
pub const LINUX_NDA_NDM_FLAGS_MASK: linux__bindgen_ty_57 = 17;
pub const LINUX___NDA_MAX: linux__bindgen_ty_57 = 18;
pub type linux__bindgen_ty_57 = ::core::ffi::c_uint;
pub const LINUX_NDTPA_UNSPEC: linux__bindgen_ty_58 = 0;
pub const LINUX_NDTPA_IFINDEX: linux__bindgen_ty_58 = 1;
pub const LINUX_NDTPA_REFCNT: linux__bindgen_ty_58 = 2;
pub const LINUX_NDTPA_REACHABLE_TIME: linux__bindgen_ty_58 = 3;
pub const LINUX_NDTPA_BASE_REACHABLE_TIME: linux__bindgen_ty_58 = 4;
pub const LINUX_NDTPA_RETRANS_TIME: linux__bindgen_ty_58 = 5;
pub const LINUX_NDTPA_GC_STALETIME: linux__bindgen_ty_58 = 6;
pub const LINUX_NDTPA_DELAY_PROBE_TIME: linux__bindgen_ty_58 = 7;
pub const LINUX_NDTPA_QUEUE_LEN: linux__bindgen_ty_58 = 8;
pub const LINUX_NDTPA_APP_PROBES: linux__bindgen_ty_58 = 9;
pub const LINUX_NDTPA_UCAST_PROBES: linux__bindgen_ty_58 = 10;
pub const LINUX_NDTPA_MCAST_PROBES: linux__bindgen_ty_58 = 11;
pub const LINUX_NDTPA_ANYCAST_DELAY: linux__bindgen_ty_58 = 12;
pub const LINUX_NDTPA_PROXY_DELAY: linux__bindgen_ty_58 = 13;
pub const LINUX_NDTPA_PROXY_QLEN: linux__bindgen_ty_58 = 14;
pub const LINUX_NDTPA_LOCKTIME: linux__bindgen_ty_58 = 15;
pub const LINUX_NDTPA_QUEUE_LENBYTES: linux__bindgen_ty_58 = 16;
pub const LINUX_NDTPA_MCAST_REPROBES: linux__bindgen_ty_58 = 17;
pub const LINUX_NDTPA_PAD: linux__bindgen_ty_58 = 18;
pub const LINUX_NDTPA_INTERVAL_PROBE_TIME_MS: linux__bindgen_ty_58 = 19;
pub const LINUX___NDTPA_MAX: linux__bindgen_ty_58 = 20;
pub type linux__bindgen_ty_58 = ::core::ffi::c_uint;
pub const LINUX_NDTA_UNSPEC: linux__bindgen_ty_59 = 0;
pub const LINUX_NDTA_NAME: linux__bindgen_ty_59 = 1;
pub const LINUX_NDTA_THRESH1: linux__bindgen_ty_59 = 2;
pub const LINUX_NDTA_THRESH2: linux__bindgen_ty_59 = 3;
pub const LINUX_NDTA_THRESH3: linux__bindgen_ty_59 = 4;
pub const LINUX_NDTA_CONFIG: linux__bindgen_ty_59 = 5;
pub const LINUX_NDTA_PARMS: linux__bindgen_ty_59 = 6;
pub const LINUX_NDTA_STATS: linux__bindgen_ty_59 = 7;
pub const LINUX_NDTA_GC_INTERVAL: linux__bindgen_ty_59 = 8;
pub const LINUX_NDTA_PAD: linux__bindgen_ty_59 = 9;
pub const LINUX___NDTA_MAX: linux__bindgen_ty_59 = 10;
pub type linux__bindgen_ty_59 = ::core::ffi::c_uint;
pub const LINUX_FDB_NOTIFY_BIT: linux__bindgen_ty_60 = 1;
pub const LINUX_FDB_NOTIFY_INACTIVE_BIT: linux__bindgen_ty_60 = 2;
pub type linux__bindgen_ty_60 = ::core::ffi::c_uint;
pub const LINUX_NFEA_UNSPEC: linux__bindgen_ty_61 = 0;
pub const LINUX_NFEA_ACTIVITY_NOTIFY: linux__bindgen_ty_61 = 1;
pub const LINUX_NFEA_DONT_REFRESH: linux__bindgen_ty_61 = 2;
pub const LINUX___NFEA_MAX: linux__bindgen_ty_61 = 3;
pub type linux__bindgen_ty_61 = ::core::ffi::c_uint;
pub const LINUX_RTM_BASE: linux__bindgen_ty_62 = 16;
pub const LINUX_RTM_NEWLINK: linux__bindgen_ty_62 = 16;
pub const LINUX_RTM_DELLINK: linux__bindgen_ty_62 = 17;
pub const LINUX_RTM_GETLINK: linux__bindgen_ty_62 = 18;
pub const LINUX_RTM_SETLINK: linux__bindgen_ty_62 = 19;
pub const LINUX_RTM_NEWADDR: linux__bindgen_ty_62 = 20;
pub const LINUX_RTM_DELADDR: linux__bindgen_ty_62 = 21;
pub const LINUX_RTM_GETADDR: linux__bindgen_ty_62 = 22;
pub const LINUX_RTM_NEWROUTE: linux__bindgen_ty_62 = 24;
pub const LINUX_RTM_DELROUTE: linux__bindgen_ty_62 = 25;
pub const LINUX_RTM_GETROUTE: linux__bindgen_ty_62 = 26;
pub const LINUX_RTM_NEWNEIGH: linux__bindgen_ty_62 = 28;
pub const LINUX_RTM_DELNEIGH: linux__bindgen_ty_62 = 29;
pub const LINUX_RTM_GETNEIGH: linux__bindgen_ty_62 = 30;
pub const LINUX_RTM_NEWRULE: linux__bindgen_ty_62 = 32;
pub const LINUX_RTM_DELRULE: linux__bindgen_ty_62 = 33;
pub const LINUX_RTM_GETRULE: linux__bindgen_ty_62 = 34;
pub const LINUX_RTM_NEWQDISC: linux__bindgen_ty_62 = 36;
pub const LINUX_RTM_DELQDISC: linux__bindgen_ty_62 = 37;
pub const LINUX_RTM_GETQDISC: linux__bindgen_ty_62 = 38;
pub const LINUX_RTM_NEWTCLASS: linux__bindgen_ty_62 = 40;
pub const LINUX_RTM_DELTCLASS: linux__bindgen_ty_62 = 41;
pub const LINUX_RTM_GETTCLASS: linux__bindgen_ty_62 = 42;
pub const LINUX_RTM_NEWTFILTER: linux__bindgen_ty_62 = 44;
pub const LINUX_RTM_DELTFILTER: linux__bindgen_ty_62 = 45;
pub const LINUX_RTM_GETTFILTER: linux__bindgen_ty_62 = 46;
pub const LINUX_RTM_NEWACTION: linux__bindgen_ty_62 = 48;
pub const LINUX_RTM_DELACTION: linux__bindgen_ty_62 = 49;
pub const LINUX_RTM_GETACTION: linux__bindgen_ty_62 = 50;
pub const LINUX_RTM_NEWPREFIX: linux__bindgen_ty_62 = 52;
pub const LINUX_RTM_GETMULTICAST: linux__bindgen_ty_62 = 58;
pub const LINUX_RTM_GETANYCAST: linux__bindgen_ty_62 = 62;
pub const LINUX_RTM_NEWNEIGHTBL: linux__bindgen_ty_62 = 64;
pub const LINUX_RTM_GETNEIGHTBL: linux__bindgen_ty_62 = 66;
pub const LINUX_RTM_SETNEIGHTBL: linux__bindgen_ty_62 = 67;
pub const LINUX_RTM_NEWNDUSEROPT: linux__bindgen_ty_62 = 68;
pub const LINUX_RTM_NEWADDRLABEL: linux__bindgen_ty_62 = 72;
pub const LINUX_RTM_DELADDRLABEL: linux__bindgen_ty_62 = 73;
pub const LINUX_RTM_GETADDRLABEL: linux__bindgen_ty_62 = 74;
pub const LINUX_RTM_GETDCB: linux__bindgen_ty_62 = 78;
pub const LINUX_RTM_SETDCB: linux__bindgen_ty_62 = 79;
pub const LINUX_RTM_NEWNETCONF: linux__bindgen_ty_62 = 80;
pub const LINUX_RTM_DELNETCONF: linux__bindgen_ty_62 = 81;
pub const LINUX_RTM_GETNETCONF: linux__bindgen_ty_62 = 82;
pub const LINUX_RTM_NEWMDB: linux__bindgen_ty_62 = 84;
pub const LINUX_RTM_DELMDB: linux__bindgen_ty_62 = 85;
pub const LINUX_RTM_GETMDB: linux__bindgen_ty_62 = 86;
pub const LINUX_RTM_NEWNSID: linux__bindgen_ty_62 = 88;
pub const LINUX_RTM_DELNSID: linux__bindgen_ty_62 = 89;
pub const LINUX_RTM_GETNSID: linux__bindgen_ty_62 = 90;
pub const LINUX_RTM_NEWSTATS: linux__bindgen_ty_62 = 92;
pub const LINUX_RTM_GETSTATS: linux__bindgen_ty_62 = 94;
pub const LINUX_RTM_SETSTATS: linux__bindgen_ty_62 = 95;
pub const LINUX_RTM_NEWCACHEREPORT: linux__bindgen_ty_62 = 96;
pub const LINUX_RTM_NEWCHAIN: linux__bindgen_ty_62 = 100;
pub const LINUX_RTM_DELCHAIN: linux__bindgen_ty_62 = 101;
pub const LINUX_RTM_GETCHAIN: linux__bindgen_ty_62 = 102;
pub const LINUX_RTM_NEWNEXTHOP: linux__bindgen_ty_62 = 104;
pub const LINUX_RTM_DELNEXTHOP: linux__bindgen_ty_62 = 105;
pub const LINUX_RTM_GETNEXTHOP: linux__bindgen_ty_62 = 106;
pub const LINUX_RTM_NEWLINKPROP: linux__bindgen_ty_62 = 108;
pub const LINUX_RTM_DELLINKPROP: linux__bindgen_ty_62 = 109;
pub const LINUX_RTM_GETLINKPROP: linux__bindgen_ty_62 = 110;
pub const LINUX_RTM_NEWVLAN: linux__bindgen_ty_62 = 112;
pub const LINUX_RTM_DELVLAN: linux__bindgen_ty_62 = 113;
pub const LINUX_RTM_GETVLAN: linux__bindgen_ty_62 = 114;
pub const LINUX_RTM_NEWNEXTHOPBUCKET: linux__bindgen_ty_62 = 116;
pub const LINUX_RTM_DELNEXTHOPBUCKET: linux__bindgen_ty_62 = 117;
pub const LINUX_RTM_GETNEXTHOPBUCKET: linux__bindgen_ty_62 = 118;
pub const LINUX_RTM_NEWTUNNEL: linux__bindgen_ty_62 = 120;
pub const LINUX_RTM_DELTUNNEL: linux__bindgen_ty_62 = 121;
pub const LINUX_RTM_GETTUNNEL: linux__bindgen_ty_62 = 122;
pub const LINUX___RTM_MAX: linux__bindgen_ty_62 = 123;
pub type linux__bindgen_ty_62 = ::core::ffi::c_uint;
pub const LINUX_RTN_UNSPEC: linux__bindgen_ty_63 = 0;
pub const LINUX_RTN_UNICAST: linux__bindgen_ty_63 = 1;
pub const LINUX_RTN_LOCAL: linux__bindgen_ty_63 = 2;
pub const LINUX_RTN_BROADCAST: linux__bindgen_ty_63 = 3;
pub const LINUX_RTN_ANYCAST: linux__bindgen_ty_63 = 4;
pub const LINUX_RTN_MULTICAST: linux__bindgen_ty_63 = 5;
pub const LINUX_RTN_BLACKHOLE: linux__bindgen_ty_63 = 6;
pub const LINUX_RTN_UNREACHABLE: linux__bindgen_ty_63 = 7;
pub const LINUX_RTN_PROHIBIT: linux__bindgen_ty_63 = 8;
pub const LINUX_RTN_THROW: linux__bindgen_ty_63 = 9;
pub const LINUX_RTN_NAT: linux__bindgen_ty_63 = 10;
pub const LINUX_RTN_XRESOLVE: linux__bindgen_ty_63 = 11;
pub const LINUX___RTN_MAX: linux__bindgen_ty_63 = 12;
pub type linux__bindgen_ty_63 = ::core::ffi::c_uint;
pub const LINUX_RTAX_UNSPEC: linux__bindgen_ty_64 = 0;
pub const LINUX_RTAX_LOCK: linux__bindgen_ty_64 = 1;
pub const LINUX_RTAX_MTU: linux__bindgen_ty_64 = 2;
pub const LINUX_RTAX_WINDOW: linux__bindgen_ty_64 = 3;
pub const LINUX_RTAX_RTT: linux__bindgen_ty_64 = 4;
pub const LINUX_RTAX_RTTVAR: linux__bindgen_ty_64 = 5;
pub const LINUX_RTAX_SSTHRESH: linux__bindgen_ty_64 = 6;
pub const LINUX_RTAX_CWND: linux__bindgen_ty_64 = 7;
pub const LINUX_RTAX_ADVMSS: linux__bindgen_ty_64 = 8;
pub const LINUX_RTAX_REORDERING: linux__bindgen_ty_64 = 9;
pub const LINUX_RTAX_HOPLIMIT: linux__bindgen_ty_64 = 10;
pub const LINUX_RTAX_INITCWND: linux__bindgen_ty_64 = 11;
pub const LINUX_RTAX_FEATURES: linux__bindgen_ty_64 = 12;
pub const LINUX_RTAX_RTO_MIN: linux__bindgen_ty_64 = 13;
pub const LINUX_RTAX_INITRWND: linux__bindgen_ty_64 = 14;
pub const LINUX_RTAX_QUICKACK: linux__bindgen_ty_64 = 15;
pub const LINUX_RTAX_CC_ALGO: linux__bindgen_ty_64 = 16;
pub const LINUX_RTAX_FASTOPEN_NO_COOKIE: linux__bindgen_ty_64 = 17;
pub const LINUX___RTAX_MAX: linux__bindgen_ty_64 = 18;
pub type linux__bindgen_ty_64 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux_ifinfomsg {
    pub ifi_family: ::core::ffi::c_uchar,
    pub l__ifi_pad: ::core::ffi::c_uchar,
    pub ifi_type: ::core::ffi::c_ushort,
    pub ifi_index: ::core::ffi::c_int,
    pub ifi_flags: ::core::ffi::c_uint,
    pub ifi_change: ::core::ffi::c_uint,
}
#[test]
fn bindgen_test_layout_ifinfomsg() {
    const UNINIT: ::core::mem::MaybeUninit<linux_ifinfomsg> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_ifinfomsg>(),
        16usize,
        concat!("Size of: ", stringify!(linux_ifinfomsg))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_ifinfomsg>(),
        4usize,
        concat!("Alignment of ", stringify!(linux_ifinfomsg))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ifi_family) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_ifinfomsg),
            "::",
            stringify!(ifi_family)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l__ifi_pad) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_ifinfomsg),
            "::",
            stringify!(l__ifi_pad)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ifi_type) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_ifinfomsg),
            "::",
            stringify!(ifi_type)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ifi_index) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_ifinfomsg),
            "::",
            stringify!(ifi_index)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ifi_flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_ifinfomsg),
            "::",
            stringify!(ifi_flags)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ifi_change) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_ifinfomsg),
            "::",
            stringify!(ifi_change)
        )
    );
}
pub const LINUX_PREFIX_UNSPEC: linux__bindgen_ty_65 = 0;
pub const LINUX_PREFIX_ADDRESS: linux__bindgen_ty_65 = 1;
pub const LINUX_PREFIX_CACHEINFO: linux__bindgen_ty_65 = 2;
pub const LINUX___PREFIX_MAX: linux__bindgen_ty_65 = 3;
pub type linux__bindgen_ty_65 = ::core::ffi::c_uint;
pub const LINUX_TCA_UNSPEC: linux__bindgen_ty_66 = 0;
pub const LINUX_TCA_KIND: linux__bindgen_ty_66 = 1;
pub const LINUX_TCA_OPTIONS: linux__bindgen_ty_66 = 2;
pub const LINUX_TCA_STATS: linux__bindgen_ty_66 = 3;
pub const LINUX_TCA_XSTATS: linux__bindgen_ty_66 = 4;
pub const LINUX_TCA_RATE: linux__bindgen_ty_66 = 5;
pub const LINUX_TCA_FCNT: linux__bindgen_ty_66 = 6;
pub const LINUX_TCA_STATS2: linux__bindgen_ty_66 = 7;
pub const LINUX_TCA_STAB: linux__bindgen_ty_66 = 8;
pub const LINUX_TCA_PAD: linux__bindgen_ty_66 = 9;
pub const LINUX_TCA_DUMP_INVISIBLE: linux__bindgen_ty_66 = 10;
pub const LINUX_TCA_CHAIN: linux__bindgen_ty_66 = 11;
pub const LINUX_TCA_HW_OFFLOAD: linux__bindgen_ty_66 = 12;
pub const LINUX_TCA_INGRESS_BLOCK: linux__bindgen_ty_66 = 13;
pub const LINUX_TCA_EGRESS_BLOCK: linux__bindgen_ty_66 = 14;
pub const LINUX_TCA_DUMP_FLAGS: linux__bindgen_ty_66 = 15;
pub const LINUX_TCA_EXT_WARN_MSG: linux__bindgen_ty_66 = 16;
pub const LINUX___TCA_MAX: linux__bindgen_ty_66 = 17;
pub type linux__bindgen_ty_66 = ::core::ffi::c_uint;
pub const LINUX_NDUSEROPT_UNSPEC: linux__bindgen_ty_67 = 0;
pub const LINUX_NDUSEROPT_SRCADDR: linux__bindgen_ty_67 = 1;
pub const LINUX___NDUSEROPT_MAX: linux__bindgen_ty_67 = 2;
pub type linux__bindgen_ty_67 = ::core::ffi::c_uint;
pub const LINUX_TCA_ROOT_UNSPEC: linux__bindgen_ty_68 = 0;
pub const LINUX_TCA_ROOT_TAB: linux__bindgen_ty_68 = 1;
pub const LINUX_TCA_ROOT_FLAGS: linux__bindgen_ty_68 = 2;
pub const LINUX_TCA_ROOT_COUNT: linux__bindgen_ty_68 = 3;
pub const LINUX_TCA_ROOT_TIME_DELTA: linux__bindgen_ty_68 = 4;
pub const LINUX_TCA_ROOT_EXT_WARN_MSG: linux__bindgen_ty_68 = 5;
pub const LINUX___TCA_ROOT_MAX: linux__bindgen_ty_68 = 6;
pub type linux__bindgen_ty_68 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux_clone_args {
    pub flags: linux___u64,
    pub pidfd: linux___u64,
    pub child_tid: linux___u64,
    pub parent_tid: linux___u64,
    pub exit_signal: linux___u64,
    pub stack: linux___u64,
    pub stack_size: linux___u64,
    pub tls: linux___u64,
    pub set_tid: linux___u64,
    pub set_tid_size: linux___u64,
    pub cgroup: linux___u64,
}
#[test]
fn bindgen_test_layout_clone_args() {
    const UNINIT: ::core::mem::MaybeUninit<linux_clone_args> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_clone_args>(),
        88usize,
        concat!("Size of: ", stringify!(linux_clone_args))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_clone_args>(),
        8usize,
        concat!("Alignment of ", stringify!(linux_clone_args))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_clone_args),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pidfd) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_clone_args),
            "::",
            stringify!(pidfd)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).child_tid) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_clone_args),
            "::",
            stringify!(child_tid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).parent_tid) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_clone_args),
            "::",
            stringify!(parent_tid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).exit_signal) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_clone_args),
            "::",
            stringify!(exit_signal)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).stack) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_clone_args),
            "::",
            stringify!(stack)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).stack_size) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_clone_args),
            "::",
            stringify!(stack_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tls) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_clone_args),
            "::",
            stringify!(tls)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).set_tid) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_clone_args),
            "::",
            stringify!(set_tid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).set_tid_size) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_clone_args),
            "::",
            stringify!(set_tid_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cgroup) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_clone_args),
            "::",
            stringify!(cgroup)
        )
    );
}
pub type linux_sigset_t = ::core::ffi::c_ulong;
pub type linux___signalfn_t =
    ::core::option::Option<unsafe extern "C" fn(arg1: ::core::ffi::c_int)>;
pub type linux___sighandler_t = linux___signalfn_t;
pub type linux___restorefn_t = ::core::option::Option<unsafe extern "C" fn()>;
pub type linux___sigrestore_t = linux___restorefn_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux_sigaction {
    pub lsa_handler: linux___sighandler_t,
    pub lsa_flags: ::core::ffi::c_ulong,
    pub lsa_restorer: linux___sigrestore_t,
    pub lsa_mask: linux_sigset_t,
}
#[test]
fn bindgen_test_layout_sigaction() {
    const UNINIT: ::core::mem::MaybeUninit<linux_sigaction> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_sigaction>(),
        32usize,
        concat!("Size of: ", stringify!(linux_sigaction))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_sigaction>(),
        8usize,
        concat!("Alignment of ", stringify!(linux_sigaction))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lsa_handler) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigaction),
            "::",
            stringify!(lsa_handler)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lsa_flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigaction),
            "::",
            stringify!(lsa_flags)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lsa_restorer) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigaction),
            "::",
            stringify!(lsa_restorer)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lsa_mask) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigaction),
            "::",
            stringify!(lsa_mask)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux_sigaltstack {
    pub ss_sp: *mut ::core::ffi::c_void,
    pub ss_flags: ::core::ffi::c_int,
    pub ss_size: linux___kernel_size_t,
}
#[test]
fn bindgen_test_layout_sigaltstack() {
    const UNINIT: ::core::mem::MaybeUninit<linux_sigaltstack> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_sigaltstack>(),
        24usize,
        concat!("Size of: ", stringify!(linux_sigaltstack))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_sigaltstack>(),
        8usize,
        concat!("Alignment of ", stringify!(linux_sigaltstack))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ss_sp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigaltstack),
            "::",
            stringify!(ss_sp)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ss_flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigaltstack),
            "::",
            stringify!(ss_flags)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ss_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigaltstack),
            "::",
            stringify!(ss_size)
        )
    );
}
pub type linux_stack_t = linux_sigaltstack;
#[repr(C)]
#[derive(Copy, Clone)]
pub union linux_sigval {
    pub sival_int: ::core::ffi::c_int,
    pub sival_ptr: *mut ::core::ffi::c_void,
}
#[test]
fn bindgen_test_layout_sigval() {
    const UNINIT: ::core::mem::MaybeUninit<linux_sigval> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_sigval>(),
        8usize,
        concat!("Size of: ", stringify!(linux_sigval))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_sigval>(),
        8usize,
        concat!("Alignment of ", stringify!(linux_sigval))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sival_int) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigval),
            "::",
            stringify!(sival_int)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sival_ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigval),
            "::",
            stringify!(sival_ptr)
        )
    );
}
impl ::core::fmt::Debug for linux_sigval {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "linux_sigval {{ union }}")
    }
}
pub type linux_sigval_t = linux_sigval;
#[repr(C)]
#[derive(Copy, Clone)]
pub union linux___sifields {
    pub l_kill: linux___sifields__bindgen_ty_1,
    pub l_timer: linux___sifields__bindgen_ty_2,
    pub l_rt: linux___sifields__bindgen_ty_3,
    pub l_sigchld: linux___sifields__bindgen_ty_4,
    pub l_sigfault: linux___sifields__bindgen_ty_5,
    pub l_sigpoll: linux___sifields__bindgen_ty_6,
    pub l_sigsys: linux___sifields__bindgen_ty_7,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux___sifields__bindgen_ty_1 {
    pub l_pid: linux___kernel_pid_t,
    pub l_uid: linux___kernel_uid32_t,
}
#[test]
fn bindgen_test_layout___sifields__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<linux___sifields__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux___sifields__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(linux___sifields__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<linux___sifields__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(linux___sifields__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_pid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_1),
            "::",
            stringify!(l_pid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_uid) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_1),
            "::",
            stringify!(l_uid)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct linux___sifields__bindgen_ty_2 {
    pub l_tid: linux___kernel_timer_t,
    pub l_overrun: ::core::ffi::c_int,
    pub l_sigval: linux_sigval_t,
    pub l_sys_private: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout___sifields__bindgen_ty_2() {
    const UNINIT: ::core::mem::MaybeUninit<linux___sifields__bindgen_ty_2> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux___sifields__bindgen_ty_2>(),
        24usize,
        concat!("Size of: ", stringify!(linux___sifields__bindgen_ty_2))
    );
    assert_eq!(
        ::core::mem::align_of::<linux___sifields__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(linux___sifields__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_tid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_2),
            "::",
            stringify!(l_tid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_overrun) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_2),
            "::",
            stringify!(l_overrun)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_sigval) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_2),
            "::",
            stringify!(l_sigval)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_sys_private) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_2),
            "::",
            stringify!(l_sys_private)
        )
    );
}
impl ::core::fmt::Debug for linux___sifields__bindgen_ty_2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(
            f,
            "linux___sifields__bindgen_ty_2 {{ l_tid: {:?}, l_overrun: {:?}, l_sigval: {:?}, l_sys_private: {:?} }}",
            self.l_tid, self.l_overrun, self.l_sigval, self.l_sys_private
        )
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct linux___sifields__bindgen_ty_3 {
    pub l_pid: linux___kernel_pid_t,
    pub l_uid: linux___kernel_uid32_t,
    pub l_sigval: linux_sigval_t,
}
#[test]
fn bindgen_test_layout___sifields__bindgen_ty_3() {
    const UNINIT: ::core::mem::MaybeUninit<linux___sifields__bindgen_ty_3> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux___sifields__bindgen_ty_3>(),
        16usize,
        concat!("Size of: ", stringify!(linux___sifields__bindgen_ty_3))
    );
    assert_eq!(
        ::core::mem::align_of::<linux___sifields__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(linux___sifields__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_pid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_3),
            "::",
            stringify!(l_pid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_uid) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_3),
            "::",
            stringify!(l_uid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_sigval) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_3),
            "::",
            stringify!(l_sigval)
        )
    );
}
impl ::core::fmt::Debug for linux___sifields__bindgen_ty_3 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(
            f,
            "linux___sifields__bindgen_ty_3 {{ l_pid: {:?}, l_uid: {:?}, l_sigval: {:?} }}",
            self.l_pid, self.l_uid, self.l_sigval
        )
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux___sifields__bindgen_ty_4 {
    pub l_pid: linux___kernel_pid_t,
    pub l_uid: linux___kernel_uid32_t,
    pub l_status: ::core::ffi::c_int,
    pub l_utime: linux___kernel_clock_t,
    pub l_stime: linux___kernel_clock_t,
}
#[test]
fn bindgen_test_layout___sifields__bindgen_ty_4() {
    const UNINIT: ::core::mem::MaybeUninit<linux___sifields__bindgen_ty_4> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux___sifields__bindgen_ty_4>(),
        32usize,
        concat!("Size of: ", stringify!(linux___sifields__bindgen_ty_4))
    );
    assert_eq!(
        ::core::mem::align_of::<linux___sifields__bindgen_ty_4>(),
        8usize,
        concat!("Alignment of ", stringify!(linux___sifields__bindgen_ty_4))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_pid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_4),
            "::",
            stringify!(l_pid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_uid) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_4),
            "::",
            stringify!(l_uid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_status) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_4),
            "::",
            stringify!(l_status)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_utime) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_4),
            "::",
            stringify!(l_utime)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_stime) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_4),
            "::",
            stringify!(l_stime)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct linux___sifields__bindgen_ty_5 {
    pub l_addr: *mut ::core::ffi::c_void,
    pub l__bindgen_anon_1: linux___sifields__bindgen_ty_5__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union linux___sifields__bindgen_ty_5__bindgen_ty_1 {
    pub l_trapno: ::core::ffi::c_int,
    pub l_addr_lsb: ::core::ffi::c_short,
    pub l_addr_bnd: linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
    pub l_addr_pkey: linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2,
    pub l_perf: linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 {
    pub l_dummy_bnd: [::core::ffi::c_char; 8usize],
    pub l_lower: *mut ::core::ffi::c_void,
    pub l_upper: *mut ::core::ffi::c_void,
}
#[test]
fn bindgen_test_layout___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<
        linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
    > = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_dummy_bnd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(l_dummy_bnd)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_lower) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(l_lower)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_upper) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(l_upper)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2 {
    pub l_dummy_pkey: [::core::ffi::c_char; 8usize],
    pub l_pkey: linux___u32,
}
#[test]
fn bindgen_test_layout___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::core::mem::MaybeUninit<
        linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2,
    > = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2>(),
        12usize,
        concat!(
            "Size of: ",
            stringify!(linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_dummy_pkey) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(l_dummy_pkey)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_pkey) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(l_pkey)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3 {
    pub l_data: ::core::ffi::c_ulong,
    pub l_type: linux___u32,
    pub l_flags: linux___u32,
}
#[test]
fn bindgen_test_layout___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3() {
    const UNINIT: ::core::mem::MaybeUninit<
        linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3,
    > = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(l_data)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_type) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(l_type)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_flags) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(l_flags)
        )
    );
}
#[test]
fn bindgen_test_layout___sifields__bindgen_ty_5__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<linux___sifields__bindgen_ty_5__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux___sifields__bindgen_ty_5__bindgen_ty_1>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(linux___sifields__bindgen_ty_5__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<linux___sifields__bindgen_ty_5__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(linux___sifields__bindgen_ty_5__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_trapno) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_5__bindgen_ty_1),
            "::",
            stringify!(l_trapno)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_addr_lsb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_5__bindgen_ty_1),
            "::",
            stringify!(l_addr_lsb)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_addr_bnd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_5__bindgen_ty_1),
            "::",
            stringify!(l_addr_bnd)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_addr_pkey) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_5__bindgen_ty_1),
            "::",
            stringify!(l_addr_pkey)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_perf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_5__bindgen_ty_1),
            "::",
            stringify!(l_perf)
        )
    );
}
impl ::core::fmt::Debug for linux___sifields__bindgen_ty_5__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(
            f,
            "linux___sifields__bindgen_ty_5__bindgen_ty_1 {{ union }}"
        )
    }
}
#[test]
fn bindgen_test_layout___sifields__bindgen_ty_5() {
    const UNINIT: ::core::mem::MaybeUninit<linux___sifields__bindgen_ty_5> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux___sifields__bindgen_ty_5>(),
        32usize,
        concat!("Size of: ", stringify!(linux___sifields__bindgen_ty_5))
    );
    assert_eq!(
        ::core::mem::align_of::<linux___sifields__bindgen_ty_5>(),
        8usize,
        concat!("Alignment of ", stringify!(linux___sifields__bindgen_ty_5))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_5),
            "::",
            stringify!(l_addr)
        )
    );
}
impl ::core::fmt::Debug for linux___sifields__bindgen_ty_5 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(
            f,
            "linux___sifields__bindgen_ty_5 {{ l_addr: {:?}, l__bindgen_anon_1: {:?} }}",
            self.l_addr, self.l__bindgen_anon_1
        )
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux___sifields__bindgen_ty_6 {
    pub l_band: ::core::ffi::c_long,
    pub l_fd: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout___sifields__bindgen_ty_6() {
    const UNINIT: ::core::mem::MaybeUninit<linux___sifields__bindgen_ty_6> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux___sifields__bindgen_ty_6>(),
        16usize,
        concat!("Size of: ", stringify!(linux___sifields__bindgen_ty_6))
    );
    assert_eq!(
        ::core::mem::align_of::<linux___sifields__bindgen_ty_6>(),
        8usize,
        concat!("Alignment of ", stringify!(linux___sifields__bindgen_ty_6))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_band) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_6),
            "::",
            stringify!(l_band)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_fd) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_6),
            "::",
            stringify!(l_fd)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux___sifields__bindgen_ty_7 {
    pub l_call_addr: *mut ::core::ffi::c_void,
    pub l_syscall: ::core::ffi::c_int,
    pub l_arch: ::core::ffi::c_uint,
}
#[test]
fn bindgen_test_layout___sifields__bindgen_ty_7() {
    const UNINIT: ::core::mem::MaybeUninit<linux___sifields__bindgen_ty_7> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux___sifields__bindgen_ty_7>(),
        16usize,
        concat!("Size of: ", stringify!(linux___sifields__bindgen_ty_7))
    );
    assert_eq!(
        ::core::mem::align_of::<linux___sifields__bindgen_ty_7>(),
        8usize,
        concat!("Alignment of ", stringify!(linux___sifields__bindgen_ty_7))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_call_addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_7),
            "::",
            stringify!(l_call_addr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_syscall) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_7),
            "::",
            stringify!(l_syscall)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_arch) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_7),
            "::",
            stringify!(l_arch)
        )
    );
}
#[test]
fn bindgen_test_layout___sifields() {
    const UNINIT: ::core::mem::MaybeUninit<linux___sifields> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux___sifields>(),
        32usize,
        concat!("Size of: ", stringify!(linux___sifields))
    );
    assert_eq!(
        ::core::mem::align_of::<linux___sifields>(),
        8usize,
        concat!("Alignment of ", stringify!(linux___sifields))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_kill) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields),
            "::",
            stringify!(l_kill)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_timer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields),
            "::",
            stringify!(l_timer)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_rt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields),
            "::",
            stringify!(l_rt)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_sigchld) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields),
            "::",
            stringify!(l_sigchld)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_sigfault) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields),
            "::",
            stringify!(l_sigfault)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_sigpoll) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields),
            "::",
            stringify!(l_sigpoll)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_sigsys) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields),
            "::",
            stringify!(l_sigsys)
        )
    );
}
impl ::core::fmt::Debug for linux___sifields {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "linux___sifields {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct linux_siginfo {
    pub l__bindgen_anon_1: linux_siginfo__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union linux_siginfo__bindgen_ty_1 {
    pub l__bindgen_anon_1: linux_siginfo__bindgen_ty_1__bindgen_ty_1,
    pub l_si_pad: [::core::ffi::c_int; 32usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct linux_siginfo__bindgen_ty_1__bindgen_ty_1 {
    pub lsi_signo: ::core::ffi::c_int,
    pub lsi_errno: ::core::ffi::c_int,
    pub lsi_code: ::core::ffi::c_int,
    pub l_sifields: linux___sifields,
}
#[test]
fn bindgen_test_layout_siginfo__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<linux_siginfo__bindgen_ty_1__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_siginfo__bindgen_ty_1__bindgen_ty_1>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(linux_siginfo__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<linux_siginfo__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(linux_siginfo__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lsi_signo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_siginfo__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(lsi_signo)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lsi_errno) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_siginfo__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(lsi_errno)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lsi_code) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_siginfo__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(lsi_code)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_sifields) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_siginfo__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(l_sifields)
        )
    );
}
impl ::core::fmt::Debug for linux_siginfo__bindgen_ty_1__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(
            f,
            "linux_siginfo__bindgen_ty_1__bindgen_ty_1 {{ lsi_signo: {:?}, lsi_errno: {:?}, lsi_code: {:?}, l_sifields: {:?} }}",
            self.lsi_signo, self.lsi_errno, self.lsi_code, self.l_sifields
        )
    }
}
#[test]
fn bindgen_test_layout_siginfo__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<linux_siginfo__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_siginfo__bindgen_ty_1>(),
        128usize,
        concat!("Size of: ", stringify!(linux_siginfo__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_siginfo__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(linux_siginfo__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_si_pad) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_siginfo__bindgen_ty_1),
            "::",
            stringify!(l_si_pad)
        )
    );
}
impl ::core::fmt::Debug for linux_siginfo__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "linux_siginfo__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_siginfo() {
    assert_eq!(
        ::core::mem::size_of::<linux_siginfo>(),
        128usize,
        concat!("Size of: ", stringify!(linux_siginfo))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_siginfo>(),
        8usize,
        concat!("Alignment of ", stringify!(linux_siginfo))
    );
}
impl ::core::fmt::Debug for linux_siginfo {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(
            f,
            "linux_siginfo {{ l__bindgen_anon_1: {:?} }}",
            self.l__bindgen_anon_1
        )
    }
}
pub type linux_siginfo_t = linux_siginfo;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux_timespec {
    pub tv_sec: linux___kernel_old_time_t,
    pub tv_nsec: ::core::ffi::c_long,
}
#[test]
fn bindgen_test_layout_timespec() {
    const UNINIT: ::core::mem::MaybeUninit<linux_timespec> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_timespec>(),
        16usize,
        concat!("Size of: ", stringify!(linux_timespec))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(linux_timespec))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux_timeval {
    pub tv_sec: linux___kernel_old_time_t,
    pub tv_usec: linux___kernel_suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    const UNINIT: ::core::mem::MaybeUninit<linux_timeval> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_timeval>(),
        16usize,
        concat!("Size of: ", stringify!(linux_timeval))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(linux_timeval))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tv_usec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux_itimerspec {
    pub it_interval: linux_timespec,
    pub it_value: linux_timespec,
}
#[test]
fn bindgen_test_layout_itimerspec() {
    const UNINIT: ::core::mem::MaybeUninit<linux_itimerspec> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_itimerspec>(),
        32usize,
        concat!("Size of: ", stringify!(linux_itimerspec))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_itimerspec>(),
        8usize,
        concat!("Alignment of ", stringify!(linux_itimerspec))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).it_interval) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_itimerspec),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).it_value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_itimerspec),
            "::",
            stringify!(it_value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux_itimerval {
    pub it_interval: linux_timeval,
    pub it_value: linux_timeval,
}
#[test]
fn bindgen_test_layout_itimerval() {
    const UNINIT: ::core::mem::MaybeUninit<linux_itimerval> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_itimerval>(),
        32usize,
        concat!("Size of: ", stringify!(linux_itimerval))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_itimerval>(),
        8usize,
        concat!("Alignment of ", stringify!(linux_itimerval))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).it_interval) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_itimerval),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).it_value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_itimerval),
            "::",
            stringify!(it_value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux_new_utsname {
    pub sysname: [::core::ffi::c_char; 65usize],
    pub nodename: [::core::ffi::c_char; 65usize],
    pub release: [::core::ffi::c_char; 65usize],
    pub version: [::core::ffi::c_char; 65usize],
    pub machine: [::core::ffi::c_char; 65usize],
    pub domainname: [::core::ffi::c_char; 65usize],
}
#[test]
fn bindgen_test_layout_new_utsname() {
    const UNINIT: ::core::mem::MaybeUninit<linux_new_utsname> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_new_utsname>(),
        390usize,
        concat!("Size of: ", stringify!(linux_new_utsname))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_new_utsname>(),
        1usize,
        concat!("Alignment of ", stringify!(linux_new_utsname))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sysname) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_new_utsname),
            "::",
            stringify!(sysname)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).nodename) as usize - ptr as usize },
        65usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_new_utsname),
            "::",
            stringify!(nodename)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).release) as usize - ptr as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_new_utsname),
            "::",
            stringify!(release)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        195usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_new_utsname),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).machine) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_new_utsname),
            "::",
            stringify!(machine)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).domainname) as usize - ptr as usize },
        325usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_new_utsname),
            "::",
            stringify!(domainname)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux__fpx_sw_bytes {
    pub magic1: linux___u32,
    pub extended_size: linux___u32,
    pub xfeatures: linux___u64,
    pub xstate_size: linux___u32,
    pub padding: [linux___u32; 7usize],
}
#[test]
fn bindgen_test_layout__fpx_sw_bytes() {
    const UNINIT: ::core::mem::MaybeUninit<linux__fpx_sw_bytes> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux__fpx_sw_bytes>(),
        48usize,
        concat!("Size of: ", stringify!(linux__fpx_sw_bytes))
    );
    assert_eq!(
        ::core::mem::align_of::<linux__fpx_sw_bytes>(),
        8usize,
        concat!("Alignment of ", stringify!(linux__fpx_sw_bytes))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).magic1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux__fpx_sw_bytes),
            "::",
            stringify!(magic1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).extended_size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(linux__fpx_sw_bytes),
            "::",
            stringify!(extended_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).xfeatures) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux__fpx_sw_bytes),
            "::",
            stringify!(xfeatures)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).xstate_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(linux__fpx_sw_bytes),
            "::",
            stringify!(xstate_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).padding) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(linux__fpx_sw_bytes),
            "::",
            stringify!(padding)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct linux__fpstate_64 {
    pub cwd: linux___u16,
    pub swd: linux___u16,
    pub twd: linux___u16,
    pub fop: linux___u16,
    pub rip: linux___u64,
    pub rdp: linux___u64,
    pub mxcsr: linux___u32,
    pub mxcsr_mask: linux___u32,
    pub st_space: [linux___u32; 32usize],
    pub xmm_space: [linux___u32; 64usize],
    pub reserved2: [linux___u32; 12usize],
    pub l__bindgen_anon_1: linux__fpstate_64__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union linux__fpstate_64__bindgen_ty_1 {
    pub reserved3: [linux___u32; 12usize],
    pub sw_reserved: linux__fpx_sw_bytes,
}
#[test]
fn bindgen_test_layout__fpstate_64__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<linux__fpstate_64__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux__fpstate_64__bindgen_ty_1>(),
        48usize,
        concat!("Size of: ", stringify!(linux__fpstate_64__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<linux__fpstate_64__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(linux__fpstate_64__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).reserved3) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux__fpstate_64__bindgen_ty_1),
            "::",
            stringify!(reserved3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sw_reserved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux__fpstate_64__bindgen_ty_1),
            "::",
            stringify!(sw_reserved)
        )
    );
}
impl ::core::fmt::Debug for linux__fpstate_64__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "linux__fpstate_64__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout__fpstate_64() {
    const UNINIT: ::core::mem::MaybeUninit<linux__fpstate_64> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux__fpstate_64>(),
        512usize,
        concat!("Size of: ", stringify!(linux__fpstate_64))
    );
    assert_eq!(
        ::core::mem::align_of::<linux__fpstate_64>(),
        8usize,
        concat!("Alignment of ", stringify!(linux__fpstate_64))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cwd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux__fpstate_64),
            "::",
            stringify!(cwd)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).swd) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(linux__fpstate_64),
            "::",
            stringify!(swd)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).twd) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(linux__fpstate_64),
            "::",
            stringify!(twd)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fop) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(linux__fpstate_64),
            "::",
            stringify!(fop)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rip) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux__fpstate_64),
            "::",
            stringify!(rip)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rdp) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(linux__fpstate_64),
            "::",
            stringify!(rdp)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).mxcsr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(linux__fpstate_64),
            "::",
            stringify!(mxcsr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).mxcsr_mask) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(linux__fpstate_64),
            "::",
            stringify!(mxcsr_mask)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).st_space) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(linux__fpstate_64),
            "::",
            stringify!(st_space)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).xmm_space) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(linux__fpstate_64),
            "::",
            stringify!(xmm_space)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).reserved2) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(linux__fpstate_64),
            "::",
            stringify!(reserved2)
        )
    );
}
impl ::core::fmt::Debug for linux__fpstate_64 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(
            f,
            "linux__fpstate_64 {{ cwd: {:?}, swd: {:?}, twd: {:?}, fop: {:?}, rip: {:?}, rdp: {:?}, mxcsr: {:?}, mxcsr_mask: {:?}, st_space: {:?}, xmm_space: {:?}, reserved2: {:?}, l__bindgen_anon_1: {:?} }}",
            self.cwd,
            self.swd,
            self.twd,
            self.fop,
            self.rip,
            self.rdp,
            self.mxcsr,
            self.mxcsr_mask,
            self.st_space,
            self.xmm_space,
            self.reserved2,
            self.l__bindgen_anon_1
        )
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct linux_sigcontext {
    pub r8: linux___u64,
    pub r9: linux___u64,
    pub r10: linux___u64,
    pub r11: linux___u64,
    pub r12: linux___u64,
    pub r13: linux___u64,
    pub r14: linux___u64,
    pub r15: linux___u64,
    pub rdi: linux___u64,
    pub rsi: linux___u64,
    pub rbp: linux___u64,
    pub rbx: linux___u64,
    pub rdx: linux___u64,
    pub rax: linux___u64,
    pub rcx: linux___u64,
    pub rsp: linux___u64,
    pub rip: linux___u64,
    pub eflags: linux___u64,
    pub cs: linux___u16,
    pub gs: linux___u16,
    pub fs: linux___u16,
    pub l__bindgen_anon_1: linux_sigcontext__bindgen_ty_1,
    pub err: linux___u64,
    pub trapno: linux___u64,
    pub oldmask: linux___u64,
    pub cr2: linux___u64,
    pub fpstate: *mut linux__fpstate_64,
    pub reserved1: [linux___u64; 8usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union linux_sigcontext__bindgen_ty_1 {
    pub ss: linux___u16,
    pub l__pad0: linux___u16,
}
#[test]
fn bindgen_test_layout_sigcontext__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<linux_sigcontext__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_sigcontext__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(linux_sigcontext__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_sigcontext__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(linux_sigcontext__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ss) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigcontext__bindgen_ty_1),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l__pad0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigcontext__bindgen_ty_1),
            "::",
            stringify!(l__pad0)
        )
    );
}
impl ::core::fmt::Debug for linux_sigcontext__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "linux_sigcontext__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_sigcontext() {
    const UNINIT: ::core::mem::MaybeUninit<linux_sigcontext> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_sigcontext>(),
        256usize,
        concat!("Size of: ", stringify!(linux_sigcontext))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_sigcontext>(),
        8usize,
        concat!("Alignment of ", stringify!(linux_sigcontext))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).r8) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigcontext),
            "::",
            stringify!(r8)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).r9) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigcontext),
            "::",
            stringify!(r9)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).r10) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigcontext),
            "::",
            stringify!(r10)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).r11) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigcontext),
            "::",
            stringify!(r11)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).r12) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigcontext),
            "::",
            stringify!(r12)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).r13) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigcontext),
            "::",
            stringify!(r13)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).r14) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigcontext),
            "::",
            stringify!(r14)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).r15) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigcontext),
            "::",
            stringify!(r15)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rdi) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigcontext),
            "::",
            stringify!(rdi)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rsi) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigcontext),
            "::",
            stringify!(rsi)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rbp) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigcontext),
            "::",
            stringify!(rbp)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rbx) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigcontext),
            "::",
            stringify!(rbx)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rdx) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigcontext),
            "::",
            stringify!(rdx)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rax) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigcontext),
            "::",
            stringify!(rax)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rcx) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigcontext),
            "::",
            stringify!(rcx)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rsp) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigcontext),
            "::",
            stringify!(rsp)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rip) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigcontext),
            "::",
            stringify!(rip)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).eflags) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigcontext),
            "::",
            stringify!(eflags)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cs) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigcontext),
            "::",
            stringify!(cs)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).gs) as usize - ptr as usize },
        146usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigcontext),
            "::",
            stringify!(gs)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fs) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigcontext),
            "::",
            stringify!(fs)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).err) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigcontext),
            "::",
            stringify!(err)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).trapno) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigcontext),
            "::",
            stringify!(trapno)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).oldmask) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigcontext),
            "::",
            stringify!(oldmask)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cr2) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigcontext),
            "::",
            stringify!(cr2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fpstate) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigcontext),
            "::",
            stringify!(fpstate)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).reserved1) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigcontext),
            "::",
            stringify!(reserved1)
        )
    );
}
impl ::core::fmt::Debug for linux_sigcontext {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(
            f,
            "linux_sigcontext {{ r8: {:?}, r9: {:?}, r10: {:?}, r11: {:?}, r12: {:?}, r13: {:?}, r14: {:?}, r15: {:?}, rdi: {:?}, rsi: {:?}, rbp: {:?}, rbx: {:?}, rdx: {:?}, rax: {:?}, rcx: {:?}, rsp: {:?}, rip: {:?}, eflags: {:?}, cs: {:?}, gs: {:?}, fs: {:?}, l__bindgen_anon_1: {:?}, err: {:?}, trapno: {:?}, oldmask: {:?}, cr2: {:?}, fpstate: {:?}, reserved1: {:?} }}",
            self.r8,
            self.r9,
            self.r10,
            self.r11,
            self.r12,
            self.r13,
            self.r14,
            self.r15,
            self.rdi,
            self.rsi,
            self.rbp,
            self.rbx,
            self.rdx,
            self.rax,
            self.rcx,
            self.rsp,
            self.rip,
            self.eflags,
            self.cs,
            self.gs,
            self.fs,
            self.l__bindgen_anon_1,
            self.err,
            self.trapno,
            self.oldmask,
            self.cr2,
            self.fpstate,
            self.reserved1
        )
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux_stat {
    pub st_dev: linux___kernel_ulong_t,
    pub st_ino: linux___kernel_ulong_t,
    pub st_nlink: linux___kernel_ulong_t,
    pub st_mode: ::core::ffi::c_uint,
    pub st_uid: ::core::ffi::c_uint,
    pub st_gid: ::core::ffi::c_uint,
    pub l__pad0: ::core::ffi::c_uint,
    pub st_rdev: linux___kernel_ulong_t,
    pub st_size: linux___kernel_long_t,
    pub st_blksize: linux___kernel_long_t,
    pub st_blocks: linux___kernel_long_t,
    pub st_atime: linux___kernel_ulong_t,
    pub st_atime_nsec: linux___kernel_ulong_t,
    pub st_mtime: linux___kernel_ulong_t,
    pub st_mtime_nsec: linux___kernel_ulong_t,
    pub st_ctime: linux___kernel_ulong_t,
    pub st_ctime_nsec: linux___kernel_ulong_t,
    pub l__unused: [linux___kernel_long_t; 3usize],
}
#[test]
fn bindgen_test_layout_stat() {
    const UNINIT: ::core::mem::MaybeUninit<linux_stat> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_stat>(),
        144usize,
        concat!("Size of: ", stringify!(linux_stat))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_stat>(),
        8usize,
        concat!("Alignment of ", stringify!(linux_stat))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).st_dev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_stat),
            "::",
            stringify!(st_dev)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).st_ino) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_stat),
            "::",
            stringify!(st_ino)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).st_nlink) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_stat),
            "::",
            stringify!(st_nlink)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).st_mode) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_stat),
            "::",
            stringify!(st_mode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).st_uid) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_stat),
            "::",
            stringify!(st_uid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).st_gid) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_stat),
            "::",
            stringify!(st_gid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l__pad0) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_stat),
            "::",
            stringify!(l__pad0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).st_rdev) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_stat),
            "::",
            stringify!(st_rdev)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).st_size) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_stat),
            "::",
            stringify!(st_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).st_blksize) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_stat),
            "::",
            stringify!(st_blksize)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).st_blocks) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_stat),
            "::",
            stringify!(st_blocks)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).st_atime) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_stat),
            "::",
            stringify!(st_atime)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).st_atime_nsec) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_stat),
            "::",
            stringify!(st_atime_nsec)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).st_mtime) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_stat),
            "::",
            stringify!(st_mtime)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).st_mtime_nsec) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_stat),
            "::",
            stringify!(st_mtime_nsec)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).st_ctime) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_stat),
            "::",
            stringify!(st_ctime)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).st_ctime_nsec) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_stat),
            "::",
            stringify!(st_ctime_nsec)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l__unused) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_stat),
            "::",
            stringify!(l__unused)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct linux_ucontext {
    pub uc_flags: ::core::ffi::c_ulong,
    pub uc_link: *mut linux_ucontext,
    pub uc_stack: linux_stack_t,
    pub uc_mcontext: linux_sigcontext,
    pub uc_sigmask: linux_sigset_t,
}
#[test]
fn bindgen_test_layout_ucontext() {
    const UNINIT: ::core::mem::MaybeUninit<linux_ucontext> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_ucontext>(),
        304usize,
        concat!("Size of: ", stringify!(linux_ucontext))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_ucontext>(),
        8usize,
        concat!("Alignment of ", stringify!(linux_ucontext))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).uc_flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_ucontext),
            "::",
            stringify!(uc_flags)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).uc_link) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_ucontext),
            "::",
            stringify!(uc_link)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).uc_stack) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_ucontext),
            "::",
            stringify!(uc_stack)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).uc_mcontext) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_ucontext),
            "::",
            stringify!(uc_mcontext)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).uc_sigmask) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_ucontext),
            "::",
            stringify!(uc_sigmask)
        )
    );
}
impl ::core::fmt::Debug for linux_ucontext {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(
            f,
            "linux_ucontext {{ uc_flags: {:?}, uc_link: {:?}, uc_stack: {:?}, uc_mcontext: {:?}, uc_sigmask: {:?} }}",
            self.uc_flags, self.uc_link, self.uc_stack, self.uc_mcontext, self.uc_sigmask
        )
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux_pollfd {
    pub fd: ::core::ffi::c_int,
    pub events: ::core::ffi::c_short,
    pub revents: ::core::ffi::c_short,
}
#[test]
fn bindgen_test_layout_pollfd() {
    const UNINIT: ::core::mem::MaybeUninit<linux_pollfd> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_pollfd>(),
        8usize,
        concat!("Size of: ", stringify!(linux_pollfd))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_pollfd>(),
        4usize,
        concat!("Alignment of ", stringify!(linux_pollfd))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_pollfd),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).events) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_pollfd),
            "::",
            stringify!(events)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).revents) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_pollfd),
            "::",
            stringify!(revents)
        )
    );
}
pub const LINUX_sock_shutdown_cmd_SHUT_RD: linux_sock_shutdown_cmd = 0;
pub const LINUX_sock_shutdown_cmd_SHUT_WR: linux_sock_shutdown_cmd = 1;
pub const LINUX_sock_shutdown_cmd_SHUT_RDWR: linux_sock_shutdown_cmd = 2;
pub type linux_sock_shutdown_cmd = ::core::ffi::c_uint;
