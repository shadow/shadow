#!/usr/bin/env python2.7

##
# Scallion - plug-in for The Shadow Simulator
#
# Copyright (c) 2010-2011 Rob Jansen <jansen@cs.umn.edu>
#
# This file is part of Scallion.
#
# Scallion is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Scallion is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Scallion.  If not, see <http://www.gnu.org/licenses/>.
#

import os, sys, subprocess, shutil, argparse
from datetime import datetime

DEFAULTPREFIX=os.path.abspath(os.path.expanduser("~/.shadow/"))
DEFAULTOUTPUT=os.path.abspath(os.path.expanduser("./"))
DEFAULTINPUT=os.path.abspath(os.path.expanduser("./hosts.xml"))

def main():
    # setup our commands
    ap = argparse.ArgumentParser(description='Run Tor experiments as a plug-in to Shadow', formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    ap.add_argument('-p', '--prefix', action="store", dest="prefix", help="PATH to scallion installation", metavar="PATH", default=DEFAULTPREFIX)
    ap.add_argument('-i', '--input-file', action="store", dest="input", help="add PATH as a shadow input XML file (in addition to PREFIX/share/topology.xml)", metavar="PATH", default=DEFAULTINPUT)
    ap.add_argument('-o', '--output-dir', action="store", type=str, dest="output", help="PATH to directory from which to run Shadow", metavar='PATH', default=DEFAULTOUTPUT)
    ap.add_argument('-r', '--reset', action="store_true", dest="reset", help="reset data directory and exit", default=False)
    ap.add_argument('-y', '--assume-yes', action="store_true", dest="clear", help="don't ask before resetting data directory", default=False)
    
    # get arguments, accessible with args.value
    args, unknown_args = ap.parse_known_args()
    
    args.output = os.path.abspath(os.path.expanduser(args.output))
    args.input = os.path.abspath(os.path.expanduser(args.input))
    args.prefix = os.path.abspath(os.path.expanduser(args.prefix))
    
    datapath = os.path.abspath(args.output+"/data")
    logpath = os.path.abspath(datapath+"/scallion.log")
    dstatpath = os.path.abspath(datapath+"/dstat.log")

    # does our output data directory already have data?
    if os.path.exists(datapath):
        log("Data exists in output path")
        if not args.clear and not query_yes_no("Is it OK to clear data directory {0}?".format(datapath), default="no"): 
            log("Experiment aborted to prevent destroying {0}".format(datapath))
            return -1
        
    # reset the data directory
    reset(args.output)
    log("Data directory reset in output path")
    
    if args.reset: return 0

    # start monitoring, if dstat is in the path
    dstat_cmd = "dstat -cmstTy --fs --output {0}".format(dstatpath)
    dstat_p = None
    try: dstat_p = subprocess.Popen(dstat_cmd.split(), stdout=open("/dev/null", 'w'))
    except: dstat_p = None

    # libevent must use epoll backend, disable the others
    os.putenv("EVENT_NOSELECT", "1")
    os.putenv("EVENT_NOPOLL", "1")
    os.putenv("EVENT_NOKQUEUE", "1")
    os.putenv("EVENT_NODEVPOLL", "1")
    os.putenv("EVENT_NOEVPORT", "1")
    os.putenv("EVENT_NOWIN32", "1")
    log("set environmental variables for libevent: EVENT_NOSELECT, EVENT_NOPOLL, EVENT_NOKQUEUE, EVENT_NODEVPOLL, EVENT_NOEVPORT, EVENT_NOWIN32")
        
    # run paths
    shadowpath = os.path.abspath("{0}/bin/shadow".format(args.prefix))
    preloadpath = os.path.abspath("{0}/lib/libshadow-preload-scallion.so".format(args.prefix))
    xmlpaths = os.path.abspath("{0}/share/topology.xml".format(args.prefix)) + " " + os.path.abspath("{0}".format(args.input))
    
    # command to run
    cmd = "{0} --preload={1} {2} {3}".format(shadowpath, preloadpath, ' '.join(unknown_args), xmlpaths)

    log("calling '{0}', output directed to '{1}'".format(cmd, logpath))
    f = open(logpath, 'w')
    start = datetime.now()
    retcode = subprocess.call(cmd.split(), cwd=args.output, stdout=f)
    end = datetime.now()
    f.close()

    if dstat_p is not None: dstat_p.kill()
    log("Shadow returned {1} in {2} seconds".format(end, retcode, end-start))
    
def query_yes_no(question, default="yes"):
    """Ask a yes/no question via raw_input() and return their answer.

    "question" is a string that is presented to the user.
    "default" is the presumed answer if the user just hits <Enter>.
        It must be "yes" (the default), "no" or None (meaning
        an answer is required of the user).

    The "answer" return value is one of "yes" or "no".
    """
    valid = {"yes":True,   "y":True,  "ye":True, "no":False,     "n":False}
    if default == None: prompt = " [y/n] "
    elif default == "yes": prompt = " [Y/n] "
    elif default == "no": prompt = " [y/N] "
    else: raise ValueError("invalid default answer: '%s'" % default)

    while True:
        sys.stderr.write(question + prompt)
        choice = raw_input().lower()
        if default is not None and choice == '': return valid[default]
        elif choice in valid: return valid[choice]
        else: sys.stderr.write("Please respond with 'yes' or 'no' (or 'y' or 'n').\n")

def reset(output):
    if os.path.exists(output+"/data"): shutil.rmtree(output+"/data")
    
    os.makedirs(output+"/data/authoritydata")
    os.makedirs(output+"/data/exitdata")
    os.makedirs(output+"/data/relaydata")
    os.makedirs(output+"/data/clientdata")
    os.makedirs(output+"/data/pcapdata")
    
    shutil.copytree(output+"/keys", output+"/data/authoritydata/4uthority/keys")
    return 0

def log(msg):
    color_start_code = "\033[94m" # red: \033[91m"
    color_end_code = "\033[0m"
    prefix = "[" + str(datetime.now()) + "] scallion: "
    print >> sys.stderr, color_start_code + prefix + msg + color_end_code

if __name__ == '__main__':
    main()
