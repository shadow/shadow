# Reconstruct relevant flags to pass through to LLVM for header parsing.
# Unfortunately CMAKE_C_FLAGS doesn't include everything; we need to add
# more, below.
separate_arguments(LLVM_FLAGS UNIX_COMMAND "${CMAKE_C_FLAGS}")

# Reconstruct "-I" flags.
get_target_property(INCLUDE_DIRECTORIES shadow-c INCLUDE_DIRECTORIES)
# Add -I prefix to each directory
foreach(INCLUDE_DIRECTORY IN LISTS INCLUDE_DIRECTORIES)
    list(APPEND LLVM_FLAGS "-I${INCLUDE_DIRECTORY}")
endforeach(INCLUDE_DIRECTORY)

# Reconstruct "-D" flags.
get_directory_property(COMPILE_DEFINITIONS COMPILE_DEFINITIONS)
# Add -D prefix to each definition
foreach(COMPILE_DEFINITION IN LISTS COMPILE_DEFINITIONS)
    list(APPEND LLVM_FLAGS "-D${COMPILE_DEFINITION}")
endforeach(COMPILE_DEFINITION)

# Generate wrapper.rs in the source tree.
add_custom_command(OUTPUT wrapper.rs
    COMMAND bindgen
        --whitelist-function "thread_.*"
        --whitelist-function "descriptor_unref"
        --whitelist-function "descriptor_setHandle"
        --whitelist-function "process_.*CompatDescriptor"
        --whitelist-function "process_get.*Ptr"
        --whitelist-function "process_parseArgStr.*"
        --whitelist-function "shadow_logger_getDefault"
        --whitelist-function "shadow_logger_shouldFilter"
        --whitelist-function "statuslistener_ref"
        --whitelist-function "statuslistener_unref"
        --whitelist-function "statuslistener_onStatusChanged"
        --whitelist-function "syscallcondition_new"
        --whitelist-function "syscallhandler_.*"
        --blacklist-function "syscallhandler_new"
        --blacklist-function "syscallhandler_ref"
        --blacklist-function "syscallhandler_unref"
        --blacklist-function "syscallhandler_make_syscall"
        --whitelist-type "PluginPtr"
        --whitelist-type "Status"
        --whitelist-type "StatusListener"
        --whitelist-type "SysCall.*"
        --whitelist-type "LegacyDescriptor"
        --whitelist-type "Trigger"
        --whitelist-type "TriggerType"
        --whitelist-var "CONFIG_PIPE_BUFFER_SIZE"
        --whitelist-var "SYSCALL_IO_BUFSIZE"
        --opaque-type "LegacyDescriptor"
        --opaque-type "CompatDescriptor"
        --disable-header-comment
        --raw-line "/* automatically generated by rust-bindgen */"
        --raw-line "use crate::host::descriptor::CompatDescriptor\;"
        ${CMAKE_CURRENT_SOURCE_DIR}/wrapper.h -o ${CMAKE_CURRENT_SOURCE_DIR}/wrapper.rs -- ${LLVM_FLAGS}
    MAIN_DEPENDENCY wrapper.h
    IMPLICIT_DEPENDS C wrapper.h)

# A fake target that depends on the wrapper.
add_custom_target(bindings_main_rust DEPENDS wrapper.rs)

# Only re-generate bindings when explicititly requested, so that
# our CI doesn't need to install the heavy bindgen dependency.
set_property(TARGET bindings_main_rust PROPERTY EXCLUDE_FROM_ALL true)
