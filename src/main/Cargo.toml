[package]
name = "shadow-rs"
version = "3.2.0"
edition.workspace = true
publish.workspace = true

[lib]
path = "lib.rs"
# the rlib crate is so that we build and run doctests
crate-type = ["rlib", "staticlib"]

[dependencies]
anyhow = "1.0.78"
atomic_refcell = "0.1"
backtrace = "0.3.69"
bitflags = "2.6"
# custom version of the bytes crate required to make the 'try_unsplit' method public
# issue: https://github.com/tokio-rs/bytes/issues/287
# pr: https://github.com/tokio-rs/bytes/pull/513
bytes = { git = "https://github.com/shadow/bytes", rev = "c48bd4439e7e043300521925524ecdcce7ff6bcc" }
clap = { version = "4.5.0", features = ["derive", "wrap_help"] }
crossbeam = "0.8.3"
gml-parser = { path = "../lib/gml-parser" }
libc = "0.2"
linux-api = { path = "../lib/linux-api", features = ["c_bindings", "libc", "rustix", "std"] }
# don't log debug or trace levels in release mode
log = { version = "0.4", features = ["release_max_level_debug"] }
log-c2rust = { path = "../lib/log-c2rust" }
logger = { path = "../lib/logger" }
scheduler = { path = "../lib/scheduler" }
shadow-shim-helper-rs = { path = "../lib/shadow-shim-helper-rs" }
lzma-rs = "0.3"
memoffset = "0.9.0"
merge = "0.1"
neli = "0.6.4"
nix = { version = "0.27.1", features = ["feature", "ioctl", "mman", "net", "personality", "resource", "sched", "signal", "socket", "time", "uio", "user"] }
shadow-pod = { path = "../lib/pod" }
once_cell = "1.19"
petgraph = "0.6"
rand = "0.8.5"
rand_chacha = "0.3.1"
rand_core = "0.6.4"
rand_xoshiro = "0.6.0"
rayon = "1.10.0"
regex = "1"
schemars = "0.8"
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0.109"
serde_yaml = "0.9"
shadow-build-info = { path = "../lib/shadow-build-info" }
shadow_shmem = { path = "../lib/shmem" }
shadow_tsc = { path = "../lib/tsc" }
signal-hook = "0.3.17"
static_assertions = "1.1.0"
std-util = { path = "../lib/std-util" }
syscall-logger = { path = "../lib/syscall-logger" }
tcp = { path = "../lib/tcp" }
tempfile = "3.10"
vasi-sync = { path = "../lib/vasi-sync" }
# TODO: switch to upstream crate if/when they merge and release
# https://github.com/dylanmckay/vsprintf/pull/2
#
# Alternatively, just call libc's vsprintf directly when the unstable feature
# `c_variadic` is stabilized, or if we decide to enable it anyway.
# https://github.com/rust-lang/rust/issues/44930
vsprintf = { git = "https://github.com/shadow/vsprintf", rev = "fa9a307e3043a972501b3157323ed8a9973ad45a" }
which = "6.0.0"
bytemuck = "1.16.0"
rustix = { version = "0.38.34", features = ["event", "mm", "pipe"] }

[features]
perf_timers = []

[build-dependencies]
shadow-build-common = { path = "../lib/shadow-build-common", features = ["bindgen", "cbindgen"] }
bindgen = { version = "0.69.1" }
cbindgen = { version = "0.26.0", default-features = false }
cc = { version = "1.1", features = ["parallel"] }
system-deps = "7.0"
# Building the C code from this crate's build script requires
# that these bindings have been generated.
shadow-shim-helper-rs = { path = "../lib/shadow-shim-helper-rs" }

[package.metadata.system-deps]
# Keep consistent with the minimum version number in /CMakeLists.txt
glib = { name = "glib-2.0", version = "2.58" }
